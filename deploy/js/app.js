// Generated by CoffeeScript 1.10.0
var AddPannel, Analytics, App, AppData, Attack, Audio, Background, Base, BlackKey, Bottom, Bpm, Button, ChannelStrip, Component, ComponentBase, ComponentEnv, ComponentFlt, ComponentLfo, ComponentNsg, ComponentOsc, ComponentPtg, Controllers, Controls, Cookies, Dashboard, Decay, Depth, Detune, DraggableElement, EnvSettings, Envelope, Filters, Flt, FltSettings, Frequency, ICButton, Instrument, KeyboardController, KeyboardPannel, LabelsToggle, Lfo, LfoSettings, LoadingScreen, LoginPannel, Logo, MathUtils, Menu, MenuButton, MidiController, MidiPannel, NoiseGenerator, Noises, NsgSettings, Octave, OctaveDown, OctaveUp, OscSettings, Oscillator, Pad, Pads, Pannel, PatchesPannel, PatternGate, PhysicsEngine, Picker, PixiBase, Poly, Portamento, Prompt, PtgSettings, Q, Radio, Release, Services, Session, SettingsBase, SettingsPannel, Slider, Soon, Spacer, SubmenuButton, SubmenuButtonAdd, SubmenuButtonMidi, SubmenuButtonPatch, Sustain, Tour, User, Utils, Vec2, View, Volume, Waves, WhiteKey, me,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AppData = (function() {
  function AppData() {}

  AppData.SHOW_TOUR = void 0;

  AppData.SHOW_KEYBOARD_PANNEL = void 0;

  AppData.SHOW_MENU_PANNEL = void 0;

  AppData.SHOW_LABELS = void 0;

  AppData.TOUR_MODE = false;

  AppData.PIXI = {
    renderer: null,
    stage: null
  };

  AppData.ASSETS = null;

  AppData.RATIO = window.devicePixelRatio >= 2 ? 2 : 1;

  AppData.WIDTH = 320 * AppData.RATIO;

  AppData.HEIGHT = 240 * AppData.RATIO;

  AppData.ICON_SIZE_1 = 48 * AppData.RATIO;

  AppData.ICON_SIZE_2 = 32 * AppData.RATIO;

  AppData.ICON_SIZE_3 = 72 * AppData.RATIO;

  AppData.ICON_SPACE1 = 15 * AppData.RATIO;

  AppData.ICON_SPACE2 = 50 * AppData.RATIO;

  AppData.ICON_SPACE3 = 40 * AppData.RATIO;

  AppData.PADDING = 26 * AppData.RATIO;

  AppData.MINIMAP = 4 * AppData.RATIO;

  AppData.SETTINGS_PANNEL_HEIGHT = 100 * AppData.RATIO;

  AppData.KEYBOARD_PANNEL_HEIGHT = 326 * AppData.RATIO;

  AppData.MENU_PANNEL = AppData.ICON_SIZE_1 + AppData.PADDING * 2;

  AppData.MENU_PANNEL_BORDER = 4 * AppData.RATIO;

  AppData.SUBMENU_PANNEL = 300 * AppData.RATIO;

  AppData.KEYPRESS_ALLOWED = true;

  AppData.BG = 0x191919;

  AppData.LINE_COLOR = 0xffffff;

  AppData.LINE_ALPHA = 0.3;

  AppData.COMPONENTS = {
    NSG: 0,
    OSC: 1,
    ENV: 2,
    FLT: 3,
    PTG: 4,
    LFO: 5
  };

  AppData.TITLE = [];

  AppData.TITLE[AppData.COMPONENTS.NSG] = 'NSG';

  AppData.TITLE[AppData.COMPONENTS.OSC] = 'OSC';

  AppData.TITLE[AppData.COMPONENTS.ENV] = 'ENV';

  AppData.TITLE[AppData.COMPONENTS.FLT] = 'FLT';

  AppData.TITLE[AppData.COMPONENTS.PTG] = 'PTG';

  AppData.TITLE[AppData.COMPONENTS.LFO] = 'LFO';

  AppData.COLORS = [];

  AppData.COLORS[AppData.COMPONENTS.NSG] = 0x00D8C7;

  AppData.COLORS[AppData.COMPONENTS.OSC] = 0x4A00FF;

  AppData.COLORS[AppData.COMPONENTS.ENV] = 0xD43557;

  AppData.COLORS[AppData.COMPONENTS.FLT] = 0x0BD7E3;

  AppData.COLORS[AppData.COMPONENTS.PTG] = 0x26E2A7;

  AppData.COLORS[AppData.COMPONENTS.LFO] = 0xF21141;

  AppData.WAVE_TYPE = {
    SINE: 0,
    TRIANGLE: 1,
    SQUARE: 2,
    SAWTOOTH: 3
  };

  AppData.NOISE_TYPE = {
    WHITE: 0,
    PINK: 1,
    BROWN: 2
  };

  AppData.OCTAVE_TYPE = {
    THIRTY_TWO: 0,
    SIXTEEN: 1,
    EIGHT: 2,
    FOUR: 3
  };

  AppData.FILTER_TYPE = {
    LOWPASS: 0,
    HIGHPASS: 1,
    BANDPASS: 2,
    LOWSHELF: 3,
    HIGHSHELF: 4,
    PEAKING: 5,
    NOTCH: 6,
    ALLPASS: 7
  };

  AppData.TEXTFORMAT = {
    TEST_FONT_1: {
      font: '20px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    TEST_FONT_2: {
      font: '20px letter_gothic_fsregular',
      fill: 'white',
      align: 'left'
    },
    HINT: {
      font: (20 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    MENU: {
      font: (24 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    MENU_SMALL: {
      font: (24 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'center'
    },
    PANNEL_TITLE: {
      font: (40 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    MENU_SUBTITLE: {
      font: (28 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    MENU_DESCRIPTION: {
      font: (32 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left',
      wordWrap: true,
      wordWrapWidth: AppData.SUBMENU_PANNEL + AppData.MENU_PANNEL + AppData.PADDING
    },
    MENU_DESCRIPTION_SMALL: {
      font: (20 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left',
      wordWrap: true,
      wordWrapWidth: AppData.SUBMENU_PANNEL + AppData.MENU_PANNEL
    },
    SETTINGS_TITLE: {
      font: (40 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    SETTINGS_SMB: {
      font: (32 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    SETTINGS_LABEL: {
      font: (24 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    SETTINGS_PAD: {
      font: (28 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    },
    SETTINGS_NUMBER: {
      font: (64 * AppData.RATIO) + 'px letter_gothic_fsregular',
      fill: 'white',
      align: 'left'
    },
    SETTINGS_NUMBER_POSTSCRIPT: {
      font: (24 * AppData.RATIO) + 'px letter_gothic_fsregular',
      fill: 'white',
      align: 'left'
    },
    PICKER: {
      font: (44 * AppData.RATIO) + 'px letter_gothic_fsregular',
      fill: 'white',
      align: 'left'
    },
    SOON: {
      font: (30 * AppData.RATIO) + 'px sofia_prolight',
      fill: 'white',
      align: 'left'
    }
  };

  return AppData;

})();

Cookies = (function() {
  function Cookies() {}

  Cookies.DURATION = 365;

  Cookies.setCookie = function(cname, cvalue) {
    var d, expires;
    d = new Date;
    d.setTime(d.getTime() + Cookies.DURATION * 24 * 60 * 60 * 1000);
    expires = 'expires=' + d.toUTCString();
    document.cookie = cname + '=' + cvalue + '; ' + expires;
  };

  Cookies.getCookie = function(cname) {
    var c, ca, i, name;
    name = cname + '=';
    ca = document.cookie.split(';');
    i = 0;
    while (i < ca.length) {
      c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
      i++;
    }
    return false;
  };

  return Cookies;

})();

Analytics = (function() {
  function Analytics() {}

  Analytics.event = function(category, type, id) {
    if (window.ga && location.hostname === !'localhost') {
      if (id) {
        ga('send', 'event', category, type, id);
      } else {
        ga('send', 'event', category, type);
      }
    }
    return null;
  };

  return Analytics;

})();

Services = (function() {
  function Services() {}

  Services.REFERENCE = new Firebase("https://mod-synth.firebaseio.com");

  Services.PATCHES = Services.REFERENCE.child('patches');

  Services.api = {
    login: {
      twitter: function(callback) {
        Services.REFERENCE.authWithOAuthPopup("twitter", function(error, authData) {
          if (error) {
            console.error('Login Failed!', error);
          } else {
            callback(authData);
          }
          return null;
        });
        return null;
      },
      facebook: function(callback) {
        Services.REFERENCE.authWithOAuthPopup("facebook", function(error, authData) {
          if (error) {
            console.error('Login Failed!', error);
          } else {
            callback(authData);
          }
          return null;
        }, {
          scope: "email,"
        });
        return null;
      },
      github: function(callback) {
        Services.REFERENCE.authWithOAuthPopup("github", function(error, authData) {
          if (error) {
            console.error('Login Failed!', error);
          } else {
            callback(authData);
          }
          return null;
        });
        return null;
      },
      logout: function(callback) {
        Services.REFERENCE.unauth();
        if (callback) {
          callback();
        }
        return null;
      }
    },
    patches: {
      generateUID: function() {
        return ('000000' + (Math.random() * Math.pow(36, 6) << 0).toString(36)).slice(-6);
      },
      load_patch: function(patch_id, callback) {
        var patch;
        patch = Services.PATCHES.child(patch_id);
        patch.once('value', callback);
        return null;
      },
      getAll: function(callback) {
        if (Services.REFERENCE.getAuth()) {
          Services.PATCHES.orderByChild('author').equalTo(Services.REFERENCE.getAuth().uid).once('value', callback);
        } else {

        }
        return null;
      },
      set_patch: function(patch_name, callback) {
        var patch;
        if (Services.REFERENCE.getAuth()) {
          Session.patch.uid = Services.api.patches.generateUID();
          Session.patch.name = patch_name;
          Session.patch.author = Services.REFERENCE.getAuth().uid;
          Session.patch.author_name = Services.REFERENCE.getAuth()[Services.REFERENCE.getAuth().auth.provider].displayName;
          Session.patch.date = String(Date.now());
          patch = Services.PATCHES.child(Session.patch.uid);
          patch.set({
            uid: Session.patch.uid,
            name: Session.patch.name,
            author: Session.patch.author,
            author_name: Session.patch.author_name,
            date: Session.patch.date,
            components: Session.SETTINGS
          });
          patch.once('value', callback);
        } else {

        }
        return null;
      },
      update_patch: function(component_session_uid, callback) {
        var component, patch;
        if (Session.patch.uid === 'default') {
          return;
        }
        if (Services.REFERENCE.getAuth()) {
          patch = Services.PATCHES.child(Session.patch.uid);
          component = patch.child('components');
          component.remove((function(_this) {
            return function() {
              component.update(Session.SETTINGS);
              return null;
            };
          })(this));
        } else {

        }
        return null;
      },
      delete_patch: function(patch_id, callback) {
        var patch;
        if (Services.REFERENCE.getAuth()) {
          patch = Services.PATCHES.child(patch_id);
          patch.remove(callback);
        } else {

        }
        return null;
      }
    }
  };

  return Services;

})();

Session = (function() {
  function Session() {}

  Session.BPM = 104;

  Session.OCTAVE = 0;

  Session["default"] = {
    uid: null,
    author: null,
    name: null,
    date: null
  };

  Session.patch = {
    uid: null,
    author: null,
    name: null,
    date: null
  };

  Session.SETTINGS = {};

  Session.MIDI = {};

  Session.generateUID = function() {
    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
  };

  Session.ADD = function(component) {
    var id;
    id = component.component_session_uid || Session.generateUID();
    Session.SETTINGS[id] = component;
    Session.SETTINGS[id].component_session_uid = id;
    Session.SETTINGS[id].connections = {};
    Session.SETTINGS[id].settings = component.settings || {};
    Session.SETTINGS[id].settings.x = component.settings.x !== void 0 ? component.settings.x : 0;
    Session.SETTINGS[id].settings.y = component.settings.y !== void 0 ? component.settings.y : 0;
    if (component.type_uid === AppData.COMPONENTS.NSG) {
      Session.SETTINGS[id].audioCapable = true;
      Session.SETTINGS[id].connections.ENV = null;
      Session.SETTINGS[id].connections.PTG = null;
      Session.SETTINGS[id].settings.solo = component.settings.solo !== void 0 ? component.settings.solo : false;
      Session.SETTINGS[id].settings.mute = component.settings.mute !== void 0 ? component.settings.mute : false;
      Session.SETTINGS[id].settings.volume = component.settings.volume !== void 0 ? component.settings.volume : 0;
      Session.SETTINGS[id].settings.noise_type = component.settings.noise_type !== void 0 ? component.settings.noise_type : AppData.NOISE_TYPE.WHITE;
    }
    if (component.type_uid === AppData.COMPONENTS.OSC) {
      Session.SETTINGS[id].audioCapable = true;
      Session.SETTINGS[id].connections.ENV = null;
      Session.SETTINGS[id].connections.PTG = null;
      Session.SETTINGS[id].settings.solo = component.settings.solo !== void 0 ? component.settings.solo : false;
      Session.SETTINGS[id].settings.mute = component.settings.mute !== void 0 ? component.settings.mute : false;
      Session.SETTINGS[id].settings.poly = component.settings.poly !== void 0 ? component.settings.poly : true;
      Session.SETTINGS[id].settings.volume = component.settings.volume !== void 0 ? component.settings.volume : 0;
      Session.SETTINGS[id].settings.wave_type = component.settings.wave_type !== void 0 ? component.settings.wave_type : AppData.WAVE_TYPE.SINE;
      Session.SETTINGS[id].settings.octave = component.settings.octave !== void 0 ? component.settings.octave : AppData.OCTAVE_TYPE.EIGHT;
      Session.SETTINGS[id].settings.detune = component.settings.detune !== void 0 ? component.settings.detune : 0;
      Session.SETTINGS[id].settings.portamento = component.settings.portamento !== void 0 ? component.settings.portamento : 0;
    }
    if (component.type_uid === AppData.COMPONENTS.ENV) {
      Session.SETTINGS[id].settings.bypass = component.settings.bypass !== void 0 ? component.settings.bypass : false;
      Session.SETTINGS[id].settings.attack = component.settings.attack !== void 0 ? component.settings.attack : 0;
      Session.SETTINGS[id].settings.decay = component.settings.decay !== void 0 ? component.settings.decay : 0;
      Session.SETTINGS[id].settings.sustain = component.settings.sustain !== void 0 ? component.settings.sustain : 100;
      Session.SETTINGS[id].settings.release = component.settings.release !== void 0 ? component.settings.release : 500;
    }
    if (component.type_uid === AppData.COMPONENTS.FLT) {
      Session.SETTINGS[id].settings.bypass = component.settings.bypass !== void 0 ? component.settings.bypass : false;
      Session.SETTINGS[id].settings.frequency = component.settings.frequency !== void 0 ? component.settings.frequency : 350;
      Session.SETTINGS[id].settings.detune = component.settings.detune !== void 0 ? component.settings.detune : 0;
      Session.SETTINGS[id].settings.q = component.settings.q !== void 0 ? component.settings.q : 20;
      Session.SETTINGS[id].settings.filter_type = component.settings.filter_type !== void 0 ? component.settings.filter_type : AppData.FILTER_TYPE.LOWPASS;
    }
    if (component.type_uid === AppData.COMPONENTS.PTG) {
      Session.SETTINGS[id].settings.bypass = component.settings.bypass !== void 0 ? component.settings.bypass : false;
      Session.SETTINGS[id].settings.pattern = component.settings.pattern !== void 0 ? component.settings.pattern : [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true];
    }
    if (component.type_uid === AppData.COMPONENTS.LFO) {
      Session.SETTINGS[id].settings.bypass = component.settings.bypass !== void 0 ? component.settings.bypass : false;
      Session.SETTINGS[id].settings.wave_type = component.settings.wave_type !== void 0 ? component.settings.wave_type : AppData.WAVE_TYPE.SINE;
      Session.SETTINGS[id].settings.frequency = component.settings.frequency !== void 0 ? component.settings.frequency : 8;
      Session.SETTINGS[id].settings.depth = component.settings.depth !== void 0 ? component.settings.depth : 60;
    }
    return Session.SETTINGS[id];
  };

  Session.GET = function(component_session_uid) {
    return Session.SETTINGS[component_session_uid];
  };

  Session.HANDLE_SOLO = function(component_session_uid) {
    var c, component, isSolo;
    isSolo = !Session.SETTINGS[component_session_uid].settings.solo;
    for (component in Session.SETTINGS) {
      c = Session.SETTINGS[component];
      if (c.type_uid === AppData.COMPONENTS.OSC || c.type_uid === AppData.COMPONENTS.NSG) {
        if (c.component_session_uid === component_session_uid) {
          c.settings.solo = !c.settings.solo;
          c.settings.mute = false;
        } else {
          c.settings.solo = false;
          c.settings.mute = isSolo === true ? true : false;
        }
        App.SETTINGS_CHANGE.dispatch({
          component: c.component_session_uid
        });
      }
    }
    return null;
  };

  return Session;

})();

Vec2 = (function() {
  Vec2.add = function(v1, v2) {
    return new Vec2(v1.x + v2.x, v1.y + v2.y);
  };

  Vec2.subtract = function(v1, v2) {
    return new Vec2(v1.x - v2.x, v1.y - v2.y);
  };

  function Vec2(x5, y5) {
    this.x = x5 != null ? x5 : 0;
    this.y = y5 != null ? y5 : 0;
  }

  Vec2.prototype.clone = function() {
    return new Vec2(this.x, this.y);
  };

  Vec2.prototype.add = function(v2) {
    this.x += v2.x;
    this.y += v2.y;
    return this;
  };

  Vec2.prototype.subtract = function(v2) {
    this.x -= v2.x;
    this.y -= v2.y;
    return this;
  };

  Vec2.prototype.scale = function(value) {
    this.x *= value;
    this.y *= value;
    return this;
  };

  Vec2.prototype.divide = function(value) {
    this.x /= value;
    this.y /= value;
    return this;
  };

  Vec2.prototype.copy = function(v2) {
    this.x = v2.x;
    this.y = v2.y;
    return this;
  };

  Vec2.prototype.set = function(x5, y5) {
    this.x = x5;
    this.y = y5;
    return this;
  };

  Vec2.prototype.invert = function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  };

  Vec2.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y;
  };

  Vec2.prototype.rotate = function(theta) {
    var co, si, xx;
    co = Math.cos(theta);
    si = Math.sin(theta);
    xx = co * this.x - si * this.y;
    this.y = si * this.x + co * this.y;
    this.x = xx;
    return this;
  };

  Vec2.prototype.angle = function() {
    return Math.atan2(this.y, this.x);
  };

  Vec2.prototype.angleBetween = function(v) {
    var aa, vv;
    vv = v.clone();
    aa = this.clone();
    vv.normalize();
    aa.normalize();
    return Math.acos(aa.dot(vv));
  };

  Vec2.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };

  Vec2.prototype.abs = function() {
    this.x = Math.abs(this.x);
    this.y = Math.abs(this.y);
    return this;
  };

  Vec2.prototype.clamp = function(min, max) {
    if (this.x > max) {
      this.x = max;
    } else if (this.x < min) {
      this.x = min;
    }
    if (this.y > max) {
      this.y = max;
    } else if (this.y < min) {
      this.y = min;
    }
    return this;
  };

  Vec2.prototype.normalize = function() {
    var len;
    len = this.length();
    if (len !== 0) {
      this.x = this.x / len;
      this.y = this.y / len;
    }
    return this;
  };

  Vec2.prototype.interpolateTo = function(v2, easing) {
    var diff;
    diff = Vec2.subtract(v2, this);
    diff.scale(easing);
    this.add(diff);
    return this;
  };

  return Vec2;

})();

MathUtils = (function() {
  function MathUtils() {}

  MathUtils.map = function(num, min1, max1, min2, max2, round, constrainMin, constrainMax) {
    var num1, num2;
    if (round == null) {
      round = false;
    }
    if (constrainMin == null) {
      constrainMin = true;
    }
    if (constrainMax == null) {
      constrainMax = true;
    }
    if (constrainMin && num < min1) {
      return min2;
    }
    if (constrainMax && num > max1) {
      return max2;
    }
    num1 = (num - min1) / (max1 - min1);
    num2 = (num1 * (max2 - min2)) + min2;
    if (round) {
      return Math.round(num2);
    }
    return num2;
  };

  MathUtils.lineIntersect = function(line1, line2) {
    var a, b, denominator, numerator1, numerator2, onLine1, onLine2, result;
    onLine1 = false;
    onLine2 = false;
    result = {
      x: 0,
      y: 0
    };
    denominator = ((line2.ey - line2.sy) * (line1.ex - line1.sx)) - ((line2.ex - line2.sx) * (line1.ey - line1.sy));
    if (denominator === 0) {
      return false;
    }
    a = line1.sy - line2.sy;
    b = line1.sx - line2.sx;
    numerator1 = ((line2.ex - line2.sx) * a) - ((line2.ey - line2.sy) * b);
    numerator2 = ((line1.ex - line1.sx) * a) - ((line1.ey - line1.sy) * b);
    a = numerator1 / denominator;
    b = numerator2 / denominator;
    result.x = line1.sx + (a * (line1.ex - line1.sx));
    result.y = line1.sy + (a * (line1.ey - line1.sy));
    if (a > 0 && a < 1) {
      onLine1 = true;
    }
    if (b > 0 && b < 1) {
      onLine2 = true;
    }
    if (onLine1 === true && onLine2 === true) {
      return result;
    }
    return false;
  };

  return MathUtils;

})();

Utils = (function() {
  function Utils() {}

  Utils.loadJSON = function(url) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open('get', url, true);
      xhr.responseType = 'json';
      xhr.onload = function() {
        var status;
        status = xhr.status;
        if (status === 200) {
          resolve(xhr.response);
        } else {
          reject(status);
        }
        return null;
      };
      xhr.onerror = function() {
        reject(Error('Network Error'));
        return null;
      };
      xhr.send();
      return null;
    });
  };

  Utils.getQueryParam = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search.toLowerCase());
    if (results === null) {
      return false;
    } else {
      return decodeURIComponent(results[1].replace(/\+/g, " "));
    }
  };

  Utils.confirm = function(action, onConfirm) {
    onConfirm();
    return null;
  };

  return Utils;

})();

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

Base = (function() {
  function Base() {}

  return Base;

})();

PixiBase = (function(superClass) {
  extend(PixiBase, superClass);

  PixiBase.RESIZE = new signals.Signal();

  function PixiBase() {
    this.update = bind(this.update, this);
    this.handleResize = bind(this.handleResize, this);
    this.handleContext = bind(this.handleContext, this);
    PixiBase.__super__.constructor.call(this);
    PIXI.utils._saidHello = true;
    AppData.PIXI.renderer = new PIXI.autoDetectRenderer(1, 1, {
      antialias: false,
      backgroundColor: 0x1A1A1A,
      resolution: 1
    });
    document.body.appendChild(AppData.PIXI.renderer.view);
    AppData.PIXI.stage = new PIXI.Container();
    AppData.PIXI.stage.interactive = true;
    window.addEventListener('resize', this.handleResize, false);
    AppData.PIXI.renderer.view.addEventListener('contextmenu', this.handleContext, false);
    this.handleResize();
    this.update();
  }

  PixiBase.prototype.handleContext = function(e) {
    return null;
  };

  PixiBase.prototype.handleResize = function() {
    AppData.WIDTH = window.innerWidth * AppData.RATIO;
    AppData.HEIGHT = window.innerHeight * AppData.RATIO;
    AppData.PIXI.renderer.resize(AppData.WIDTH, AppData.HEIGHT);
    AppData.PIXI.renderer.view.style.width = (AppData.WIDTH / AppData.RATIO) + 'px';
    AppData.PIXI.renderer.view.style.height = (AppData.HEIGHT / AppData.RATIO) + 'px';
    App.RESIZE.dispatch();
    return null;
  };

  PixiBase.prototype.update = function() {
    var renderable;
    requestAnimationFrame(this.update);
    AppData.PIXI.renderer.render(AppData.PIXI.stage);
    for (renderable in AppData.PIXI.stage.children) {
      if (AppData.PIXI.stage.children[renderable].update) {
        AppData.PIXI.stage.children[renderable].update();
      }
    }
    return null;
  };

  return PixiBase;

})(Base);

View = (function(superClass) {
  extend(View, superClass);

  function View() {
    this.onResize = bind(this.onResize, this);
    View.__super__.constructor.call(this);
    App.RESIZE.add(this.onResize);
  }

  View.prototype.onResize = function() {
    return null;
  };

  View.prototype.update = function() {
    return null;
  };

  return View;

})(PIXI.Container);

Radio = (function(superClass) {
  extend(Radio, superClass);

  function Radio(label) {
    this.onDown = bind(this.onDown, this);
    Radio.__super__.constructor.call(this);
    this.img = new PIXI.Sprite(AppData.ASSETS.sprite.textures['48-circle-nofill.png']);
    this.addChild(this.img);
    this.title = new PIXI.Text(label.toUpperCase(), AppData.TEXTFORMAT.SETTINGS_SMB);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.anchor.y = 0.5;
    this.title.x = this.img.width / 2;
    this.title.y = this.img.height / 2;
    this.title.tint = 0x5A5A5A;
    this.addChild(this.title);
    this.active = false;
    this.interactive = this.buttonMode = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
    } else {
      this.on('mousedown', this.onDown);
    }
  }

  Radio.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  Radio.prototype.select = function() {
    this.img.texture = AppData.ASSETS.sprite.textures['48-circle-fill.png'];
    this.img.tint = 0xffffff;
    TweenMax.to(this.img, 0, {
      alpha: 1.0,
      ease: Quad.easeInOut
    });
    return null;
  };

  Radio.prototype.unselect = function() {
    TweenMax.to(this.img, 0, {
      alpha: 0.2,
      ease: Quad.easeInOut
    });
    this.img.texture = AppData.ASSETS.sprite.textures['48-circle-nofill.png'];
    this.img.tint = 0x5A5A5A;
    return null;
  };

  Radio.prototype.buttonClick = function() {
    return null;
  };

  Radio.prototype.setActive = function(value) {
    this.active = value;
    if (this.active) {
      this.select();
    } else {
      this.unselect();
    }
    return null;
  };

  return Radio;

})(PIXI.Container);

Slider = (function(superClass) {
  extend(Slider, superClass);

  function Slider() {
    this.onEnd = bind(this.onEnd, this);
    this.onMove = bind(this.onMove, this);
    this.onDown = bind(this.onDown, this);
    Slider.__super__.constructor.call(this);
    this.steps = 0;
    this.snap = 0;
    this.elements = [];
    this.lastValue = 0;
    this.percentage = 0;
    this.dwnPosition = new Vec2();
    this.curPosition = new Vec2();
    this.isDragging = false;
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0xffffff, 0);
    this.graphics.drawRect(0, 0, AppData.ICON_SIZE_1, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
    this.interactive = this.buttonMode = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchmove', this.onMove);
      this.on('touchend', this.onEnd);
      this.on('touchendoutside', this.onEnd);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mousemove', this.onMove);
      this.on('mouseup', this.onEnd);
      this.on('mouseupoutside', this.onEnd);
    }
  }

  Slider.prototype.onDown = function(e) {
    this.lastValue = this.percentage;
    this.isDragging = true;
    this.dwnPosition.set(e.data.global.x, e.data.global.y);
    this.defaultCursor = "-webkit-grabbing";
    this.identifier = e.data.identifier;
    App.PICKER_SHOW.dispatch({
      x: this.x + AppData.ICON_SIZE_1 / 2,
      y: this.y + AppData.ICON_SIZE_1 / 2,
      steps: this.steps,
      snap: this.snap,
      elements: this.elements
    });
    App.PICKER_VALUE.dispatch({
      percentage: this.percentage
    });
    return null;
  };

  Slider.prototype.onMove = function(e) {
    if (e.data.identifier !== this.identifier) {
      return;
    }
    if (this.isDragging) {
      this.curPosition = new Vec2(e.data.global.x, e.data.global.y);
      this.curPosition.subtract(this.dwnPosition);
      this.curPosition.scale(0.5);
      this.percentage = Math.round(this.lastValue + this.curPosition.x);
      this.constrain();
      App.PICKER_VALUE.dispatch({
        percentage: this.percentage
      });
      this.onUpdate();
    }
    return null;
  };

  Slider.prototype.onEnd = function(e) {
    if (e.data.identifier !== this.identifier) {
      return;
    }
    this.isDragging = false;
    this.defaultCursor = "-webkit-grab";
    this.identifier = null;
    App.PICKER_HIDE.dispatch();
    return null;
  };

  Slider.prototype.constrain = function() {
    if (this.percentage < 0) {
      this.percentage = 0;
    }
    if (this.percentage > 100) {
      this.percentage = 100;
    }
    return this.percentage;
  };

  Slider.prototype.onUpdate = function() {};

  return Slider;

})(PIXI.Container);

Attack = (function(superClass) {
  extend(Attack, superClass);

  function Attack(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Attack.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.attack, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('ATTACK', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('ms', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Attack.prototype.onEnd = function(e) {
    var value;
    Attack.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Attack.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.attack;
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Attack.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.attack = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Attack;

})(Slider);

Bpm = (function(superClass) {
  extend(Bpm, superClass);

  function Bpm(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Bpm.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 40,
      max: 220
    };
    this.percentage = MathUtils.map(Session.BPM, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('BPM', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Bpm.prototype.onEnd = function(e) {
    var value;
    Bpm.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Bpm.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.BPM;
    }
    return null;
  };

  Bpm.prototype.onUpdate = function() {
    Session.BPM = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Bpm;

})(Slider);

Decay = (function(superClass) {
  extend(Decay, superClass);

  function Decay(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Decay.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.decay, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('DECAY', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('ms', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Decay.prototype.onEnd = function(e) {
    var value;
    Decay.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Decay.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.decay;
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Decay.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.decay = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Decay;

})(Slider);

Depth = (function(superClass) {
  extend(Depth, superClass);

  function Depth(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Depth.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.depth, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('DEPTH', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Depth.prototype.onEnd = function(e) {
    var value;
    Depth.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Depth.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.depth;
    }
    return null;
  };

  Depth.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.depth = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Depth;

})(Slider);

Detune = (function(superClass) {
  extend(Detune, superClass);

  function Detune(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Detune.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: -100,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.detune, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('DETUNE', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Detune.prototype.onEnd = function(e) {
    var value;
    Detune.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Detune.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.detune;
    }
    return null;
  };

  Detune.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.detune = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Detune;

})(Slider);

Filters = (function(superClass) {
  extend(Filters, superClass);

  function Filters(component_session_uid1) {
    var i, index, k, ref;
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Filters.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.possibleValues = [AppData.FILTER_TYPE.LOWPASS, AppData.FILTER_TYPE.HIGHPASS, AppData.FILTER_TYPE.BANDPASS, AppData.FILTER_TYPE.LOWSHELF, AppData.FILTER_TYPE.HIGHSHELF, AppData.FILTER_TYPE.PEAKING, AppData.FILTER_TYPE.NOTCH, AppData.FILTER_TYPE.ALLPASS];
    this.steps = this.possibleValues.length;
    this.snap = true;
    this.elements = ['0', '1', '2', '3', '4', '5', '6', '7'];
    for (i = k = 0, ref = this.possibleValues.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (Session.SETTINGS[this.component_session_uid].settings.filter_type === this.possibleValues[i]) {
        index = i;
        continue;
      }
    }
    this.percentage = MathUtils.map(index, 0, this.possibleValues.length, 0, 100, true);
    this.title = new PIXI.Text('FILTER', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Filters.prototype.onEnd = function(e) {
    var next;
    Filters.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      next = Session.SETTINGS[this.component_session_uid].settings.filter_type + 1;
      next %= this.possibleValues.length;
      this.percentage = MathUtils.map(next, 0, this.possibleValues.length - 1, 0, 100);
      this.onUpdate();
    }
    return null;
  };

  Filters.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = this.elements[Session.SETTINGS[this.component_session_uid].settings.filter_type];
    }
    return null;
  };

  Filters.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.filter_type = MathUtils.map(this.percentage, 0, 100, 0, this.possibleValues.length - 1, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Filters;

})(Slider);

Frequency = (function(superClass) {
  extend(Frequency, superClass);

  function Frequency(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Frequency.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 20
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.frequency, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('FREQ.', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('Hz', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Frequency.prototype.onEnd = function(e) {
    var value;
    Frequency.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Frequency.prototype.onSettingsChange = function(event) {
    var v;
    if (event.component === this.component_session_uid) {
      v = Session.SETTINGS[this.component_session_uid].settings.frequency;
      if (v >= 1000) {
        v = (Session.SETTINGS[this.component_session_uid].settings.frequency / 1000).toFixed(1) + 'k';
      }
      this.value.text = v;
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Frequency.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.frequency = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Frequency;

})(Slider);

Logo = (function(superClass) {
  extend(Logo, superClass);

  function Logo() {
    Logo.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['logo.png']);
  }

  return Logo;

})(PIXI.Sprite);

Noises = (function(superClass) {
  extend(Noises, superClass);

  function Noises(component_session_uid1) {
    var i, index, k, ref;
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Noises.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.possibleValues = [AppData.NOISE_TYPE.WHITE, AppData.NOISE_TYPE.PINK, AppData.NOISE_TYPE.BROWN];
    this.steps = this.possibleValues.length;
    this.snap = true;
    this.elements = [AppData.ASSETS.sprite.textures['ic-noise-white-32.png'], AppData.ASSETS.sprite.textures['ic-noise-pink-32.png'], AppData.ASSETS.sprite.textures['ic-noise-brown-32.png']];
    for (i = k = 0, ref = this.possibleValues.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (Session.SETTINGS[this.component_session_uid].settings.noise_type === this.possibleValues[i]) {
        index = i;
        continue;
      }
    }
    this.percentage = MathUtils.map(index, 0, this.possibleValues.length, 0, 100, true);
    this.title = new PIXI.Text('NOISE', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.texture = new PIXI.Sprite();
    this.texture.anchor.x = 0.5;
    this.texture.anchor.y = 1;
    this.texture.x = AppData.ICON_SIZE_1 / 2;
    this.texture.y = AppData.ICON_SIZE_1;
    this.texture.tint = 0xffffff;
    this.addChild(this.texture);
  }

  Noises.prototype.onEnd = function(e) {
    var next;
    Noises.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      next = Session.SETTINGS[this.component_session_uid].settings.noise_type + 1;
      next %= this.possibleValues.length;
      this.percentage = MathUtils.map(next, 0, this.possibleValues.length - 1, 0, 100);
      this.onUpdate();
    }
    return null;
  };

  Noises.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.texture.texture = this.elements[Session.SETTINGS[this.component_session_uid].settings.noise_type];
    }
    return null;
  };

  Noises.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.noise_type = MathUtils.map(this.percentage, 0, 100, 0, this.possibleValues.length - 1, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Noises;

})(Slider);

Octave = (function(superClass) {
  extend(Octave, superClass);

  function Octave(component_session_uid1) {
    var i, index, k, ref;
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Octave.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.possibleValues = [AppData.OCTAVE_TYPE.THIRTY_TWO, AppData.OCTAVE_TYPE.SIXTEEN, AppData.OCTAVE_TYPE.EIGHT, AppData.OCTAVE_TYPE.FOUR];
    this.steps = this.possibleValues.length;
    this.snap = true;
    this.elements = ['32', '16', '8', '4'];
    for (i = k = 0, ref = this.possibleValues.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (Session.SETTINGS[this.component_session_uid].settings.octave === this.possibleValues[i]) {
        index = i;
        continue;
      }
    }
    this.percentage = MathUtils.map(index, 0, this.possibleValues.length - 1, 0, 100, true);
    this.title = new PIXI.Text('OCTAVE', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text("’", AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Octave.prototype.onEnd = function(e) {
    var next;
    Octave.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      next = Session.SETTINGS[this.component_session_uid].settings.octave + 1;
      next %= this.possibleValues.length;
      this.percentage = MathUtils.map(next, 0, this.possibleValues.length - 1, 0, 100);
      this.onUpdate();
    }
    return null;
  };

  Octave.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = this.elements[Session.SETTINGS[this.component_session_uid].settings.octave];
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Octave.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.octave = MathUtils.map(this.percentage, 0, 100, 0, this.possibleValues.length - 1, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Octave;

})(Slider);

Pad = (function(superClass) {
  extend(Pad, superClass);

  function Pad(index1, size1) {
    this.index = index1;
    this.size = size1;
    this.onDown = bind(this.onDown, this);
    Pad.__super__.constructor.call(this);
    this.__alpha = this.last = 0.2;
    this.title = new PIXI.Text(this.index + 1, AppData.TEXTFORMAT.SETTINGS_PAD);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.anchor.y = 0;
    this.title.x = this.size / 2;
    this.title.y = 32 * AppData.RATIO;
    this.title.tint = 0xffffff;
    this.title.alpha = this.__alpha;
    this.addChild(this.title);
    this.icon = new PIXI.Graphics();
    this.addChild(this.icon);
    this.active = false;
    this.interactive = this.buttonMode = true;
    this.draw();
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
    } else {
      this.on('mousedown', this.onDown);
    }
  }

  Pad.prototype.draw = function() {
    this.icon.clear();
    this.icon.beginFill(0x00ffff, 0);
    this.icon.drawRect(0, 0, this.size, AppData.ICON_SIZE_1);
    this.icon.endFill();
    this.icon.drawRect(0, 0, this.size, AppData.ICON_SIZE_1);
    this.icon.beginFill(0xffffff, this.__alpha);
    this.icon.drawRect(4 * AppData.RATIO, 0, this.size - 8 * AppData.RATIO, 4);
    this.icon.endFill();
    return null;
  };

  Pad.prototype.onDown = function() {
    this.buttonClick(this.index);
    return null;
  };

  Pad.prototype.select = function() {
    this.__alpha = 1.0;
    this.draw();
    return null;
  };

  Pad.prototype.unselect = function() {
    this.__alpha = 0.2;
    this.draw();
    return null;
  };

  Pad.prototype.tick = function() {
    this.last = this.__alpha;
    this.__alpha = 0.5;
    this.draw();
    return null;
  };

  Pad.prototype.untick = function() {
    this.__alpha = this.last;
    this.draw();
    return null;
  };

  Pad.prototype.buttonClick = function(id) {
    return null;
  };

  Pad.prototype.setActive = function(value) {
    this.active = value;
    if (this.active) {
      this.select();
    } else {
      this.unselect();
    }
    return null;
  };

  return Pad;

})(PIXI.Container);

Pads = (function(superClass) {
  extend(Pads, superClass);

  function Pads(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onPadChange = bind(this.onPadChange, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.handlePad = bind(this.handlePad, this);
    this.resize = bind(this.resize, this);
    Pads.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    App.PATTERN_GATE.add(this.onPadChange);
    this.total = 16;
  }

  Pads.prototype.resize = function() {
    this.availableArea = AppData.WIDTH - AppData.PADDING - AppData.ICON_SIZE_1 - AppData.PADDING - this.x;
    this.itemArea = this.availableArea / this.total;
    this.removePads();
    this.addPads();
    return null;
  };

  Pads.prototype.removePads = function() {
    var child, i, k, ref;
    for (i = k = 0, ref = this.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      child = this.children[0];
      this.removeChild(child);
    }
    return null;
  };

  Pads.prototype.addPads = function() {
    var i, k, pad, ref;
    for (i = k = 0, ref = this.total; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      pad = new Pad(i, this.itemArea);
      pad.x = this.itemArea * i;
      pad.setActive(Session.SETTINGS[this.component_session_uid].settings.pattern[i]);
      pad.buttonClick = this.handlePad;
      this.addChild(pad);
    }
    return null;
  };

  Pads.prototype.handlePad = function(index) {
    Session.SETTINGS[this.component_session_uid].settings.pattern[index] = !this.children[index].active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  Pads.prototype.onSettingsChange = function(event) {
    var i, k, ref;
    if (event.component === this.component_session_uid) {
      for (i = k = 0, ref = Session.SETTINGS[this.component_session_uid].settings.pattern.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.children[i].setActive(Session.SETTINGS[this.component_session_uid].settings.pattern[i]);
      }
    }
    return null;
  };

  Pads.prototype.onPadChange = function(pad) {
    var tick, untick;
    tick = pad;
    untick = pad - 1;
    if (pad === 0) {
      untick = 15;
    }
    this.children[tick].tick();
    this.children[untick].untick();
    return null;
  };

  return Pads;

})(PIXI.Container);

Portamento = (function(superClass) {
  extend(Portamento, superClass);

  function Portamento(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Portamento.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.portamento, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('PORT.', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('ms', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Portamento.prototype.onEnd = function(e) {
    var value;
    Portamento.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Portamento.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.portamento;
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Portamento.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.portamento = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Portamento;

})(Slider);

Q = (function(superClass) {
  extend(Q, superClass);

  function Q(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Q.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0.0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.q, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('Q', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Q.prototype.onEnd = function(e) {
    var value;
    Q.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Q.prototype.onSettingsChange = function(event) {
    var v;
    if (event.component === this.component_session_uid) {
      v = Session.SETTINGS[this.component_session_uid].settings.q;
      if (v >= 1000) {
        v = (Session.SETTINGS[this.component_session_uid].settings.q / 1000).toFixed(1) + 'k';
      }
      this.value.text = v;
    }
    return null;
  };

  Q.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.q = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Q;

})(Slider);

Release = (function(superClass) {
  extend(Release, superClass);

  function Release(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Release.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.release, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('RELEASE', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('ms', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
  }

  Release.prototype.onEnd = function(e) {
    var value;
    Release.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Release.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.release;
      this.unit.x = this.value.x + this.value.width / 2;
    }
    return null;
  };

  Release.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.release = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Release;

})(Slider);

Spacer = (function(superClass) {
  extend(Spacer, superClass);

  function Spacer(size) {
    Spacer.__super__.constructor.call(this);
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0xffffff, 0);
    this.graphics.drawRect(0, 0, size, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
  }

  return Spacer;

})(PIXI.Container);

Sustain = (function(superClass) {
  extend(Sustain, superClass);

  function Sustain(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Sustain.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: 0,
      max: 100
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.sustain, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('SUSTAIN', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
  }

  Sustain.prototype.onEnd = function(e) {
    var value;
    Sustain.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Sustain.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.value.text = Session.SETTINGS[this.component_session_uid].settings.sustain;
    }
    return null;
  };

  Sustain.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.sustain = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Sustain;

})(Slider);

User = (function(superClass) {
  extend(User, superClass);

  function User(user) {
    var circleMask, graphics, picture;
    User.__super__.constructor.call(this);
    graphics = new PIXI.Graphics();
    graphics.beginFill(0x00ffff, 0);
    graphics.drawRect(0, 0, AppData.MENU_PANNEL, AppData.MENU_PANNEL);
    this.addChild(graphics);
    graphics.beginFill(0, 0);
    graphics.lineStyle(1 * AppData.RATIO, 0x111111);
    graphics.moveTo(0, AppData.MENU_PANNEL);
    graphics.lineTo(AppData.MENU_PANNEL, AppData.MENU_PANNEL);
    graphics.endFill();
    circleMask = new PIXI.Graphics();
    circleMask.beginFill(0x00ffff);
    circleMask.drawCircle(AppData.MENU_PANNEL / 2, AppData.MENU_PANNEL / 2, 24 * AppData.RATIO);
    circleMask.endFill();
    this.addChild(circleMask);
    picture = new PIXI.Sprite(PIXI.Texture.fromImage(user.twitter.profileImageURL, true));
    picture.anchor.x = picture.anchor.y = 0.5;
    picture.scale.x = picture.scale.y = AppData.RATIO;
    picture.x = AppData.MENU_PANNEL / 2;
    picture.y = AppData.MENU_PANNEL / 2;
    picture.mask = circleMask;
    this.addChild(picture);
  }

  User.prototype.select = function() {
    return null;
  };

  User.prototype.buttonClick = function() {
    return null;
  };

  return User;

})(PIXI.Container);

Volume = (function(superClass) {
  extend(Volume, superClass);

  function Volume(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Volume.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.range = {
      min: -60,
      max: 0
    };
    this.percentage = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.volume, this.range.min, this.range.max, 0, 100, true);
    this.title = new PIXI.Text('VOLUME', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.value = new PIXI.Text('', AppData.TEXTFORMAT.SETTINGS_NUMBER);
    this.value.scale.x = this.value.scale.y = 0.5;
    this.value.anchor.x = 0.5;
    this.value.anchor.y = 1;
    this.value.x = AppData.ICON_SIZE_1 / 2;
    this.value.y = AppData.ICON_SIZE_1 + 6 * AppData.RATIO;
    this.addChild(this.value);
    this.unit = new PIXI.Text('dB', AppData.TEXTFORMAT.SETTINGS_NUMBER_POSTSCRIPT);
    this.unit.scale.x = this.unit.scale.y = 0.5;
    this.unit.y = 17 * AppData.RATIO;
    this.unit.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.unit);
    this.icon = new PIXI.Sprite(AppData.ASSETS.sprite.textures['ic-vol-inf-48.png']);
    this.icon.visible = false;
    this.icon.scale.x = this.icon.scale.y = 0.5;
    this.icon.anchor.x = this.icon.anchor.y = 0.5;
    this.icon.x = AppData.ICON_SIZE_1 / 2;
    this.icon.y = 34 * AppData.RATIO;
    this.addChild(this.icon);
  }

  Volume.prototype.onEnd = function(e) {
    var value;
    Volume.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      value = 100 / (this.range.max - this.range.min);
      this.percentage += value;
      if (this.percentage >= value * (this.range.max - this.range.min)) {
        this.percentage = 0;
      }
      this.onUpdate();
    }
    return null;
  };

  Volume.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      switch (Session.SETTINGS[this.component_session_uid].settings.volume) {
        case this.range.min:
          this.value.text = '-  ';
          this.icon.visible = true;
          this.unit.x = this.icon.x + this.icon.width;
          break;
        default:
          this.value.text = Session.SETTINGS[this.component_session_uid].settings.volume;
          this.icon.visible = false;
          this.unit.x = this.value.x + this.value.width / 2;
      }
    }
    return null;
  };

  Volume.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.volume = MathUtils.map(this.percentage, 0, 100, this.range.min, this.range.max, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Volume;

})(Slider);

Waves = (function(superClass) {
  extend(Waves, superClass);

  function Waves(component_session_uid1) {
    var i, index, k, ref;
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onEnd = bind(this.onEnd, this);
    Waves.__super__.constructor.call(this);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.possibleValues = [AppData.WAVE_TYPE.SINE, AppData.WAVE_TYPE.TRIANGLE, AppData.WAVE_TYPE.SQUARE, AppData.WAVE_TYPE.SAWTOOTH];
    this.steps = this.possibleValues.length;
    this.snap = true;
    this.elements = [AppData.ASSETS.sprite.textures['ic-wave-sine-32.png'], AppData.ASSETS.sprite.textures['ic-wave-tri-32.png'], AppData.ASSETS.sprite.textures['ic-wave-sq-32.png'], AppData.ASSETS.sprite.textures['ic-wave-saw-32.png']];
    for (i = k = 0, ref = this.possibleValues.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (Session.SETTINGS[this.component_session_uid].settings.wave_type === this.possibleValues[i]) {
        index = i;
        continue;
      }
    }
    this.percentage = MathUtils.map(index, 0, this.possibleValues.length, 0, 100, true);
    this.title = new PIXI.Text('WAVE', AppData.TEXTFORMAT.SETTINGS_LABEL);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.x = AppData.ICON_SIZE_1 / 2;
    this.title.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.title.tint = 0x646464;
    this.addChild(this.title);
    this.texture = new PIXI.Sprite();
    this.texture.anchor.x = 0.5;
    this.texture.anchor.y = 1;
    this.texture.x = AppData.ICON_SIZE_1 / 2;
    this.texture.y = AppData.ICON_SIZE_1;
    this.texture.tint = 0xffffff;
    this.addChild(this.texture);
  }

  Waves.prototype.onEnd = function(e) {
    var next;
    Waves.__super__.onEnd.call(this, e);
    if (this.lastValue === this.percentage) {
      next = Session.SETTINGS[this.component_session_uid].settings.wave_type + 1;
      next %= this.possibleValues.length;
      this.percentage = MathUtils.map(next, 0, this.possibleValues.length - 1, 0, 100);
      this.onUpdate();
    }
    return null;
  };

  Waves.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.texture.texture = this.elements[Session.SETTINGS[this.component_session_uid].settings.wave_type];
    }
    return null;
  };

  Waves.prototype.onUpdate = function() {
    Session.SETTINGS[this.component_session_uid].settings.wave_type = MathUtils.map(this.percentage, 0, 100, 0, this.possibleValues.length - 1, true);
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return Waves;

})(Slider);

Button = (function(superClass) {
  extend(Button, superClass);

  function Button(texture) {
    this.onOutside = bind(this.onOutside, this);
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    Button.__super__.constructor.call(this);
    App.HELP.add(this.onHelp);
    this.texture = new PIXI.Sprite(texture);
    this.addChild(this.texture);
    this.duration = 0.1;
    this.ease = Quad.easeInOut;
    this.overAlpha = 0.22;
    this.outAlpha = 0.2;
    this.downAlpha = 1.0;
    this.selected = false;
    this.texture.alpha = this.outAlpha;
    this.code = 0;
  }

  Button.prototype.onHelp = function(value) {};

  Button.prototype.onDown = function() {
    this.buttonClick();
    this.select();
    return null;
  };

  Button.prototype.onUp = function() {
    this.selected = false;
    this.onOut();
    return null;
  };

  Button.prototype.onOver = function() {
    if (this.selected) {
      return;
    }
    TweenMax.to(this.texture, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  Button.prototype.onOut = function() {
    if (this.selected) {
      return;
    }
    this.unselect();
    return null;
  };

  Button.prototype.onOutside = function() {
    if (this.selected) {
      return;
    }
    this.unselect();
    return null;
  };

  Button.prototype.select = function() {
    this.selected = true;
    TweenMax.to(this.texture, 0, {
      alpha: this.downAlpha,
      ease: this.ease
    });
    return null;
  };

  Button.prototype.unselect = function() {
    this.selected = false;
    TweenMax.to(this.texture, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  Button.prototype.buttonClick = function() {
    return null;
  };

  Button.prototype.enable = function() {
    this.interactive = this.buttonMode = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onUp);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseover', this.onOver);
      this.on('mouseout', this.onOut);
      this.on('mouseupoutside', this.onOutside);
    }
    return null;
  };

  Button.prototype.disable = function() {
    this.interactive = this.buttonMode = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseover', this.onOver);
      this.off('mouseout', this.onOut);
      this.off('mouseupoutside', this.onOutside);
    }
    return null;
  };

  return Button;

})(PIXI.Container);

BlackKey = (function(superClass) {
  extend(BlackKey, superClass);

  function BlackKey() {
    this.onOutside = bind(this.onOutside, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    BlackKey.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['black-note.png']);
    this.hint = new PIXI.Text('B', AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 0.5;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.position.x = this.texture.width / 2;
    this.hint.position.y = this.texture.height / 2;
    this.hint.tint = 0x232323;
    this.hint.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
  }

  BlackKey.prototype.onHelp = function() {
    this.hint.visible = AppData.SHOW_LABELS;
    return null;
  };

  BlackKey.prototype.onDown = function() {
    App.NOTE_ON.dispatch({
      note: this.code,
      velocity: 127.0
    });
    return null;
  };

  BlackKey.prototype.onUp = function() {
    App.NOTE_OFF.dispatch({
      note: this.code
    });
    return null;
  };

  BlackKey.prototype.onOutside = function() {
    App.NOTE_OFF.dispatch({
      note: this.code
    });
    return null;
  };

  BlackKey.prototype.enable = function() {
    var i, k, label, ref;
    BlackKey.__super__.enable.call(this);
    label = '';
    for (i = k = 0, ref = KeyboardController.map.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (this.code === KeyboardController.map[i].midi) {
        label = KeyboardController.map[i].label;
        break;
      }
    }
    this.hint.text = label;
    return null;
  };

  return BlackKey;

})(Button);

ICButton = (function(superClass) {
  extend(ICButton, superClass);

  function ICButton(texture, hint) {
    if (hint == null) {
      hint = '';
    }
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    ICButton.__super__.constructor.call(this, texture);
    App.HELP.add(this.onHelp);
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.ICON_SIZE_1, AppData.ICON_SIZE_1);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.selected = false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.alpha = this.outAlpha;
    this.img = new PIXI.Sprite(texture);
    this.img.anchor.x = 0.5;
    this.img.anchor.y = 0.5;
    this.img.x = AppData.ICON_SIZE_1 / 2;
    this.img.y = AppData.ICON_SIZE_1 / 2;
    this.addChild(this.img);
    this.hint = new PIXI.Text(hint.toUpperCase(), AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 0;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.position.x = AppData.ICON_SIZE_1 / 2;
    this.hint.position.y = AppData.ICON_SIZE_1;
    this.hint.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
    this.enable();
  }

  ICButton.prototype.onHelp = function(value) {
    this.hint.visible = value;
    return null;
  };

  ICButton.prototype.select = function(value) {
    this.selected = value;
    TweenMax.to(this, 0, {
      alpha: (this.selected === false ? this.outAlpha : this.overAlpha),
      ease: this.ease
    });
    return null;
  };

  ICButton.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  ICButton.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  ICButton.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    if (this.selected) {
      return;
    }
    TweenMax.to(this, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  ICButton.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    if (this.selected) {
      return;
    }
    TweenMax.to(this, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  ICButton.prototype.buttonClick = function() {
    return null;
  };

  ICButton.prototype.hide = function(duration, delay) {
    TweenMax.to(this, duration, {
      alpha: 0,
      delay: delay,
      onComplete: (function(_this) {
        return function() {
          return _this.visible = false;
        };
      })(this)
    });
    this.onOut();
    return null;
  };

  ICButton.prototype.show = function(duration, delay) {
    this.visible = true;
    this.alpha = 0;
    TweenMax.to(this, duration, {
      alpha: 1,
      delay: delay,
      onComplete: (function(_this) {
        return function() {
          _this.onOut();
          return null;
        };
      })(this)
    });
    return null;
  };

  ICButton.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  ICButton.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return ICButton;

})(PIXI.Container);

LabelsToggle = (function(superClass) {
  extend(LabelsToggle, superClass);

  function LabelsToggle() {
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    var img, labels;
    LabelsToggle.__super__.constructor.call(this);
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.MENU_PANNEL, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
    img = new PIXI.Sprite(AppData.ASSETS.sprite.textures['help-toggle-bg.png']);
    img.anchor.x = 0.5;
    img.anchor.y = 0;
    img.x = AppData.MENU_PANNEL / 2;
    this.addChild(img);
    this.selector = new PIXI.Sprite(AppData.ASSETS.sprite.textures['help-toggle-selector.png']);
    this.selector.x = 29 * AppData.RATIO;
    this.selector.y = 4 * AppData.RATIO;
    this.selector.alpha = 0.5;
    this.addChild(this.selector);
    labels = Cookies.getCookie('labels');
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.selected = labels === 'show' ? true : false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.label = new PIXI.Text('HELP OFF', AppData.TEXTFORMAT.MENU_SMALL);
    this.label.anchor.x = 0.5;
    this.label.anchor.y = 1;
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.position.x = AppData.MENU_PANNEL / 2;
    this.label.position.y = AppData.ICON_SIZE_1;
    this.addChild(this.label);
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.MENU_PANNEL, AppData.ICON_SIZE_1);
    this.alpha = this.outAlpha;
    this.enable();
    if (this.selected === true) {
      this.onOver();
    }
    this.swap();
  }

  LabelsToggle.prototype.onDown = function() {
    this.selected = !this.selected;
    this.swap();
    this.onOver();
    this.buttonClick();
    return null;
  };

  LabelsToggle.prototype.swap = function() {
    TweenMax.to(this.selector, 0.3, {
      x: (this.selected === true ? 49 : 29) * AppData.RATIO,
      alpha: (this.selected === true ? 1 : 0.5),
      ease: Power2.easeInOut
    });
    this.label.text = 'LABELS ' + (this.selected === true ? 'ON' : 'OFF');
    return null;
  };

  LabelsToggle.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  LabelsToggle.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  LabelsToggle.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    if (this.selected) {
      return;
    }
    TweenMax.to(this, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  LabelsToggle.prototype.buttonClick = function() {
    return null;
  };

  LabelsToggle.prototype.select = function(value) {
    return null;
  };

  LabelsToggle.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  LabelsToggle.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return LabelsToggle;

})(PIXI.Container);

MenuButton = (function(superClass) {
  extend(MenuButton, superClass);

  function MenuButton(texture, hint) {
    if (hint == null) {
      hint = '';
    }
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    MenuButton.__super__.constructor.call(this);
    App.HELP.add(this.onHelp);
    this.selected = false;
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.MENU_PANNEL, AppData.MENU_PANNEL);
    this.graphics.beginFill(0, 0);
    this.graphics.lineStyle(1 * AppData.RATIO, 0x111111);
    this.graphics.moveTo(0, AppData.MENU_PANNEL);
    this.graphics.lineTo(AppData.MENU_PANNEL, AppData.MENU_PANNEL);
    this.graphics.endFill();
    this.addChild(this.graphics);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.img = new PIXI.Sprite(texture);
    this.img.anchor.x = 0.5;
    this.img.anchor.y = 0.5;
    this.img.x = AppData.MENU_PANNEL / 2;
    this.img.y = AppData.MENU_PANNEL / 2;
    this.addChild(this.img);
    this.hint = new PIXI.Text(hint.toUpperCase(), AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 1;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.position.x = AppData.MENU_PANNEL / 2;
    this.hint.position.y = AppData.MENU_PANNEL - 10 * AppData.RATIO;
    this.hint.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
    this.alpha = this.outAlpha;
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.MENU_PANNEL, AppData.MENU_PANNEL);
    this.enable();
  }

  MenuButton.prototype.onHelp = function(value) {
    this.hint.visible = value;
    return null;
  };

  MenuButton.prototype.onDown = function() {
    if (this.selected === true) {
      return;
    }
    this.buttonClick();
    return null;
  };

  MenuButton.prototype.onUp = function() {
    if (!this.enabled || this.selected === true) {
      return;
    }
    this.onOut();
    return null;
  };

  MenuButton.prototype.onOver = function() {
    if (!this.enabled || this.selected === true) {
      return;
    }
    TweenMax.to(this, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  MenuButton.prototype.onOut = function() {
    if (!this.enabled || this.selected === true) {
      return;
    }
    TweenMax.to(this, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  MenuButton.prototype.select = function(value) {
    this.selected = value;
    TweenMax.to(this, 0, {
      alpha: (this.selected === false ? this.outAlpha : this.overAlpha),
      ease: this.ease
    });
    return null;
  };

  MenuButton.prototype.buttonClick = function() {
    return null;
  };

  MenuButton.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  MenuButton.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return MenuButton;

})(PIXI.Container);

OctaveDown = (function(superClass) {
  extend(OctaveDown, superClass);

  function OctaveDown() {
    this.onOutside = bind(this.onOutside, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    OctaveDown.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['octave.png']);
    this.overAlpha = 0.11;
    this.outAlpha = 0.1;
    this.downAlpha = 1.0;
    this.texture.alpha = this.outAlpha;
    this.hint = new PIXI.Text('DOWN', AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 1;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.x = this.texture.width / 2;
    this.hint.y = this.texture.height - 10 * AppData.RATIO;
    this.hint.tint = 0x5A5A5A;
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
    this.enable();
  }

  OctaveDown.prototype.onHelp = function() {
    this.hint.visible = AppData.SHOW_LABELS;
    return null;
  };

  OctaveDown.prototype.onDown = function() {
    Audio.OCTAVE_STEP--;
    if (Audio.OCTAVE_STEP < 0) {
      Audio.OCTAVE_STEP = 0;
    }
    this.select();
    return null;
  };

  OctaveDown.prototype.onUp = function() {
    this.unselect();
    return null;
  };

  OctaveDown.prototype.onOutside = function() {
    this.unselect();
    return null;
  };

  return OctaveDown;

})(Button);

OctaveUp = (function(superClass) {
  extend(OctaveUp, superClass);

  function OctaveUp() {
    this.onOutside = bind(this.onOutside, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    OctaveUp.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['octave.png']);
    this.overAlpha = 0.11;
    this.outAlpha = 0.1;
    this.downAlpha = 1.0;
    this.texture.alpha = this.outAlpha;
    this.hint = new PIXI.Text('UP', AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 0;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.x = this.texture.width / 2;
    this.hint.y = 10 * AppData.RATIO;
    this.hint.tint = 0x5A5A5A;
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
    this.enable();
  }

  OctaveUp.prototype.onHelp = function() {
    this.hint.visible = AppData.SHOW_LABELS;
    return null;
  };

  OctaveUp.prototype.onDown = function() {
    Audio.OCTAVE_STEP++;
    if (Audio.OCTAVE_STEP > Audio.CUR_OCTAVE.length - 1) {
      Audio.OCTAVE_STEP = Audio.CUR_OCTAVE.length - 1;
    }
    this.select();
    return null;
  };

  OctaveUp.prototype.onUp = function() {
    this.unselect();
    return null;
  };

  OctaveUp.prototype.onOutside = function() {
    this.unselect();
    return null;
  };

  return OctaveUp;

})(Button);

Poly = (function(superClass) {
  extend(Poly, superClass);

  function Poly() {
    this.onDown = bind(this.onDown, this);
    Poly.__super__.constructor.call(this);
    this.img = new PIXI.Sprite(AppData.ASSETS.sprite.textures['poly-capsule.png']);
    this.addChild(this.img);
    this.title = new PIXI.Text('POLY', AppData.TEXTFORMAT.SETTINGS_SMB);
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.anchor.x = 0.5;
    this.title.anchor.y = 0.5;
    this.title.x = this.img.width / 2;
    this.title.y = this.img.height / 2;
    this.title.tint = 0x5A5A5A;
    this.addChild(this.title);
    this.active = false;
    this.interactive = this.buttonMode = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
    } else {
      this.on('mousedown', this.onDown);
    }
  }

  Poly.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  Poly.prototype.select = function() {
    this.img.texture = AppData.ASSETS.sprite.textures['poly-capsule-fill.png'];
    this.img.tint = 0xffffff;
    TweenMax.to(this.img, 0, {
      alpha: 1.0,
      ease: Quad.easeInOut
    });
    return null;
  };

  Poly.prototype.unselect = function() {
    TweenMax.to(this.img, 0, {
      alpha: 0.2,
      ease: Quad.easeInOut
    });
    this.img.texture = AppData.ASSETS.sprite.textures['poly-capsule.png'];
    this.img.tint = 0x5A5A5A;
    return null;
  };

  Poly.prototype.buttonClick = function() {
    return null;
  };

  Poly.prototype.setActive = function(value) {
    this.active = value;
    if (this.active) {
      this.select();
    } else {
      this.unselect();
    }
    return null;
  };

  return Poly;

})(PIXI.Container);

SubmenuButton = (function(superClass) {
  extend(SubmenuButton, superClass);

  function SubmenuButton(label, opt_texture) {
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    SubmenuButton.__super__.constructor.call(this);
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.SUBMENU_PANNEL, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.img = new PIXI.Sprite(opt_texture);
    this.img.anchor.x = 0.5;
    this.img.anchor.y = 0.5;
    this.img.x = AppData.PADDING + AppData.ICON_SIZE_2 / 2;
    this.img.y = AppData.ICON_SIZE_1 / 2;
    if (opt_texture) {
      this.addChild(this.img);
      this.graphics.beginFill(0x00ffff, 0);
      this.graphics.drawRect(AppData.PADDING, 0, AppData.ICON_SIZE_2, AppData.ICON_SIZE_1);
    }
    this.label = new PIXI.Text(label.toUpperCase(), AppData.TEXTFORMAT.MENU);
    this.label.anchor.y = 0.5;
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.position.x = opt_texture ? AppData.ICON_SIZE_2 + 40 * AppData.RATIO : AppData.PADDING;
    this.label.position.y = AppData.ICON_SIZE_1 / 2;
    this.addChild(this.label);
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.SUBMENU_PANNEL, AppData.ICON_SIZE_1);
    this.alpha = this.outAlpha;
    this.enable();
  }

  SubmenuButton.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  SubmenuButton.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  SubmenuButton.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButton.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButton.prototype.buttonClick = function() {
    return null;
  };

  SubmenuButton.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  SubmenuButton.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return SubmenuButton;

})(PIXI.Container);

SubmenuButtonAdd = (function(superClass) {
  extend(SubmenuButtonAdd, superClass);

  function SubmenuButtonAdd(label, texture, color) {
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    var height, textFormat, width;
    SubmenuButtonAdd.__super__.constructor.call(this);
    App.HELP.add(this.onHelp);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.scaleFactor = 0.45;
    width = Math.round(texture.width * this.scaleFactor);
    height = Math.round(texture.height * this.scaleFactor);
    this.img = new PIXI.Sprite(texture);
    this.img.anchor.x = 0.5;
    this.img.anchor.y = 1;
    this.img.scale.x = this.img.scale.y = this.scaleFactor;
    this.img.position.x = AppData.SUBMENU_PANNEL / 4;
    this.img.position.y = AppData.SUBMENU_PANNEL / 2 - AppData.PADDING;
    this.img.tint = color;
    this.addChild(this.img);
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.SUBMENU_PANNEL / 2, AppData.SUBMENU_PANNEL / 2);
    this.addChild(this.graphics);
    textFormat = JSON.parse(JSON.stringify(AppData.TEXTFORMAT.MENU_SUBTITLE));
    textFormat.align = 'center';
    textFormat.wordWrap = true;
    textFormat.wordWrapWidth = 300 * AppData.RATIO;
    this.hint = new PIXI.Text(label, textFormat);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 0;
    this.hint.tint = 0x646464;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.position.x = AppData.SUBMENU_PANNEL / 4;
    this.hint.position.y = AppData.SUBMENU_PANNEL / 2 - AppData.PADDING / 2;
    this.addChild(this.hint);
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.SUBMENU_PANNEL / 2, AppData.SUBMENU_PANNEL / 2);
    this.enable();
  }

  SubmenuButtonAdd.prototype.onHelp = function(value) {
    return null;
  };

  SubmenuButtonAdd.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  SubmenuButtonAdd.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  SubmenuButtonAdd.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this.hint, 0, {
      tint: 0xffffff,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonAdd.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this.hint, 0, {
      tint: 0x646464,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonAdd.prototype.buttonClick = function() {
    return null;
  };

  SubmenuButtonAdd.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  SubmenuButtonAdd.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return SubmenuButtonAdd;

})(PIXI.Container);

SubmenuButtonMidi = (function(superClass) {
  extend(SubmenuButtonMidi, superClass);

  function SubmenuButtonMidi(label, opt_texture) {
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    SubmenuButtonMidi.__super__.constructor.call(this);
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.SUBMENU_PANNEL, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.img = new PIXI.Sprite(opt_texture);
    this.img.anchor.x = 0.5;
    this.img.anchor.y = 0.5;
    this.img.x = AppData.PADDING + AppData.ICON_SIZE_2 / 2;
    this.img.y = AppData.ICON_SIZE_1 / 2;
    if (opt_texture) {
      this.addChild(this.img);
      this.graphics.beginFill(0x00ffff, 0);
      this.graphics.drawRect(AppData.PADDING, 0, AppData.ICON_SIZE_2, AppData.ICON_SIZE_1);
    }
    this.label = new PIXI.Text(label.toUpperCase(), AppData.TEXTFORMAT.MENU);
    this.label.anchor.y = 0.5;
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.position.x = opt_texture ? AppData.ICON_SIZE_2 + 40 * AppData.RATIO : AppData.PADDING;
    this.label.position.y = AppData.ICON_SIZE_1 / 2;
    this.label.alpha = this.outAlpha;
    this.addChild(this.label);
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.SUBMENU_PANNEL, AppData.ICON_SIZE_1);
    this.enable();
  }

  SubmenuButtonMidi.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  SubmenuButtonMidi.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  SubmenuButtonMidi.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this.label, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonMidi.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this.label, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonMidi.prototype.buttonClick = function() {
    return null;
  };

  SubmenuButtonMidi.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  SubmenuButtonMidi.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return SubmenuButtonMidi;

})(PIXI.Container);

SubmenuButtonPatch = (function(superClass) {
  extend(SubmenuButtonPatch, superClass);

  function SubmenuButtonPatch(label, date, extraButton) {
    var iconSize, limit;
    this.extraButton = extraButton != null ? extraButton : false;
    this.onOut = bind(this.onOut, this);
    this.onOver = bind(this.onOver, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    SubmenuButtonPatch.__super__.constructor.call(this);
    this.data = {
      label: label,
      date: date
    };
    limit = AppData.ICON_SIZE_1 * 2;
    iconSize = 8 * AppData.RATIO;
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(0x00ffff, 0);
    this.graphics.drawRect(0, 0, AppData.SUBMENU_PANNEL - limit, AppData.ICON_SIZE_1);
    this.addChild(this.graphics);
    this.duration = 0.3;
    this.ease = Quad.easeInOut;
    this.enabled = false;
    this.overAlpha = 1.0;
    this.outAlpha = 0.65;
    this.label = new PIXI.Text(label.toUpperCase(), AppData.TEXTFORMAT.MENU);
    this.label.anchor.y = 1;
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.position.x = AppData.PADDING;
    this.label.position.y = AppData.ICON_SIZE_1 / 2;
    this.addChild(this.label);
    this.date = new PIXI.Text(date, AppData.TEXTFORMAT.MENU);
    this.date.tint = 0x646464;
    this.date.anchor.y = 0;
    this.date.scale.x = this.date.scale.y = 0.5;
    this.date.position.x = AppData.PADDING * 2;
    this.date.position.y = AppData.ICON_SIZE_1 / 2;
    this.addChild(this.date);
    this.img = new PIXI.Sprite(AppData.ASSETS.sprite.textures['ic-selection-active.png']);
    this.img.tint = 0xff0000;
    this.img.anchor.x = 0;
    this.img.anchor.y = 0.5;
    this.img.scale.x = this.img.scale.y = 0.5;
    this.img.x = AppData.PADDING;
    this.img.y = AppData.ICON_SIZE_1 / 2 + iconSize;
    this.addChild(this.img);
    if (this.extraButton) {
      this.remove = new ICButton(AppData.ASSETS.sprite.textures['ic-remove-32.png'], '');
      this.remove.x = AppData.SUBMENU_PANNEL - limit / 2;
      this.remove.y = 0;
      this.addChild(this.remove);
    }
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.SUBMENU_PANNEL - limit, AppData.ICON_SIZE_1);
    this.alpha = this.outAlpha;
    this.enable();
    this.setCurrent(false);
  }

  SubmenuButtonPatch.prototype.onDown = function() {
    this.buttonClick();
    return null;
  };

  SubmenuButtonPatch.prototype.onUp = function() {
    this.onOut();
    return null;
  };

  SubmenuButtonPatch.prototype.onOver = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this, 0, {
      alpha: this.overAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonPatch.prototype.onOut = function() {
    if (!this.enabled) {
      return;
    }
    TweenMax.to(this, this.duration, {
      alpha: this.outAlpha,
      ease: this.ease
    });
    return null;
  };

  SubmenuButtonPatch.prototype.buttonClick = function() {
    return null;
  };

  SubmenuButtonPatch.prototype.setCurrent = function(value) {
    if (value === true) {
      this.img.visible = true;
      this.date.x = this.img.x + this.img.width + AppData.PADDING / 4;
      this.date.text = 'Currently editing';
    } else {
      this.img.visible = false;
      this.date.x = AppData.PADDING;
      this.date.text = this.data.date;
    }
    return null;
  };

  SubmenuButtonPatch.prototype.enable = function() {
    this.interactive = this.buttonMode = this.enabled = true;
    if (Modernizr.touch) {
      this.on('touchstart', this.onDown);
      this.on('touchend', this.onUp);
      this.on('touchendoutside', this.onOut);
    } else {
      this.on('mousedown', this.onDown);
      this.on('mouseup', this.onUp);
      this.on('mouseout', this.onOut);
      this.on('mouseover', this.onOver);
      this.on('mouseupoutside', this.onOut);
    }
    return null;
  };

  SubmenuButtonPatch.prototype.disable = function() {
    this.interactive = this.buttonMode = this.enabled = false;
    if (Modernizr.touch) {
      this.off('touchstart', this.onDown);
      this.off('touchend', this.onUp);
      this.off('touchendoutside', this.onOut);
    } else {
      this.off('mousedown', this.onDown);
      this.off('mouseup', this.onUp);
      this.off('mouseout', this.onOut);
      this.off('mouseover', this.onOver);
      this.off('mouseupoutside', this.onOut);
    }
    return null;
  };

  return SubmenuButtonPatch;

})(PIXI.Container);

WhiteKey = (function(superClass) {
  extend(WhiteKey, superClass);

  function WhiteKey() {
    this.onOutside = bind(this.onOutside, this);
    this.onUp = bind(this.onUp, this);
    this.onDown = bind(this.onDown, this);
    this.onHelp = bind(this.onHelp, this);
    WhiteKey.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['white-note.png']);
    this.hint = new PIXI.Text('W', AppData.TEXTFORMAT.HINT);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 1;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.position.x = this.texture.width / 2;
    this.hint.position.y = this.texture.height - 10 * AppData.RATIO;
    this.hint.tint = 0x232323;
    this.hint.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.hint.visible = AppData.SHOW_LABELS;
    this.addChild(this.hint);
  }

  WhiteKey.prototype.onHelp = function() {
    this.hint.visible = AppData.SHOW_LABELS;
    return null;
  };

  WhiteKey.prototype.onDown = function() {
    App.NOTE_ON.dispatch({
      note: this.code,
      velocity: 127.0
    });
    return null;
  };

  WhiteKey.prototype.onUp = function() {
    App.NOTE_OFF.dispatch({
      note: this.code
    });
    return null;
  };

  WhiteKey.prototype.onOutside = function() {
    App.NOTE_OFF.dispatch({
      note: this.code
    });
    return null;
  };

  WhiteKey.prototype.enable = function() {
    var i, k, label, ref;
    WhiteKey.__super__.enable.call(this);
    label = '';
    for (i = k = 0, ref = KeyboardController.map.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (this.code === KeyboardController.map[i].midi) {
        label = KeyboardController.map[i].label;
        break;
      }
    }
    this.hint.text = label;
    return null;
  };

  return WhiteKey;

})(Button);

SettingsBase = (function(superClass) {
  extend(SettingsBase, superClass);

  SettingsBase.prototype.component_session_uid = void 0;

  function SettingsBase(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.handleAutoSave = bind(this.handleAutoSave, this);
    this.removeComponent = bind(this.removeComponent, this);
    this.onResize = bind(this.onResize, this);
    this.onToggle = bind(this.onToggle, this);
    SettingsBase.__super__.constructor.call(this);
    App.TOGGLE_KEYBOARD.add(this.onToggle);
    App.RESIZE.add(this.onResize);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    App.SETTINGS_CHANGE.add(this.handleAutoSave);
    this.elements = [];
    this.initialX = 112 * AppData.RATIO;
    this.graphics = new PIXI.Graphics();
    this.graphics.beginFill(AppData.COLORS[Session.SETTINGS[this.component_session_uid].type_uid]);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(4 * AppData.RATIO, 0);
    this.graphics.lineTo(4 * AppData.RATIO, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(0, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
    this.addChild(this.graphics);
    this.label = new PIXI.Text(AppData.TITLE[Session.SETTINGS[this.component_session_uid].type_uid], AppData.TEXTFORMAT.SETTINGS_TITLE);
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.anchor.y = 0.5;
    this.label.position.x = AppData.PADDING;
    this.label.position.y = AppData.SETTINGS_PANNEL_HEIGHT / 2;
    this.label.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.label.visible = AppData.SHOW_KEYBOARD_PANNEL;
    this.addChild(this.label);
    this.remove = new ICButton(AppData.ASSETS.sprite.textures['ic-remove-32.png'], '');
    this.remove.x = AppData.WIDTH - AppData.ICON_SIZE_1 - AppData.PADDING;
    this.remove.y = AppData.PADDING;
    this.remove.buttonClick = this.removeComponent;
    this.addChild(this.remove);
  }

  SettingsBase.prototype.onToggle = function(value) {
    this.label.visible = value;
    return null;
  };

  SettingsBase.prototype.onResize = function() {
    this.remove.x = AppData.WIDTH - AppData.ICON_SIZE_1 - AppData.PADDING;
    return null;
  };

  SettingsBase.prototype.removeComponent = function() {
    App.REMOVE.dispatch({
      component_session_uid: this.component_session_uid
    });
    setTimeout((function(_this) {
      return function() {
        return App.AUTO_SAVE.dispatch({
          component_session_uid: _this.component_session_uid
        });
      };
    })(this), 1000);
    return null;
  };

  SettingsBase.prototype.handleAutoSave = function() {
    App.AUTO_SAVE.dispatch({
      component_session_uid: this.component_session_uid
    });
    return null;
  };

  SettingsBase.prototype.onSettingsChange = function() {
    return null;
  };

  SettingsBase.prototype.add = function(element) {
    this.elements.push(element);
    return this.addChild(element);
  };

  SettingsBase.prototype.adjustPosition = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.elements[i].x = this.initialX;
      } else {
        this.elements[i].x = this.elements[i - 1].x + this.elements[i - 1].width;
      }
      this.elements[i].y = Math.floor(AppData.SETTINGS_PANNEL_HEIGHT - AppData.ICON_SIZE_1) / 2;
    }
    return null;
  };

  return SettingsBase;

})(PIXI.Container);

EnvSettings = (function(superClass) {
  extend(EnvSettings, superClass);

  function EnvSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleB = bind(this.handleB, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    EnvSettings.__super__.constructor.call(this, this.component_session_uid);
    this.bypass = new Radio('B');
    this.bypass.buttonClick = this.handleB;
    this.add(this.bypass);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.attack = new Attack(this.component_session_uid);
    this.attack.range.min = 0;
    this.attack.range.max = 2000;
    this.add(this.attack);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.decay = new Decay(this.component_session_uid);
    this.decay.range.min = 0;
    this.decay.range.max = 2000;
    this.add(this.decay);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.sustain = new Sustain(this.component_session_uid);
    this.add(this.sustain);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.release = new Release(this.component_session_uid);
    this.release.range.min = 0;
    this.release.range.max = 2000;
    this.add(this.release);
    this.adjustPosition();
  }

  EnvSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.bypass.setActive(Session.SETTINGS[this.component_session_uid].settings.bypass);
    }
    return null;
  };

  EnvSettings.prototype.handleB = function() {
    Session.SETTINGS[this.component_session_uid].settings.bypass = !this.bypass.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return EnvSettings;

})(SettingsBase);

FltSettings = (function(superClass) {
  extend(FltSettings, superClass);

  function FltSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleB = bind(this.handleB, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    FltSettings.__super__.constructor.call(this, this.component_session_uid);
    this.bypass = new Radio('B');
    this.bypass.buttonClick = this.handleB;
    this.add(this.bypass);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.detune = new Detune(this.component_session_uid);
    this.add(this.detune);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.q = new Q(this.component_session_uid);
    this.add(this.q);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.filterTypes = new Filters(this.component_session_uid);
    this.add(this.filterTypes);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.frequency = new Frequency(this.component_session_uid);
    this.frequency.range.min = 0;
    this.frequency.range.max = 20000;
    this.add(this.frequency);
    this.adjustPosition();
  }

  FltSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.bypass.setActive(Session.SETTINGS[this.component_session_uid].settings.bypass);
    }
    return null;
  };

  FltSettings.prototype.handleB = function() {
    Session.SETTINGS[this.component_session_uid].settings.bypass = !this.bypass.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return FltSettings;

})(SettingsBase);

LfoSettings = (function(superClass) {
  extend(LfoSettings, superClass);

  function LfoSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleB = bind(this.handleB, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    LfoSettings.__super__.constructor.call(this, this.component_session_uid);
    this.bypass = new Radio('B');
    this.bypass.buttonClick = this.handleB;
    this.add(this.bypass);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.type = new Waves(this.component_session_uid);
    this.add(this.type);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.frequency = new Frequency(this.component_session_uid);
    this.add(this.frequency);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.depth = new Depth(this.component_session_uid);
    this.add(this.depth);
    this.adjustPosition();
  }

  LfoSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.bypass.setActive(Session.SETTINGS[this.component_session_uid].settings.bypass);
    }
    return null;
  };

  LfoSettings.prototype.handleB = function() {
    Session.SETTINGS[this.component_session_uid].settings.bypass = !this.bypass.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return LfoSettings;

})(SettingsBase);

NsgSettings = (function(superClass) {
  extend(NsgSettings, superClass);

  function NsgSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleM = bind(this.handleM, this);
    this.handleS = bind(this.handleS, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    NsgSettings.__super__.constructor.call(this, this.component_session_uid);
    this.solo = new Radio('S');
    this.solo.buttonClick = this.handleS;
    this.add(this.solo);
    this.add(new Spacer(AppData.ICON_SPACE1));
    this.mute = new Radio('M');
    this.mute.buttonClick = this.handleM;
    this.add(this.mute);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.type = new Noises(this.component_session_uid);
    this.add(this.type);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.volume = new Volume(this.component_session_uid);
    this.add(this.volume);
    this.adjustPosition();
  }

  NsgSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.solo.setActive(Session.SETTINGS[this.component_session_uid].settings.solo);
      this.mute.setActive(Session.SETTINGS[this.component_session_uid].settings.mute);
    }
    return null;
  };

  NsgSettings.prototype.handleS = function() {
    Session.HANDLE_SOLO(this.component_session_uid);
    return null;
  };

  NsgSettings.prototype.handleM = function() {
    if (Session.SETTINGS[this.component_session_uid].settings.solo === true) {
      return;
    }
    Session.SETTINGS[this.component_session_uid].settings.mute = !this.mute.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return NsgSettings;

})(SettingsBase);

OscSettings = (function(superClass) {
  extend(OscSettings, superClass);

  function OscSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleP = bind(this.handleP, this);
    this.handleM = bind(this.handleM, this);
    this.handleS = bind(this.handleS, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    OscSettings.__super__.constructor.call(this, this.component_session_uid);
    this.solo = new Radio('S');
    this.solo.buttonClick = this.handleS;
    this.add(this.solo);
    this.add(new Spacer(AppData.ICON_SPACE1));
    this.mute = new Radio('M');
    this.mute.buttonClick = this.handleM;
    this.add(this.mute);
    this.add(new Spacer(AppData.ICON_SPACE1));
    this.poly = new Poly();
    this.poly.buttonClick = this.handleP;
    this.add(this.poly);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.type = new Waves(this.component_session_uid);
    this.add(this.type);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.octave = new Octave(this.component_session_uid);
    this.add(this.octave);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.portamento = new Portamento(this.component_session_uid);
    this.add(this.portamento);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.detune = new Detune(this.component_session_uid);
    this.add(this.detune);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.volume = new Volume(this.component_session_uid);
    this.add(this.volume);
    this.adjustPosition();
  }

  OscSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.solo.setActive(Session.SETTINGS[this.component_session_uid].settings.solo);
      this.mute.setActive(Session.SETTINGS[this.component_session_uid].settings.mute);
      this.poly.setActive(Session.SETTINGS[this.component_session_uid].settings.poly);
    }
    return null;
  };

  OscSettings.prototype.handleS = function() {
    Session.HANDLE_SOLO(this.component_session_uid);
    return null;
  };

  OscSettings.prototype.handleM = function() {
    if (Session.SETTINGS[this.component_session_uid].settings.solo === true) {
      return;
    }
    Session.SETTINGS[this.component_session_uid].settings.mute = !this.mute.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  OscSettings.prototype.handleP = function() {
    Session.SETTINGS[this.component_session_uid].settings.poly = !this.poly.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return OscSettings;

})(SettingsBase);

PtgSettings = (function(superClass) {
  extend(PtgSettings, superClass);

  function PtgSettings(component_session_uid1) {
    this.component_session_uid = component_session_uid1;
    this.handleB = bind(this.handleB, this);
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.onResize = bind(this.onResize, this);
    PtgSettings.__super__.constructor.call(this, this.component_session_uid);
    this.bypass = new Radio('B');
    this.bypass.buttonClick = this.handleB;
    this.add(this.bypass);
    this.add(new Spacer(AppData.ICON_SPACE2));
    this.bmp = new Bpm(this.component_session_uid);
    this.add(this.bmp);
    this.add(new Spacer(AppData.ICON_SPACE3));
    this.pads = new Pads(this.component_session_uid);
    this.add(this.pads);
    this.adjustPosition();
    this.onResize();
  }

  PtgSettings.prototype.onResize = function() {
    PtgSettings.__super__.onResize.call(this);
    this.pads.resize();
    return null;
  };

  PtgSettings.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.bypass.setActive(Session.SETTINGS[this.component_session_uid].settings.bypass);
    }
    return null;
  };

  PtgSettings.prototype.handleB = function() {
    Session.SETTINGS[this.component_session_uid].settings.bypass = !this.bypass.active;
    App.SETTINGS_CHANGE.dispatch({
      component: this.component_session_uid
    });
    return null;
  };

  return PtgSettings;

})(SettingsBase);

SettingsPannel = (function(superClass) {
  extend(SettingsPannel, superClass);

  function SettingsPannel() {
    this.onToggle = bind(this.onToggle, this);
    SettingsPannel.__super__.constructor.call(this);
    this.pannelShow = false;
    App.TOGGLE_SETTINGS_PANNEL_HEIGHT.add(this.onToggle);
    this.theMask = new PIXI.Graphics();
    this.addChild(this.theMask);
    this.holder = new PIXI.Container();
    this.holder.mask = this.theMask;
    this.addChild(this.holder);
    this.graphics = new PIXI.Graphics();
    this.holder.addChild(this.graphics);
    this.settingsHolder = new PIXI.Container();
    this.holder.addChild(this.settingsHolder);
  }

  SettingsPannel.prototype.resize = function() {
    this.theMask.clear();
    this.theMask.beginFill(0xff00ff);
    this.theMask.moveTo(0, 0);
    this.theMask.lineTo(AppData.WIDTH, 0);
    this.theMask.lineTo(AppData.WIDTH, AppData.SETTINGS_PANNEL_HEIGHT + 1);
    this.theMask.lineTo(0, AppData.SETTINGS_PANNEL_HEIGHT + 1);
    this.theMask.lineTo(0, 0);
    this.theMask.endFill();
    this.graphics.clear();
    this.graphics.beginFill(0x232323, 0.97);
    this.graphics.lineStyle(1, 0x000000, 0.2);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(AppData.WIDTH + 1, 0);
    this.graphics.lineTo(AppData.WIDTH + 1, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(0, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
    if (this.pannelShow) {
      this.theMask.y = 0;
    } else {
      this.theMask.y = AppData.SETTINGS_PANNEL_HEIGHT;
    }
    return null;
  };

  SettingsPannel.prototype.onToggle = function(value) {
    var s;
    if (value.type) {
      this.removeAllFromSettings();
      switch (Session.GET(value.component_session_uid).type_uid) {
        case AppData.COMPONENTS.NSG:
          s = new NsgSettings(value.component_session_uid);
          break;
        case AppData.COMPONENTS.OSC:
          s = new OscSettings(value.component_session_uid);
          break;
        case AppData.COMPONENTS.ENV:
          s = new EnvSettings(value.component_session_uid);
          break;
        case AppData.COMPONENTS.FLT:
          s = new FltSettings(value.component_session_uid);
          break;
        case AppData.COMPONENTS.PTG:
          s = new PtgSettings(value.component_session_uid);
          break;
        case AppData.COMPONENTS.LFO:
          s = new LfoSettings(value.component_session_uid);
          break;
        default:
          return;
      }
      this.settingsHolder.addChild(s);
      App.SETTINGS_CHANGE.dispatch({
        component: value.component_session_uid
      });
      this.open();
    } else {
      this.close();
    }
    return null;
  };

  SettingsPannel.prototype.removeAllFromSettings = function() {
    var child, i, k, ref;
    for (i = k = 0, ref = this.settingsHolder.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      child = this.settingsHolder.children[0];
      this.settingsHolder.removeChild(child);
    }
    return null;
  };

  SettingsPannel.prototype.open = function() {
    this.pannelShow = true;
    this.settingsHolder.visible = true;
    TweenMax.to(this.theMask, 0.1, {
      y: 0
    });
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.WIDTH, AppData.SETTINGS_PANNEL_HEIGHT);
    return null;
  };

  SettingsPannel.prototype.close = function() {
    this.pannelShow = false;
    TweenMax.to(this.theMask, 0.1, {
      y: AppData.SETTINGS_PANNEL_HEIGHT,
      onComplete: (function(_this) {
        return function() {
          _this.settingsHolder.visible = false;
          return null;
        };
      })(this)
    });
    this.hitArea = new PIXI.Rectangle(0, 0, AppData.WIDTH, 0);
    return null;
  };

  return SettingsPannel;

})(PIXI.Sprite);

KeyboardPannel = (function(superClass) {
  extend(KeyboardPannel, superClass);

  function KeyboardPannel() {
    this.onNoteOff = bind(this.onNoteOff, this);
    this.onNoteOn = bind(this.onNoteOn, this);
    KeyboardPannel.__super__.constructor.call(this);
    App.NOTE_ON.add(this.onNoteOn);
    App.NOTE_OFF.add(this.onNoteOff);
    this.firstKeyCode = 48;
    this.keycode = this.firstKeyCode;
    this.graphics = new PIXI.Graphics();
    this.addChild(this.graphics);
    this.keys = new PIXI.Container();
    this.keys.y = AppData.SETTINGS_PANNEL_HEIGHT;
    this.addChild(this.keys);
    this.hitArea = new PIXI.Rectangle(0, 100 * AppData.RATIO, AppData.WIDTH, AppData.KEYBOARD_PANNEL_HEIGHT);
  }

  KeyboardPannel.prototype.resize = function() {
    this.graphics.clear();
    this.graphics.beginFill(0x232323, 0.97);
    this.graphics.moveTo(0, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(AppData.WIDTH, AppData.SETTINGS_PANNEL_HEIGHT);
    this.graphics.lineTo(AppData.WIDTH, AppData.SETTINGS_PANNEL_HEIGHT + AppData.KEYBOARD_PANNEL_HEIGHT);
    this.graphics.lineTo(0, AppData.SETTINGS_PANNEL_HEIGHT + AppData.KEYBOARD_PANNEL_HEIGHT);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
    this.removeKeys();
    this.addKeys();
    return null;
  };

  KeyboardPannel.prototype.removeKeys = function() {
    var child, i, k, ref;
    for (i = k = 0, ref = this.keys.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      child = this.keys.children[0];
      child.disable();
      this.keys.removeChild(child);
    }
    return null;
  };

  KeyboardPannel.prototype.addKeys = function() {
    var availableFluid, availableWidth, b, fluid, i, initialX, k, ref, total, w;
    this.kw = 72 * AppData.RATIO;
    this.kh = 170 * AppData.RATIO;
    this.kr = 72 * AppData.RATIO;
    this.p = 100 * AppData.RATIO;
    availableWidth = AppData.WIDTH - (110 * AppData.RATIO) - AppData.PADDING;
    initialX = 110 * AppData.RATIO;
    total = Math.floor(availableWidth / (this.kw + 8 * AppData.RATIO));
    availableFluid = availableWidth - (this.kw * total);
    this.keycode = this.firstKeyCode;
    fluid = availableFluid / total;
    for (i = k = 0, ref = total; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i % 7 === 0 || ((i + 4) % 7) === 0) {
        if (i !== 0) {
          this.keycode--;
        }
      }
      w = new WhiteKey();
      w.code = this.keycode;
      w.enable();
      w.x = initialX + (this.kw + fluid) * i;
      w.y = AppData.KEYBOARD_PANNEL_HEIGHT - this.kh - AppData.PADDING;
      this.keys.addChild(w);
      this.keycode += 2;
      if (i % 7 === 0 || ((i + 4) % 7) === 0) {
        continue;
      }
      b = new BlackKey();
      b.code = this.keycode - 3;
      b.enable();
      b.x = w.x - this.kr / 2;
      b.y = w.y - this.p;
      this.keys.addChild(b);
    }
    this.octaveUp = new OctaveUp();
    this.octaveUp.x = AppData.PADDING - (this.octaveUp.width - AppData.ICON_SIZE_1) / 2;
    this.octaveUp.y = AppData.KEYBOARD_PANNEL_HEIGHT - this.kh - AppData.PADDING - this.p;
    this.keys.addChild(this.octaveUp);
    this.octaveDown = new OctaveDown();
    this.octaveDown.x = AppData.PADDING - (this.octaveUp.width - AppData.ICON_SIZE_1) / 2;
    this.octaveDown.y = AppData.KEYBOARD_PANNEL_HEIGHT - this.kh - AppData.PADDING;
    this.keys.addChild(this.octaveDown);
    return null;
  };

  KeyboardPannel.prototype.onNoteOn = function(data) {
    var key;
    key = this.findKey(data.note);
    if (key) {
      key.select();
    }
    return null;
  };

  KeyboardPannel.prototype.onNoteOff = function(data) {
    var key;
    key = this.findKey(data.note);
    if (key) {
      key.unselect();
    }
    return null;
  };

  KeyboardPannel.prototype.findKey = function(code) {
    var i, k, key, ref;
    for (i = k = 0, ref = this.keys.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      key = this.keys.children[i];
      if (key.code === code) {
        return key;
      }
    }
    return null;
  };

  return KeyboardPannel;

})(PIXI.Sprite);

Picker = (function(superClass) {
  extend(Picker, superClass);

  function Picker() {
    this.onPickerValue = bind(this.onPickerValue, this);
    this.onPickerHide = bind(this.onPickerHide, this);
    this.onPickerShow = bind(this.onPickerShow, this);
    Picker.__super__.constructor.call(this);
    App.PICKER_SHOW.add(this.onPickerShow);
    App.PICKER_HIDE.add(this.onPickerHide);
    App.PICKER_VALUE.add(this.onPickerValue);
    this.visible = false;
    this.initialAngle = 20;
    this.finalAngle = 160;
    this.innerCircle = 120 * AppData.RATIO;
    this.outterCIrcle = 260 * AppData.RATIO;
    this.borderRadius = 8 * AppData.RATIO;
    this.steps = 0;
    this.snap = false;
    this.value = 0;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.outterCIrcle * 2;
    this.canvas.height = this.outterCIrcle * 2;
    this.canvas.style.width = (this.outterCIrcle / 2) + 'px';
    this.canvas.style.height = (this.outterCIrcle / 2) + 'px';
    this.context = this.canvas.getContext('2d');
    this.context.imageSmoothingEnabled = true;
    this.bg = new PIXI.Sprite(PIXI.Texture.fromCanvas(this.canvas));
    this.bg.scale.x = this.bg.scale.y = 0.5;
    this.bg.anchor.x = 0.5;
    this.bg.anchor.y = 0;
    this.bg.y = -this.bg.height / 2;
    this.addChild(this.bg);
    this.background = this.getSlide(this.initialAngle, this.finalAngle, this.innerCircle, this.outterCIrcle);
    this.slide = [];
    this.border = [];
    this.elements = new PIXI.Container();
    this.addChild(this.elements);
  }

  Picker.prototype.getSlide = function(initial, final, sizeA, sizeB) {
    var i, p;
    p = [];
    i = initial;
    while (i <= final) {
      p.push({
        x: sizeA * Math.cos((180 + i) * Math.PI / 180),
        y: sizeA * Math.sin((180 + i) * Math.PI / 180)
      });
      i++;
    }
    i = final;
    while (i >= initial) {
      p.push({
        x: sizeB * Math.cos((180 + i) * Math.PI / 180),
        y: sizeB * Math.sin((180 + i) * Math.PI / 180)
      });
      i--;
    }
    return p;
  };

  Picker.prototype.getCenter = function(i, f, sizeA, sizeB) {
    var angle, size;
    angle = i + (f - i) / 2;
    size = (sizeB / 2) - ((sizeB / 2) - (sizeA / 2)) / 2;
    return {
      x: size * Math.cos((180 + angle) * Math.PI / 180),
      y: size * Math.sin((180 + angle) * Math.PI / 180)
    };
  };

  Picker.prototype.onPickerShow = function(e) {
    var angleStep, i, k, pos, ref;
    this.steps = e.steps;
    this.snap = e.snap;
    this.x = e.x;
    this.y = e.y;
    this.removeElements();
    if (e.elements) {
      angleStep = (this.finalAngle - this.initialAngle) / this.steps;
      for (i = k = 0, ref = e.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        pos = this.getCenter(Math.floor(this.initialAngle + (angleStep * i)), Math.ceil(this.initialAngle + (angleStep * (i + 1))), this.innerCircle, this.outterCIrcle);
        this.addElement(e.elements[i], pos);
      }
    }
    this.visible = true;
    return null;
  };

  Picker.prototype.onPickerHide = function(e) {
    this.visible = false;
    return null;
  };

  Picker.prototype.onPickerValue = function(e) {
    var i, k, ref;
    this.value = e.percentage;
    this.context.clearRect(0, 0, this.outterCIrcle * 2, this.outterCIrcle * 2);
    this.context.beginPath();
    this.context.fillStyle = 'rgba(0, 0, 0, 0.3)';
    for (i = k = 0, ref = this.background.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.context.moveTo(this.outterCIrcle + this.background[i].x, this.outterCIrcle + this.background[i].y);
      } else if (i === this.background.length - 1) {
        this.context.lineTo(this.outterCIrcle + this.background[0].x, this.outterCIrcle + this.background[0].y);
      } else {
        this.context.lineTo(this.outterCIrcle + this.background[i].x, this.outterCIrcle + this.background[i].y);
      }
    }
    this.context.fill();
    this.draw();
    this.bg.texture.update();
    return null;
  };

  Picker.prototype.addElement = function(element, pos) {
    var s;
    if (element instanceof PIXI.Texture) {
      s = new PIXI.Sprite(element);
    } else if (typeof element === 'string') {
      s = new PIXI.Text(element.toUpperCase(), AppData.TEXTFORMAT.PICKER);
      s.scale.x = s.scale.y = 0.5;
    }
    s.anchor.x = s.anchor.y = 0.5;
    s.position.x = pos.x;
    s.position.y = pos.y;
    this.elements.addChild(s);
    return null;
  };

  Picker.prototype.removeElements = function() {
    var child, i, k, ref;
    for (i = k = 0, ref = this.elements.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      child = this.elements.children[0];
      this.elements.removeChild(child);
    }
    return null;
  };

  Picker.prototype.draw = function() {
    var angleStep, curAngle, i, k, l, ref, ref1, step;
    if (!this.snap) {
      curAngle = MathUtils.map(this.value, 0, 100, this.initialAngle, this.finalAngle, true);
      this.slide = this.getSlide(this.initialAngle, curAngle, this.innerCircle, this.outterCIrcle);
      this.border = this.getSlide(this.initialAngle, curAngle, this.innerCircle, this.innerCircle + this.borderRadius);
    } else {
      step = MathUtils.map(this.value, 0, 100, 0, this.steps - 1, true);
      angleStep = (this.finalAngle - this.initialAngle) / this.steps;
      this.slide = this.getSlide(Math.floor(this.initialAngle + (angleStep * step)), Math.ceil(this.initialAngle + (angleStep * (step + 1))), this.innerCircle, this.outterCIrcle);
      this.border = this.getSlide(Math.floor(this.initialAngle + (angleStep * step)), Math.ceil(this.initialAngle + (angleStep * (step + 1))), this.innerCircle, this.innerCircle + this.borderRadius);
    }
    this.context.beginPath();
    this.context.fillStyle = 'rgba(255, 255, 255, 0.2)';
    for (i = k = 0, ref = this.slide.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.context.moveTo(this.outterCIrcle + this.slide[i].x, this.outterCIrcle + this.slide[i].y);
      } else if (i === this.slide.length - 1) {
        this.context.lineTo(this.outterCIrcle + this.slide[0].x, this.outterCIrcle + this.slide[0].y);
      } else {
        this.context.lineTo(this.outterCIrcle + this.slide[i].x, this.outterCIrcle + this.slide[i].y);
      }
    }
    this.context.fill();
    this.context.beginPath();
    this.context.fillStyle = 'rgba(255, 255, 255, 1)';
    for (i = l = 0, ref1 = this.border.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      if (i === 0) {
        this.context.moveTo(this.outterCIrcle + this.border[i].x, this.outterCIrcle + this.border[i].y);
      } else if (i === this.border.length - 1) {
        this.context.lineTo(this.outterCIrcle + this.border[0].x, this.outterCIrcle + this.border[0].y);
      } else {
        this.context.lineTo(this.outterCIrcle + this.border[i].x, this.outterCIrcle + this.border[i].y);
      }
    }
    this.context.fill();
    return null;
  };

  return Picker;

})(PIXI.Container);

Bottom = (function(superClass) {
  extend(Bottom, superClass);

  function Bottom() {
    this.onToggle = bind(this.onToggle, this);
    this.onResize = bind(this.onResize, this);
    Bottom.__super__.constructor.call(this);
    App.TOGGLE_KEYBOARD.add(this.onToggle);
    this.bottom = new KeyboardPannel();
    this.addChild(this.bottom);
    this.top = new SettingsPannel();
    this.addChild(this.top);
    this.picker = new Picker();
    this.addChild(this.picker);
  }

  Bottom.prototype.onResize = function() {
    this.top.resize();
    this.bottom.resize();
    if (AppData.SHOW_KEYBOARD_PANNEL) {
      this.y = AppData.HEIGHT - (AppData.SETTINGS_PANNEL_HEIGHT + AppData.KEYBOARD_PANNEL_HEIGHT);
    } else {
      this.y = AppData.HEIGHT - AppData.SETTINGS_PANNEL_HEIGHT;
    }
    return null;
  };

  Bottom.prototype.onToggle = function(value) {
    if (value) {
      this.open();
    } else {
      this.close();
    }
    return null;
  };

  Bottom.prototype.open = function() {
    var y;
    AppData.SHOW_KEYBOARD_PANNEL = true;
    y = AppData.HEIGHT - (AppData.SETTINGS_PANNEL_HEIGHT + AppData.KEYBOARD_PANNEL_HEIGHT);
    TweenMax.to(this, 0.2, {
      y: y
    });
    return null;
  };

  Bottom.prototype.close = function() {
    var y;
    AppData.SHOW_KEYBOARD_PANNEL = false;
    y = AppData.HEIGHT - AppData.SETTINGS_PANNEL_HEIGHT;
    TweenMax.to(this, 0.2, {
      y: y
    });
    return null;
  };

  return Bottom;

})(View);

Controls = (function(superClass) {
  extend(Controls, superClass);

  function Controls() {
    this.toggleMenu = bind(this.toggleMenu, this);
    this.toggleKeyboard = bind(this.toggleKeyboard, this);
    this.onToggleMenu = bind(this.onToggleMenu, this);
    this.onResize = bind(this.onResize, this);
    Controls.__super__.constructor.call(this);
    App.TOGGLE_MENU.add(this.onToggleMenu);
    this.logo = new Logo();
    this.addChild(this.logo);
    this.keyboard = new ICButton(AppData.ASSETS.sprite.textures['ic-keyboard-48.png'], 'KEYBOARD');
    this.keyboard.buttonClick = this.toggleKeyboard;
    this.keyboard.select(AppData.SHOW_KEYBOARD_PANNEL);
    this.addChild(this.keyboard);
    this.toggle = new ICButton(AppData.ASSETS.sprite.textures['ic-menu.png'], 'MENU');
    this.toggle.buttonClick = this.toggleMenu;
    this.toggle.select(AppData.SHOW_MENU_PANNEL);
    this.addChild(this.toggle);
  }

  Controls.prototype.onResize = function() {
    this.logo.x = AppData.PADDING;
    this.logo.y = AppData.PADDING;
    this.keyboard.x = AppData.PADDING;
    this.keyboard.y = AppData.HEIGHT - AppData.ICON_SIZE_1 - AppData.PADDING;
    this.toggle.x = AppData.WIDTH - AppData.ICON_SIZE_1 - AppData.PADDING;
    this.toggle.y = AppData.PADDING;
    return null;
  };

  Controls.prototype.onToggleMenu = function() {
    this.toggle.select(AppData.SHOW_MENU_PANNEL);
    return null;
  };

  Controls.prototype.toggleKeyboard = function() {
    AppData.SHOW_KEYBOARD_PANNEL = !AppData.SHOW_KEYBOARD_PANNEL;
    this.keyboard.select(AppData.SHOW_KEYBOARD_PANNEL);
    App.TOGGLE_KEYBOARD.dispatch(AppData.SHOW_KEYBOARD_PANNEL);
    return null;
  };

  Controls.prototype.toggleMenu = function() {
    var w;
    AppData.SHOW_MENU_PANNEL = !AppData.SHOW_MENU_PANNEL;
    w = AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER;
    if (AppData.SHOW_MENU_PANNEL === false) {
      w = 0;
    }
    App.TOGGLE_MENU.dispatch({
      width: w
    });
    return null;
  };

  return Controls;

})(View);

Background = (function(superClass) {
  extend(Background, superClass);

  function Background() {
    Background.__super__.constructor.call(this, AppData.ASSETS.sprite.textures['shadow.png']);
    this.alpha = 0.0;
    this.interactive = true;
    this.defaultCursor = "-webkit-grabbing";
  }

  Background.prototype.update = function(position, zoom) {
    this.tileScale.x = zoom;
    this.tileScale.y = zoom;
    this.tilePosition.x = position.x - this.x;
    this.tilePosition.y = position.y - this.y;
    return null;
  };

  return Background;

})(PIXI.extras.TilingSprite);

ComponentBase = (function(superClass) {
  extend(ComponentBase, superClass);

  function ComponentBase(component_session_uid) {
    this.onToggle = bind(this.onToggle, this);
    ComponentBase.__super__.constructor.call(this);
    App.TOGGLE_SETTINGS_PANNEL_HEIGHT.add(this.onToggle);
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.component_session_uid = component_session_uid;
    this.__color = AppData.COLORS[Session.SETTINGS[this.component_session_uid].type_uid];
    this.__alpha = 1;
    this.highlight = false;
    this.bg = new PIXI.Sprite();
    this.bg.anchor.x = 0.5;
    this.bg.anchor.y = 0.5;
    this.bg.scale.x = 0;
    this.bg.scale.y = 0;
    this.addChild(this.bg);
    this.over = new PIXI.Sprite();
    this.over.anchor.x = 0.5;
    this.over.anchor.y = 0.5;
    this.over.alpha = 0;
    this.addChild(this.over);
    this.front = new PIXI.Container();
    this.front.alpha = 0;
    this.addChild(this.front);
    this.label = new PIXI.Text(AppData.TITLE[Session.SETTINGS[this.component_session_uid].type_uid], AppData.TEXTFORMAT.SETTINGS_TITLE);
    this.label.scale.x = this.label.scale.y = 0.5;
    this.front.addChild(this.label);
    this.icon = new PIXI.Sprite();
    this.icon.anchor.x = 0.5;
    this.icon.anchor.y = 0.5;
    this.front.addChild(this.icon);
    this.interactive = false;
    this.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
  }

  ComponentBase.prototype.onToggle = function(value) {
    this.highlight = false;
    if (value.component_session_uid === this.component_session_uid) {
      this.highlight = value.type;
    }
    this.over.alpha = this.highlight === true ? 1 : 0;
    return null;
  };

  ComponentBase.prototype.onAdd = function(onComplete) {
    this.bg.rotation = 360 * Math.PI / 360;
    TweenMax.to(this.bg, 0.5, {
      rotation: 0,
      ease: Power2.easeInOut
    });
    TweenMax.to(this.bg.scale, 0.5, {
      x: 1,
      y: 1,
      ease: Power4.easeInOut,
      onComplete: (function(_this) {
        return function() {
          TweenMax.to(_this.front, 0.6, {
            alpha: 1,
            onComplete: onComplete
          });
          return null;
        };
      })(this)
    });
    return null;
  };

  ComponentBase.prototype.onRemove = function(onComplete) {
    App.TOGGLE_SETTINGS_PANNEL_HEIGHT.remove(this.onToggle);
    App.SETTINGS_CHANGE.remove(this.onSettingsChange);
    TweenMax.to(this.front, 0.3, {
      alpha: 0,
      onComplete: (function(_this) {
        return function() {
          TweenMax.to(_this.bg, 0.3, {
            rotation: 360 * Math.PI / 360,
            ease: Power2.easeInOut
          });
          TweenMax.to(_this.bg.scale, 0.3, {
            x: 0,
            y: 0,
            ease: Power4.easeInOut,
            onComplete: onComplete
          });
          return null;
        };
      })(this)
    });
    return null;
  };

  return ComponentBase;

})(PIXI.Container);

ComponentEnv = (function(superClass) {
  extend(ComponentEnv, superClass);

  function ComponentEnv(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var c, pos;
    ComponentEnv.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-5-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-5-ol.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-5-fill.png'].sourceSize;
    this.label.anchor.x = 0.5;
    this.label.y = pos.h / -2 + 24 * AppData.RATIO;
    c = document.createElement('canvas');
    c.width = AppData.ICON_SIZE_2 * 2;
    c.height = AppData.ICON_SIZE_2 * 2;
    this.context = c.getContext('2d');
    this.vertices = [
      {
        x: -0.0 * AppData.RATIO,
        y: -1.9 * AppData.RATIO
      }, {
        x: 2.04 * AppData.RATIO,
        y: -0.35 * AppData.RATIO
      }, {
        x: 1.25 * AppData.RATIO,
        y: 1.95 * AppData.RATIO
      }, {
        x: -1.25 * AppData.RATIO,
        y: 1.95 * AppData.RATIO
      }, {
        x: -2.04 * AppData.RATIO,
        y: -0.35 * AppData.RATIO
      }
    ];
  }

  ComponentEnv.prototype.onSettingsChange = function(event) {
    var availableSustain, fillColor, ix, iy, step, x0, x1, x2, x3, x4, y0, y1, y2, y3, y4;
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.bypass === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
        fillColor = 0x636363;
      } else if (Session.SETTINGS[this.component_session_uid].settings.bypass === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.ENV];
        this.__alpha = 1;
        fillColor = 0xffffff;
      }
    }
    this.icon.alpha = this.__alpha;
    this.label.alpha = this.__alpha;
    availableSustain = AppData.ICON_SIZE_2;
    step = AppData.ICON_SIZE_2 / 4;
    x0 = 0;
    y0 = AppData.ICON_SIZE_2;
    x1 = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.attack, 0, 1000, 0, step);
    y1 = 0;
    availableSustain -= x1;
    x2 = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.decay, 0, 1000, x1, x1 + step);
    y2 = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.sustain, 0, 100, AppData.ICON_SIZE_2, 0);
    availableSustain -= x2 - x1 + MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.release, 0, 1000, 0, step);
    x3 = x2 + availableSustain;
    y3 = y2;
    x4 = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.release, 0, 1000, x3, x3 + step);
    y4 = AppData.ICON_SIZE_2;
    ix = AppData.ICON_SIZE_2 / 2;
    iy = AppData.ICON_SIZE_2 / 2;
    this.context.clearRect(0, 0, AppData.ICON_SIZE_2 * 2, AppData.ICON_SIZE_2 * 2);
    this.context.strokeStyle = '#ffffff';
    this.context.lineWidth = 1.5 * AppData.RATIO;
    this.context.beginPath();
    this.context.moveTo(ix + x0, iy + y0);
    this.context.lineTo(ix + x1, iy + y1);
    this.context.lineTo(ix + x2, iy + y2);
    this.context.lineTo(ix + x3, iy + y3);
    this.context.lineTo(ix + x4, iy + y4);
    this.context.stroke();
    this.icon.texture = PIXI.Texture.fromCanvas(this.context.canvas);
    this.icon.texture.update();
    this.bg.tint = this.__color;
    return null;
  };

  return ComponentEnv;

})(ComponentBase);

ComponentFlt = (function(superClass) {
  extend(ComponentFlt, superClass);

  function ComponentFlt(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var pos;
    ComponentFlt.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-6-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-6-ol.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-6-fill.png'].sourceSize;
    this.label.anchor.x = 0.5;
    this.label.y = pos.h / -2 + 24 * AppData.RATIO;
    this.vertices = [
      {
        x: -1.05 * AppData.RATIO,
        y: -1.83 * AppData.RATIO
      }, {
        x: 1.05 * AppData.RATIO,
        y: -1.83 * AppData.RATIO
      }, {
        x: 2.12 * AppData.RATIO,
        y: 0.02 * AppData.RATIO
      }, {
        x: 1.05 * AppData.RATIO,
        y: 1.83 * AppData.RATIO
      }, {
        x: -1.05 * AppData.RATIO,
        y: 1.83 * AppData.RATIO
      }, {
        x: -2.12 * AppData.RATIO,
        y: 0.02 * AppData.RATIO
      }
    ];
  }

  ComponentFlt.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.bypass === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
      } else if (Session.SETTINGS[this.component_session_uid].settings.bypass === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.FLT];
        this.__alpha = 1;
      }
    }
    this.label.alpha = this.__alpha;
    this.bg.tint = this.__color;
    return null;
  };

  return ComponentFlt;

})(ComponentBase);

ComponentLfo = (function(superClass) {
  extend(ComponentLfo, superClass);

  function ComponentLfo(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var pos;
    ComponentLfo.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-10-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-10-ol.png'];
    this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sine-48.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-10-fill.png'].sourceSize;
    this.label.anchor.x = 0.5;
    this.label.y = pos.h / -2 + 24 * AppData.RATIO;
    this.vertices = [
      {
        x: -0.65 * AppData.RATIO,
        y: -1.9 * AppData.RATIO
      }, {
        x: 0.65 * AppData.RATIO,
        y: -1.9 * AppData.RATIO
      }, {
        x: 1.63 * AppData.RATIO,
        y: -1.2 * AppData.RATIO
      }, {
        x: 1.99 * AppData.RATIO,
        y: 0 * AppData.RATIO
      }, {
        x: 1.63 * AppData.RATIO,
        y: 1.2 * AppData.RATIO
      }, {
        x: 0.65 * AppData.RATIO,
        y: 1.91 * AppData.RATIO
      }, {
        x: -0.65 * AppData.RATIO,
        y: 1.91 * AppData.RATIO
      }, {
        x: -1.63 * AppData.RATIO,
        y: 1.2 * AppData.RATIO
      }, {
        x: -1.99 * AppData.RATIO,
        y: 0 * AppData.RATIO
      }, {
        x: -1.63 * AppData.RATIO,
        y: -1.2 * AppData.RATIO
      }
    ];
  }

  ComponentLfo.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.bypass === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
      } else if (Session.SETTINGS[this.component_session_uid].settings.bypass === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.LFO];
        this.__alpha = 1;
      }
    }
    this.label.alpha = this.__alpha;
    this.bg.tint = this.__color;
    switch (Session.SETTINGS[this.component_session_uid].settings.wave_type) {
      case AppData.WAVE_TYPE.SINE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sine-48.png'];
        break;
      case AppData.WAVE_TYPE.TRIANGLE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-tri-48.png'];
        break;
      case AppData.WAVE_TYPE.SQUARE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sq-48.png'];
        break;
      case AppData.WAVE_TYPE.SAWTOOTH:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-saw-48.png'];
    }
    return null;
  };

  return ComponentLfo;

})(ComponentBase);

ComponentNsg = (function(superClass) {
  extend(ComponentNsg, superClass);

  function ComponentNsg(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var pos;
    ComponentNsg.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-3-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-3-ol.png'];
    this.icon.texture = AppData.ASSETS.sprite.textures['ic-noise-white-48.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-3-fill.png'].sourceSize;
    this.label.anchor.x = 0.5;
    this.label.y = pos.h / -2 + 60 * AppData.RATIO;
    this.icon.y = 30 * AppData.RATIO;
    this.vertices = [
      {
        x: 0 * AppData.RATIO,
        y: -1.85 * AppData.RATIO
      }, {
        x: 2.15 * AppData.RATIO,
        y: 1.85 * AppData.RATIO
      }, {
        x: -2.15 * AppData.RATIO,
        y: 1.85 * AppData.RATIO
      }
    ];
  }

  ComponentNsg.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.mute === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
      } else if (Session.SETTINGS[this.component_session_uid].settings.mute === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.NSG];
        this.__alpha = 1;
      }
    }
    this.label.alpha = this.__alpha;
    this.icon.alpha = this.__alpha;
    this.bg.tint = this.__color;
    this.over.tint = 0xffffff;
    switch (Session.SETTINGS[this.component_session_uid].settings.noise_type) {
      case AppData.NOISE_TYPE.WHITE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-noise-white-48.png'];
        break;
      case AppData.NOISE_TYPE.PINK:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-noise-pink-48.png'];
        break;
      case AppData.NOISE_TYPE.BROWN:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-noise-brown-48.png'];
    }
    return null;
  };

  return ComponentNsg;

})(ComponentBase);

ComponentOsc = (function(superClass) {
  extend(ComponentOsc, superClass);

  function ComponentOsc(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var pos;
    ComponentOsc.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-4-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-4-ol.png'];
    this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sine-48.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-4-fill.png'].sourceSize;
    this.label.x = pos.w / -2 + 24 * AppData.RATIO;
    this.label.y = pos.h / -2 + 24 * AppData.RATIO;
    this.vertices = [
      {
        x: -1.8 * AppData.RATIO,
        y: -1.8 * AppData.RATIO
      }, {
        x: 1.8 * AppData.RATIO,
        y: -1.8 * AppData.RATIO
      }, {
        x: 1.8 * AppData.RATIO,
        y: 1.8 * AppData.RATIO
      }, {
        x: -1.8 * AppData.RATIO,
        y: 1.8 * AppData.RATIO
      }
    ];
  }

  ComponentOsc.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.mute === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
      } else if (Session.SETTINGS[this.component_session_uid].settings.mute === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.OSC];
        this.__alpha = 1;
      }
    }
    this.label.alpha = this.__alpha;
    this.icon.alpha = this.__alpha;
    this.bg.tint = this.__color;
    this.over.tint = 0xffffff;
    switch (Session.SETTINGS[this.component_session_uid].settings.wave_type) {
      case AppData.WAVE_TYPE.SINE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sine-48.png'];
        break;
      case AppData.WAVE_TYPE.TRIANGLE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-tri-48.png'];
        break;
      case AppData.WAVE_TYPE.SQUARE:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-sq-48.png'];
        break;
      case AppData.WAVE_TYPE.SAWTOOTH:
        this.icon.texture = AppData.ASSETS.sprite.textures['ic-wave-saw-48.png'];
    }
    return null;
  };

  return ComponentOsc;

})(ComponentBase);

ComponentPtg = (function(superClass) {
  extend(ComponentPtg, superClass);

  function ComponentPtg(component_session_uid) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    var pos;
    ComponentPtg.__super__.constructor.call(this, component_session_uid);
    this.bg.texture = AppData.ASSETS.sprite.textures['comp-7-fill.png'];
    this.over.texture = AppData.ASSETS.sprite.textures['comp-7-ol.png'];
    pos = AppData.ASSETS.sprite.data.frames['comp-7-fill.png'].sourceSize;
    this.label.anchor.x = 0.5;
    this.label.y = pos.h / -2 + 24 * AppData.RATIO;
    this.graphics = new PIXI.Graphics();
    this.graphics.x = AppData.ICON_SIZE_1 / -2 + 4 * AppData.RATIO;
    this.graphics.y = AppData.ICON_SIZE_1 / -2 + 4 * AppData.RATIO;
    this.graphics.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.front.addChild(this.graphics);
    this.vertices = [
      {
        x: 0 * AppData.RATIO,
        y: -2.0 * AppData.RATIO
      }, {
        x: 1.63 * AppData.RATIO,
        y: -1.2 * AppData.RATIO
      }, {
        x: 2.04 * AppData.RATIO,
        y: 0.6 * AppData.RATIO
      }, {
        x: 0.9 * AppData.RATIO,
        y: 2.02 * AppData.RATIO
      }, {
        x: -0.9 * AppData.RATIO,
        y: 2.02 * AppData.RATIO
      }, {
        x: -2.04 * AppData.RATIO,
        y: 0.6 * AppData.RATIO
      }, {
        x: -1.63 * AppData.RATIO,
        y: -1.2 * AppData.RATIO
      }
    ];
  }

  ComponentPtg.prototype.onSettingsChange = function(event) {
    var i, index, j, k, l;
    if (event.component === this.component_session_uid) {
      if (Session.SETTINGS[this.component_session_uid].settings.bypass === true) {
        this.__color = 0x3C3C3C;
        this.__alpha = 0.2;
      } else if (Session.SETTINGS[this.component_session_uid].settings.bypass === false) {
        this.__color = AppData.COLORS[AppData.COMPONENTS.PTG];
        this.__alpha = 1;
      }
    }
    this.label.alpha = this.__alpha;
    this.graphics.alpha = this.__alpha;
    this.bg.tint = this.__color;
    this.graphics.clear();
    index = 0;
    for (i = k = 0; k < 4; i = ++k) {
      for (j = l = 0; l < 4; j = ++l) {
        this.graphics.beginFill(0xffffff, Session.SETTINGS[this.component_session_uid].settings.pattern[index] === true ? 1 : 0.5);
        this.graphics.drawCircle((12 * j) * AppData.RATIO, (12 * i) * AppData.RATIO, 2 * AppData.RATIO);
        this.graphics.endFill();
        index++;
      }
    }
    return null;
  };

  return ComponentPtg;

})(ComponentBase);

DraggableElement = (function() {
  function DraggableElement(element1) {
    this.element = element1;
    this.onMouseWheel = bind(this.onMouseWheel, this);
    this.onTouchEnd = bind(this.onTouchEnd, this);
    this.onTouchMove = bind(this.onTouchMove, this);
    this.onTouchStart = bind(this.onTouchStart, this);
    this.onMouseUp = bind(this.onMouseUp, this);
    this.onMouseMove = bind(this.onMouseMove, this);
    this.onMouseDown = bind(this.onMouseDown, this);
    this.VELOCITY_DAMPING = 0.9;
    this.TWEEN_EASE = 0.07;
    this.PRECISION = 0.1;
    this.position = new Vec2();
    this.velocity = new Vec2();
    this.draggingOld = new Vec2();
    this.draggingCur = new Vec2();
    this.tweenTarget = new Vec2();
    this.lock = false;
    this.dragging = false;
    this.moving = false;
    this.onTween = false;
    this.speed = 0;
    this.currentTouches = 0;
    if (Modernizr.touch) {
      this.element.on('touchstart', this.onTouchStart).on('touchmove', this.onTouchMove).on('touchend', this.onTouchEnd).on('touchendoutside', this.onTouchEnd);
    } else {
      this.element.on('mousedown', this.onMouseDown).on('mousemove', this.onMouseMove).on('mouseup', this.onMouseUp).on('mouseupoutside', this.onMouseUp);
    }
  }

  DraggableElement.prototype.onMouseDown = function(e) {
    e.data.originalEvent.preventDefault();
    this.startDrag(e.data.originalEvent.clientX, e.data.originalEvent.clientY);
    return null;
  };

  DraggableElement.prototype.onMouseMove = function(e) {
    e.data.originalEvent.preventDefault();
    this.moving = true;
    this.updateDrag(e.data.originalEvent.clientX, e.data.originalEvent.clientY);
    return null;
  };

  DraggableElement.prototype.onMouseUp = function() {
    this.endDrag();
    return null;
  };

  DraggableElement.prototype.onTouchStart = function(e) {
    this.currentTouches++;
    if (this.currentTouches > 1) {
      return;
    }
    this.identifier = e.data.identifier;
    e.data.originalEvent.preventDefault();
    this.startDrag(e.data.global.x, e.data.global.y);
    return null;
  };

  DraggableElement.prototype.onTouchMove = function(e) {
    if (this.identifier !== e.data.identifier) {
      return;
    }
    e.data.originalEvent.preventDefault();
    this.updateDrag(e.data.global.x, e.data.global.y);
    return null;
  };

  DraggableElement.prototype.onTouchEnd = function(e) {
    this.currentTouches--;
    if (this.identifier !== e.data.identifier) {
      return;
    }
    this.endDrag();
    this.identifier = null;
    return null;
  };

  DraggableElement.prototype.onMouseWheel = function(event) {
    if (this.lock === true) {
      return;
    }
    if (AppData.SHOW_MENU_PANNEL === true) {
      return;
    }
    this.tweenPositionTo = null;
    this.velocity.set(event.wheelDeltaX * 0.2, event.wheelDeltaY * 0.2);
    return null;
  };

  DraggableElement.prototype.startDrag = function(posX, posY) {
    if (this.dragging) {
      return;
    }
    if (this.lock) {
      return;
    }
    this.dragging = true;
    this.draggingCur.set(posX, posY);
    this.draggingOld.copy(this.draggingCur);
    return null;
  };

  DraggableElement.prototype.updateDrag = function(posX, posY) {
    var x, y;
    if (!this.dragging) {
      return;
    }
    if (this.lock) {
      return;
    }
    this.draggingCur.set(posX, posY);
    x = this.draggingCur.x - this.draggingOld.x;
    y = this.draggingCur.y - this.draggingOld.y;
    this.velocity.set(x, y);
    this.draggingOld.copy(this.draggingCur);
    return null;
  };

  DraggableElement.prototype.endDrag = function() {
    if (!this.dragging) {
      return;
    }
    this.dragging = false;
    return null;
  };

  DraggableElement.prototype.update = function() {
    if (this.onTween) {
      this.position.interpolateTo(this.tweenTarget, this.TWEEN_EASE);
      if (Math.abs(Vec2.subtract(this.position, this.tweenTarget).length()) < this.PRECISION) {
        this.onTween = false;
      }
    }
    if (this.lock) {
      return;
    }
    if (this.moving === true) {
      this.moving = false;
    }
    if (!this.moving) {
      this.velocity.scale(this.VELOCITY_DAMPING);
    }
    this.speed = this.velocity.length();
    if (Math.abs(this.speed) < this.PRECISION) {
      this.velocity.x = 0;
      this.velocity.y = 0;
    }
    this.position.x += this.velocity.x * AppData.RATIO;
    this.position.y += this.velocity.y * AppData.RATIO;
    return null;
  };

  DraggableElement.prototype.resize = function(viewportWidth, viewportHeight, globalWidth, globalHeight) {
    this.vpw = viewportWidth;
    this.vph = viewportHeight;
    this.gw = globalWidth;
    this.gh = globalHeight;
    return null;
  };

  DraggableElement.prototype.constrainToBounds = function() {
    if (this.position.x < -(this.gw - this.vpw)) {
      this.position.x = -(this.gw - this.vpw);
    }
    if (this.position.x > 0) {
      this.position.x = 0;
    }
    if (this.position.y < -(this.gh - this.vph)) {
      this.position.y = -(this.gh - this.vph);
    }
    if (this.position.y > 0) {
      this.position.y = 0;
    }
    return null;
  };

  DraggableElement.prototype.setPosition = function(x, y) {
    var temp;
    temp = new Vec2(x, y);
    temp.invert();
    this.onTween = true;
    this.tweenTarget.copy(temp);
    return null;
  };

  return DraggableElement;

})();

PhysicsEngine = (function() {
  function PhysicsEngine(width1, height1, debug) {
    this.width = width1;
    this.height = height1;
    this.debug = debug;
    this.getBodyCB = bind(this.getBodyCB, this);
    this.allowSleep = true;
    this.worldScale = 60;
    this.worldStep = 1 / 20;
    this.velocityIterations = 5;
    this.positionIterations = 4;
    this.gravity = new Box2D.Common.Math.b2Vec2(0, 0);
    this.boundsSize = {
      x: 0,
      y: 0,
      width: this.width,
      height: this.height
    };
    this.boundSize = 10;
    this.boundPadding = 0;
    this.debugCanvas = document.createElement('canvas');
    this.bounds = [];
    this.selectedBody = null;
    this.mousePVec = null;
    this.mouseJoint = null;
  }

  PhysicsEngine.prototype.init = function() {
    this.world = new Box2D.Dynamics.b2World(this.gravity, this.allowSleep);
    if (this.debug) {
      this.world.SetDebugDraw(this.debugDraw());
    }
    this.addBounds();
    return null;
  };

  PhysicsEngine.prototype.update = function() {
    this.world.Step(this.worldStep, this.velocityIterations, this.positionIterations);
    this.world.DrawDebugData();
    this.world.ClearForces();
    return null;
  };

  PhysicsEngine.prototype.down = function(mouseX, mouseY) {
    var body, md;
    body = this.getBodyAtPosition(mouseX / this.worldScale, mouseY / this.worldScale);
    if (body) {
      md = new Box2D.Dynamics.Joints.b2MouseJointDef();
      md.bodyA = this.world.GetGroundBody();
      md.bodyB = body;
      md.target.Set(mouseX / this.worldScale, mouseY / this.worldScale);
      md.collideConnected = true;
      md.maxForce = 1000.0 * body.GetMass();
      this.mouseJoint = this.world.CreateJoint(md);
      body.SetAwake(true);
    }
    return body;
  };

  PhysicsEngine.prototype.move = function(mouseX, mouseY) {
    if (this.mouseJoint) {
      this.mouseJoint.SetTarget(new Box2D.Common.Math.b2Vec2(mouseX / this.worldScale, mouseY / this.worldScale));
    }
    return null;
  };

  PhysicsEngine.prototype.up = function(mouseX, mouseY) {
    if (this.mouseJoint) {
      this.world.DestroyJoint(this.mouseJoint);
      this.mouseJoint = null;
      this.selectedBody = null;
    }
    return null;
  };

  PhysicsEngine.prototype.getBodyAtPosition = function(x, y) {
    var aabb;
    this.mousePVec = new Box2D.Common.Math.b2Vec2(x, y);
    aabb = new Box2D.Collision.b2AABB();
    aabb.lowerBound.Set(x - 0.001, y - 0.001);
    aabb.upperBound.Set(x + 0.001, y + 0.001);
    this.world.QueryAABB(this.getBodyCB, aabb);
    return this.selectedBody;
  };

  PhysicsEngine.prototype.getBodyCB = function(fixture) {
    if (fixture.GetBody().GetType() !== Box2D.Dynamics.b2Body.b2_staticBody) {
      if (fixture.GetShape().TestPoint(fixture.GetBody().GetTransform(), this.mousePVec)) {
        this.selectedBody = fixture.GetBody();
        return false;
      }
    }
    return true;
  };

  PhysicsEngine.prototype.createBox = function(x, y, width, height, type) {
    var body, bodyDef, fixtureDef, polygonShape;
    polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
    polygonShape.SetAsBox(width / 2 / this.worldScale, height / 2 / this.worldScale);
    fixtureDef = new Box2D.Dynamics.b2FixtureDef();
    fixtureDef.density = 1.0;
    fixtureDef.friction = 0.5;
    fixtureDef.restitution = 0.5;
    fixtureDef.shape = polygonShape;
    bodyDef = new Box2D.Dynamics.b2BodyDef();
    bodyDef.type = type;
    bodyDef.position.Set(x / this.worldScale, y / this.worldScale);
    body = this.world.CreateBody(bodyDef);
    body.CreateFixture(fixtureDef);
    return body;
  };

  PhysicsEngine.prototype.createCircle = function(radius, x, y, type) {
    var body, bodyDef, fixtureDef, polygonShape;
    polygonShape = new Box2D.Collision.Shapes.b2CircleShape(radius / this.worldScale);
    fixtureDef = new Box2D.Dynamics.b2FixtureDef();
    fixtureDef.density = 1.0;
    fixtureDef.friction = 0.5;
    fixtureDef.restitution = 0.1;
    fixtureDef.shape = polygonShape;
    bodyDef = new Box2D.Dynamics.b2BodyDef();
    bodyDef.type = type;
    bodyDef.position.Set(x / this.worldScale, y / this.worldScale);
    body = this.world.CreateBody(bodyDef);
    body.CreateFixture(fixtureDef);
    return body;
  };

  PhysicsEngine.prototype.createCustom = function(vertices, x, y, type) {
    var body, bodyDef, fixtureDef, polygonShape;
    polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
    fixtureDef = new Box2D.Dynamics.b2FixtureDef();
    fixtureDef.density = 1.0;
    fixtureDef.friction = 0.5;
    fixtureDef.restitution = 0.1;
    fixtureDef.shape = polygonShape;
    fixtureDef.shape.SetAsArray(vertices);
    bodyDef = new Box2D.Dynamics.b2BodyDef();
    bodyDef.type = type;
    bodyDef.linearDamping = 1.5;
    bodyDef.angularDamping = 1.5;
    bodyDef.fixedRotation = true;
    bodyDef.position.Set(x / this.worldScale, y / this.worldScale);
    body = this.world.CreateBody(bodyDef);
    body.CreateFixture(fixtureDef);
    return body;
  };

  PhysicsEngine.prototype.addBounds = function() {
    this.bounds.push(this.createBox(this.boundsSize.x + this.boundsSize.width / 2, this.boundsSize.y + this.boundPadding + this.boundSize / 2 + 0, this.boundsSize.width + this.boundSize * 2, this.boundSize, Box2D.Dynamics.b2Body.b2_staticBody));
    this.bounds.push(this.createBox(this.boundsSize.x - this.boundPadding - this.boundSize / 2 + this.boundsSize.width, this.boundsSize.y + this.boundsSize.height / 2, this.boundSize, this.boundsSize.height + this.boundSize * 2, Box2D.Dynamics.b2Body.b2_staticBody));
    this.bounds.push(this.createBox(this.boundsSize.x + this.boundsSize.width / 2, this.boundsSize.y - this.boundPadding - this.boundSize / 2 + this.boundsSize.height, this.boundsSize.width + this.boundSize * 2, this.boundSize, Box2D.Dynamics.b2Body.b2_staticBody));
    this.bounds.push(this.createBox(this.boundsSize.x + this.boundPadding + this.boundSize / 2 + 0, this.boundsSize.y + this.boundsSize.height / 2, this.boundSize, this.boundsSize.height + this.boundSize * 2, Box2D.Dynamics.b2Body.b2_staticBody));
    return null;
  };

  PhysicsEngine.prototype.removeBounds = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.bounds.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.world.DestroyBody(this.bounds[i]);
    }
    this.bounds = [];
    return null;
  };

  PhysicsEngine.prototype.destroy = function(body) {
    this.world.DestroyBody(body);
    return null;
  };

  PhysicsEngine.prototype.debugDraw = function() {
    var debugDraw;
    this.debugCanvas.style.position = 'absolute';
    this.debugCanvas.style.top = 0;
    this.debugCanvas.style.left = 0;
    this.debugCanvas.style.pointerEvents = 'none';
    this.debugCanvas.width = this.width;
    this.debugCanvas.height = this.height;
    document.body.appendChild(this.debugCanvas);
    debugDraw = new Box2D.Dynamics.b2DebugDraw();
    debugDraw.SetSprite(this.debugCanvas.getContext('2d'));
    debugDraw.SetDrawScale(this.worldScale);
    debugDraw.SetFillAlpha(0.5);
    debugDraw.SetLineThickness(1.0);
    debugDraw.SetFlags(Box2D.Dynamics.b2DebugDraw.e_shapeBit | Box2D.Dynamics.b2DebugDraw.e_jointBit);
    return debugDraw;
  };

  return PhysicsEngine;

})();

Prompt = (function() {
  function Prompt() {
    this.handleValidation = bind(this.handleValidation, this);
    this.handleConfirm = bind(this.handleConfirm, this);
    this.handleCancel = bind(this.handleCancel, this);
    this.defaultREGEXP = /^.{4,}/;
    this.defaultValidationMessage = 'Must have 4 or more characters';
    this.validateInput = false;
    this.validationMessage = this.defaultValidationMessage;
    this.validationREGEXP = this.defaultREGEXP;
    this.confirmFN = null;
    this.holder = document.createElement('div');
    this.holder.className = 'prompt--holder';
    document.body.appendChild(this.holder);
    this.holderWindow = document.createElement('div');
    this.holderWindow.className = 'prompt--holder-window';
    this.holder.appendChild(this.holderWindow);
    this.holderMessage = document.createElement('div');
    this.holderMessage.innerHTML = 'QUESTION?';
    this.holderMessage.className = 'prompt--holder-message';
    this.holderWindow.appendChild(this.holderMessage);
    this.holderInput = document.createElement('input');
    this.holderInput.type = 'text';
    this.holderInput.className = 'prompt--holder-input';
    this.holderInput.style.display = 'none';
    this.holderWindow.appendChild(this.holderInput);
    this.holderInputValidation = document.createElement('p');
    this.holderInputValidation.className = 'prompt--holder-input-validation';
    this.holderInputValidation.style.display = 'none';
    this.holderWindow.appendChild(this.holderInputValidation);
    this.holderButtons = document.createElement('div');
    this.holderButtons.className = 'prompt--holder-buttons';
    this.holderWindow.appendChild(this.holderButtons);
    this.cancel = document.createElement('button');
    this.cancel.innerHTML = 'cancel';
    this.holderButtons.appendChild(this.cancel);
    this.confirm = document.createElement('button');
    this.confirm.innerHTML = 'confirm';
    this.holderButtons.appendChild(this.confirm);
    this.cancel.addEventListener('click', this.handleCancel, false);
    this.confirm.addEventListener('click', this.handleConfirm, false);
  }

  Prompt.prototype.handleCancel = function() {
    this.hide();
    return null;
  };

  Prompt.prototype.handleConfirm = function() {
    if (this.handleValidation()) {
      if (this.confirmFN) {
        this.confirmFN(this.holderInput.value);
      }
      this.hide();
    }
    return null;
  };

  Prompt.prototype.handleValidation = function(regexp) {
    if (this.validateInput === false) {
      return true;
    }
    if (this.defaultREGEXP.test(this.holderInput.value) === false) {
      this.holderInputValidation.style.display = 'block';
      this.holderInputValidation.innerHTML = this.validationMessage;
      return false;
    } else {
      return true;
    }
    return null;
  };

  Prompt.prototype.show = function(data) {
    if (data.onConfirm) {
      this.confirmFN = data.onConfirm;
    }
    if (data.question) {
      this.holderMessage.innerHTML = data.question;
    }
    if (data.input) {
      this.holderInput.style.display = 'block';
      this.validateInput = true;
      if (data.regexp) {
        this.validationREGEXP = data.regexp;
      }
    }
    AppData.KEYPRESS_ALLOWED = false;
    TweenLite.to(this.holder, 0.5, {
      autoAlpha: 1
    });
    return null;
  };

  Prompt.prototype.hide = function() {
    TweenLite.to(this.holder, 0.5, {
      autoAlpha: 0,
      onComplete: (function(_this) {
        return function() {
          AppData.KEYPRESS_ALLOWED = true;
          _this.holderInput.value = '';
          _this.holderInput.style.display = 'none';
          _this.holderInputValidation.style.display = 'none';
          _this.validateInput = false;
          _this.validationMessage = _this.defaultValidationMessage;
          _this.validationREGEXP = _this.defaultREGEXP;
          _this.confirmFN = null;
          return null;
        };
      })(this)
    });
    return null;
  };

  return Prompt;

})();

Tour = (function() {
  function Tour() {
    this.action5 = bind(this.action5, this);
    this.action4 = bind(this.action4, this);
    this.action3 = bind(this.action3, this);
    this.action2 = bind(this.action2, this);
    this.action1 = bind(this.action1, this);
    this.handleStep = bind(this.handleStep, this);
    this.handleClick = bind(this.handleClick, this);
    var a, i, k, ref;
    this.canClick = false;
    this.stepIndex = 0;
    this.cur = 0;
    this.old = void 0;
    this.steps = [];
    this.steps.push({
      align: 'tr',
      x: 10,
      y: 10,
      instructions: 'Click on the menu icon to access your tools and settings',
      action: this.action1
    });
    this.steps.push({
      align: 'tr',
      x: 10,
      y: 110,
      instructions: 'Click to add a new component',
      action: this.action2
    });
    this.steps.push({
      align: 'tr',
      x: 139,
      y: 136,
      instructions: 'Let\'s start with an Oscillator to generate sound',
      action: this.action3
    });
    this.steps.push({
      align: 'tl',
      x: 160,
      y: 160,
      instructions: 'Now select the component to change its settings',
      action: this.action4
    });
    this.steps.push({
      align: 'bl',
      x: '50%',
      y: '25%',
      instructions: 'Last, you can use your keyboard or mouse to make sound. Enjoy!',
      action: this.action5
    });
    this.outer = document.createElement('div');
    this.outer.className = 'tour--outer-holder';
    document.body.appendChild(this.outer);
    this.dark = document.createElement('div');
    this.dark.className = 'tour--dark-holder';
    this.outer.appendChild(this.dark);
    this.instructionsHolder = document.createElement('div');
    this.instructionsHolder.className = 'tour--instructions-holder';
    this.outer.appendChild(this.instructionsHolder);
    this.instructions = document.createElement('div');
    this.instructions.className = 'tour--instructions-inner';
    this.instructionsHolder.appendChild(this.instructions);
    this.inner = document.createElement('div');
    this.inner.className = 'tour--inner-holder';
    this.outer.appendChild(this.inner);
    this.circle = document.createElement('div');
    this.circle.className = 'tour--circle';
    this.inner.appendChild(this.circle);
    this.started = document.createElement('div');
    this.started.innerHTML = 'Get Started';
    this.started.className = 'tour--get-started';
    this.outer.appendChild(this.started);
    this.nav = document.createElement('nav');
    this.nav.className = 'nav';
    this.outer.appendChild(this.nav);
    for (i = k = 0, ref = this.steps.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      a = document.createElement('div');
      this.nav.appendChild(a);
    }
  }

  Tour.prototype.start = function() {
    if (Modernizr.touch) {
      this.circle.addEventListener('touchend', this.handleClick, false);
      this.started.addEventListener('touchend', this.handleClick, false);
    } else {
      this.circle.addEventListener('mouseup', this.handleClick, false);
      this.started.addEventListener('mouseup', this.handleClick, false);
    }
    AppData.TOUR_MODE = true;
    AppData.KEYPRESS_ALLOWED = false;
    TweenLite.to(this.dark, 0, {
      opacity: 0.7
    });
    TweenLite.to(this.outer, 0.5, {
      autoAlpha: 1,
      onComplete: this.handleStep
    });
    return null;
  };

  Tour.prototype.end = function() {
    if (Modernizr.touch) {
      this.circle.removeEventListener('touchend', this.handleClick, false);
      this.started.removeEventListener('touchend', this.handleClick, false);
    } else {
      this.circle.removeEventListener('mouseup', this.handleClick, false);
      this.started.removeEventListener('mouseup', this.handleClick, false);
    }
    TweenLite.to(this.outer, 0.5, {
      autoAlpha: 0,
      onComplete: (function(_this) {
        return function() {
          TweenLite.to(_this.dark, 0, {
            opacity: 0
          });
          AppData.TOUR_MODE = false;
          AppData.KEYPRESS_ALLOWED = true;
          TweenLite.to(_this.nav, 0, {
            autoAlpha: 1
          });
          TweenLite.to(_this.started, 0, {
            autoAlpha: 0,
            bottom: 0
          });
          Cookies.setCookie('tour', 'hide');
          return null;
        };
      })(this)
    });
    return null;
  };

  Tour.prototype.handleClick = function(e) {
    e.preventDefault();
    if (this.canClick === false) {
      return;
    }
    this.canClick = false;
    this.steps[this.stepIndex].action();
    this.hideIndicator();
    return null;
  };

  Tour.prototype.handleStep = function() {
    if (this.cur !== void 0) {
      this.old = this.cur;
    }
    this.cur = this.stepIndex;
    if (this.old !== void 0) {
      this.nav.children[this.old].className = '';
    }
    this.nav.children[this.stepIndex].className = 'selected';
    this.instructions.innerHTML = this.steps[this.stepIndex].instructions;
    this.moveTo(this.steps[this.stepIndex].align, this.steps[this.stepIndex].x, this.steps[this.stepIndex].y);
    if (this.stepIndex < this.steps.length - 1) {
      this.showIndicator();
    } else {
      this.canClick = true;
      TweenLite.to(this.nav, 0.3, {
        autoAlpha: 0
      });
      TweenLite.to(this.started, 0.5, {
        autoAlpha: 1,
        bottom: this.steps[this.stepIndex].y,
        ease: Power2.easeInOut
      });
    }
    return null;
  };

  Tour.prototype.moveTo = function(align, x, y) {
    switch (align) {
      case 'tr':
        TweenLite.to(this.inner, 0.0, {
          css: {
            top: y,
            left: 'initial',
            bottom: 'initial',
            right: x
          }
        });
        break;
      case 'tl':
        TweenLite.to(this.inner, 0.0, {
          css: {
            top: y,
            left: x,
            bottom: 'initial',
            right: 'initial'
          }
        });
        break;
      case 'bl':
        TweenLite.to(this.inner, 0.0, {
          css: {
            top: 'initial',
            left: x,
            bottom: y,
            right: 'initial'
          }
        });
    }
    return null;
  };

  Tour.prototype.showIndicator = function() {
    TweenLite.to(this.inner, 0.8, {
      autoAlpha: 1,
      delay: 0.5,
      ease: Power2.easeOut,
      onComplete: (function(_this) {
        return function() {
          _this.canClick = true;
          return null;
        };
      })(this)
    });
    return null;
  };

  Tour.prototype.hideIndicator = function() {
    TweenLite.to(this.inner, 0.0, {
      autoAlpha: 0
    });
    return null;
  };

  Tour.prototype.delayToNextStep = function(duration) {
    setTimeout((function(_this) {
      return function() {
        _this.stepIndex++;
        if (_this.stepIndex < _this.steps.length) {
          return _this.handleStep();
        } else {
          return _this.end();
        }
      };
    })(this), duration);
    return null;
  };

  Tour.prototype.action1 = function() {
    AppData.SHOW_MENU_PANNEL = true;
    App.TOGGLE_MENU.dispatch({
      width: AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER
    });
    this.delayToNextStep(0);
    return null;
  };

  Tour.prototype.action2 = function() {
    window.app.menu.openSubmenu(1);
    this.delayToNextStep(0);
    return null;
  };

  Tour.prototype.action3 = function() {
    var component, data;
    component = {
      'type_uid': 1,
      'settings': {
        x: -(AppData.WIDTH / 2 + app.dashboard.x) + 200 * AppData.RATIO,
        y: -(AppData.HEIGHT / 2 + app.dashboard.y) + 200 * AppData.RATIO
      }
    };
    data = Session.ADD(component);
    App.ADD.dispatch(data);
    App.SETTINGS_CHANGE.dispatch({
      component: data.component_session_uid
    });
    this.delayToNextStep(0);
    return null;
  };

  Tour.prototype.action4 = function() {
    var uid;
    for (uid in Session.SETTINGS) {
      App.TOGGLE_SETTINGS_PANNEL_HEIGHT.dispatch({
        type: true,
        component_session_uid: Session.SETTINGS[uid].component_session_uid
      });
    }
    AppData.SHOW_MENU_PANNEL = false;
    App.TOGGLE_MENU.dispatch({
      width: 0
    });
    this.delayToNextStep(0);
    return null;
  };

  Tour.prototype.action5 = function() {
    return this.delayToNextStep(0);
  };

  return Tour;

})();

Dashboard = (function(superClass) {
  extend(Dashboard, superClass);

  function Dashboard() {
    this.onRemove = bind(this.onRemove, this);
    this.onAdd = bind(this.onAdd, this);
    this.onResize = bind(this.onResize, this);
    this.onBackgroundUp = bind(this.onBackgroundUp, this);
    this.onBackgroundMove = bind(this.onBackgroundMove, this);
    this.onBackgroundDown = bind(this.onBackgroundDown, this);
    Dashboard.__super__.constructor.call(this);
    App.ADD.add(this.onAdd);
    App.REMOVE.add(this.onRemove);
    this.canvasSizeW = window.screen.availWidth * 2 * AppData.RATIO;
    this.canvasSizeH = window.screen.availHeight * 2 * AppData.RATIO;
    this.background = new Background();
    this.addChild(this.background);
    this.lineGraphics = new PIXI.Graphics();
    this.lineGraphics.alpha = AppData.LINE_ALPHA;
    this.addChild(this.lineGraphics);
    this.graphics = new PIXI.Graphics();
    this.addChild(this.graphics);
    this.holder = new PIXI.Container();
    this.addChild(this.holder);
    this.draggable = new DraggableElement(this.background);
    this.draggable.position.x = (this.canvasSizeW - AppData.WIDTH) / -2;
    this.draggable.position.y = (this.canvasSizeH - AppData.HEIGHT) / -2;
    this.physics = new PhysicsEngine(this.canvasSizeW, this.canvasSizeH, false);
    this.physics.init();
    this.center = new Vec2();
    this.mouseDown = false;
    this.isClick = false;
    this.downBody = null;
    if (Modernizr.touch) {
      this.background.on('touchstart', this.onBackgroundDown);
      this.background.on('touchmove', this.onBackgroundMove);
      this.background.on('touchend', this.onBackgroundUp);
      this.background.on('touchendoutside', this.onBackgroundUp);
    } else {
      this.background.on('mousedown', this.onBackgroundDown);
      this.background.on('mousemove', this.onBackgroundMove);
      this.background.on('mouseup', this.onBackgroundUp);
      this.background.on('mouseupoutside', this.onBackgroundUp);
    }
    this.components = [];
    this.positions = [];
    if (AppData.SHOW_KEYBOARD_PANNEL) {
      this.draggable.position.y -= AppData.KEYBOARD_PANNEL_HEIGHT / 2;
    }
  }

  Dashboard.prototype.onBackgroundDown = function(e) {
    var x, y;
    this.mouseDown = true;
    this.isClick = true;
    this.draggable.lock = true;
    x = e.data.global.x - this.draggable.position.x - this.x;
    y = e.data.global.y - this.draggable.position.y - this.y;
    this.downBody = this.physics.down(x, y);
    if (this.downBody === null) {
      App.TOGGLE_SETTINGS_PANNEL_HEIGHT.dispatch({
        type: false
      });
      this.draggable.lock = false;
    }
    AppData.SHOW_MENU_PANNEL = false;
    App.TOGGLE_MENU.dispatch({
      width: 0
    });
    return null;
  };

  Dashboard.prototype.onBackgroundMove = function(e) {
    var x, y;
    if (this.mouseDown) {
      this.isClick = false;
      x = e.data.global.x - this.draggable.position.x - this.x;
      y = e.data.global.y - this.draggable.position.y - this.y;
      this.physics.move(x, y);
    }
    return null;
  };

  Dashboard.prototype.onBackgroundUp = function(e) {
    var x, xxx, y, yyy;
    this.mouseDown = false;
    this.draggable.lock = false;
    x = e.data.global.x - this.draggable.position.x - this.x;
    y = e.data.global.y - this.draggable.position.y - this.y;
    this.physics.up(x, y);
    if (this.downBody !== null) {
      xxx = Math.round(((this.downBody.GetPosition().x * this.physics.worldScale) + this.draggable.position.x) - (AppData.WIDTH / 2));
      yyy = Math.round(((this.downBody.GetPosition().y * this.physics.worldScale) + this.draggable.position.y) - (AppData.HEIGHT / 2));
      App.AUTO_SAVE.dispatch({
        component_session_uid: this.downBody.GetUserData().uid,
        x: xxx,
        y: yyy
      });
    }
    if (this.downBody !== null && this.isClick) {
      App.TOGGLE_SETTINGS_PANNEL_HEIGHT.dispatch({
        type: true,
        component_session_uid: this.downBody.GetUserData().uid
      });
      this.downBody = null;
    }
    return null;
  };

  Dashboard.prototype.onResize = function() {
    this.background.width = AppData.WIDTH;
    this.background.height = AppData.HEIGHT;
    this.draggable.resize(AppData.WIDTH, AppData.HEIGHT, this.canvasSizeW, this.canvasSizeH);
    return null;
  };

  Dashboard.prototype.onAdd = function(data) {
    this.center.x = AppData.WIDTH / 2 - this.draggable.position.x;
    this.center.y = AppData.HEIGHT / 2 - this.draggable.position.y;
    this.add(data);
    return null;
  };

  Dashboard.prototype.onRemove = function(data) {
    this.remove(data);
    return null;
  };

  Dashboard.prototype.add = function(data) {
    var shape;
    switch (data.type_uid) {
      case AppData.COMPONENTS.NSG:
        shape = new ComponentNsg(data.component_session_uid);
        break;
      case AppData.COMPONENTS.OSC:
        shape = new ComponentOsc(data.component_session_uid);
        break;
      case AppData.COMPONENTS.ENV:
        shape = new ComponentEnv(data.component_session_uid);
        break;
      case AppData.COMPONENTS.FLT:
        shape = new ComponentFlt(data.component_session_uid);
        break;
      case AppData.COMPONENTS.PTG:
        shape = new ComponentPtg(data.component_session_uid);
        break;
      case AppData.COMPONENTS.LFO:
        shape = new ComponentLfo(data.component_session_uid);
        break;
      default:
        return;
    }
    shape.onAdd();
    shape.box2d = this.physics.createCustom(shape.vertices, this.center.x + data.settings.x, this.center.y + data.settings.y, Box2D.Dynamics.b2Body.b2_dynamicBody);
    shape.box2d.SetUserData({
      uid: shape.component_session_uid
    });
    this.components.push(shape);
    this.holder.addChild(shape);
    App.AUTO_SAVE.dispatch({
      component_session_uid: shape.component_session_uid
    });
    return null;
  };

  Dashboard.prototype.remove = function(data) {
    var component, i, k, ref;
    App.TOGGLE_SETTINGS_PANNEL_HEIGHT.dispatch({
      type: false
    });
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      component = this.components[i];
      if (component.component_session_uid === data.component_session_uid) {
        this.components.splice(i, 1);
        component.onRemove((function(_this) {
          return function() {
            _this.holder.removeChild(component);
            _this.physics.destroy(component.box2d);
            return delete Session.SETTINGS[data.component_session_uid];
          };
        })(this));
        break;
      }
    }
    return null;
  };

  Dashboard.prototype.update = function() {
    var color, i, k, lh, lw, pos, ref, rot, shape, x, y;
    this.graphics.clear();
    this.draggable.update();
    this.draggable.constrainToBounds();
    this.background.update(this.draggable.position, this.draggable.zoom);
    this.physics.update();
    this.positions = [];
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      shape = this.components[i];
      pos = shape.box2d.GetPosition();
      rot = shape.box2d.GetAngle();
      shape.x = this.draggable.position.x + (pos.x * this.physics.worldScale);
      shape.y = this.draggable.position.y + (pos.y * this.physics.worldScale);
      shape.rotation = rot;
      x = shape.x;
      y = shape.y;
      lw = AppData.WIDTH;
      lh = AppData.HEIGHT;
      color = AppData.COLORS[Session.GET(shape.component_session_uid).type_uid];
      if (x < 0) {
        x = 0;
      }
      if (x > lw) {
        x = AppData.WIDTH;
      }
      if (y < 0) {
        y = 0;
      }
      if (y > lh) {
        y = AppData.HEIGHT;
      }
      if (x <= 0 || x >= lw || y <= 0 || y >= lh) {
        this.graphics.lineStyle(0);
        this.graphics.beginFill(color);
        this.graphics.drawCircle(x, y, AppData.MINIMAP);
        this.graphics.endFill();
      }
      this.positions[shape.component_session_uid] = {
        x: x,
        y: y
      };
    }
    this.renderLines();
    return null;
  };

  Dashboard.prototype.renderLines = function() {
    var env, flt, i, k, lfo, ptg, ref, shape;
    this.lineGraphics.clear();
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      shape = this.components[i];
      if (Session.SETTINGS[shape.component_session_uid].audioCapable === true) {
        env = Session.SETTINGS[shape.component_session_uid].connections.ENV;
        ptg = Session.SETTINGS[shape.component_session_uid].connections.PTG;
        lfo = Session.SETTINGS[shape.component_session_uid].connections.LFO;
        flt = Session.SETTINGS[shape.component_session_uid].connections.FLT;
        if (env) {
          this.lineGraphics.beginFill(0, 0);
          this.lineGraphics.lineStyle(1 * AppData.RATIO, 0xffffff);
          this.lineGraphics.moveTo(this.positions[shape.component_session_uid].x, this.positions[shape.component_session_uid].y);
          this.lineGraphics.lineTo(this.positions[env].x, this.positions[env].y);
          this.lineGraphics.endFill();
        }
        if (ptg) {
          this.lineGraphics.beginFill(0, 0);
          this.lineGraphics.lineStyle(1 * AppData.RATIO, 0xffffff);
          this.lineGraphics.moveTo(this.positions[shape.component_session_uid].x, this.positions[shape.component_session_uid].y);
          this.lineGraphics.lineTo(this.positions[ptg].x, this.positions[ptg].y);
          this.lineGraphics.endFill();
        }
        if (lfo) {
          this.lineGraphics.beginFill(0, 0);
          this.lineGraphics.lineStyle(1 * AppData.RATIO, 0xffffff);
          this.lineGraphics.moveTo(this.positions[shape.component_session_uid].x, this.positions[shape.component_session_uid].y);
          this.lineGraphics.lineTo(this.positions[lfo].x, this.positions[lfo].y);
          this.lineGraphics.endFill();
        }
        if (flt) {
          this.lineGraphics.beginFill(0, 0);
          this.lineGraphics.lineStyle(1 * AppData.RATIO, 0xffffff);
          this.lineGraphics.moveTo(this.positions[shape.component_session_uid].x, this.positions[shape.component_session_uid].y);
          this.lineGraphics.lineTo(this.positions[flt].x, this.positions[flt].y);
          this.lineGraphics.endFill();
        }
      }
    }
    return null;
  };

  return Dashboard;

})(View);

Pannel = (function(superClass) {
  extend(Pannel, superClass);

  function Pannel(label) {
    Pannel.__super__.constructor.call(this);
    this.label = new PIXI.Text(label.toUpperCase(), AppData.TEXTFORMAT.PANNEL_TITLE);
    this.label.scale.x = this.label.scale.y = 0.5;
    this.label.anchor.x = 0;
    this.label.anchor.y = 0.5;
    this.label.position.x = AppData.PADDING;
    this.label.position.y = AppData.MENU_PANNEL / 2;
    this.addChild(this.label);
    this.elements = [];
  }

  Pannel.prototype.align = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.elements[i].y = AppData.MENU_PANNEL;
      } else {
        this.elements[i].y = this.elements[i - 1].y + this.elements[i - 1].height;
      }
    }
    return null;
  };

  return Pannel;

})(PIXI.Container);

AddPannel = (function(superClass) {
  extend(AddPannel, superClass);

  function AddPannel(label) {
    AddPannel.__super__.constructor.call(this, label);
    this.nsg = new SubmenuButtonAdd('Noise Generator', AppData.ASSETS.sprite.textures['comp-3-fill.png'], AppData.COLORS[AppData.COMPONENTS.NSG]);
    this.nsg.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(0);
        return null;
      };
    })(this);
    this.addChild(this.nsg);
    this.elements.push(this.nsg);
    this.osc = new SubmenuButtonAdd('Oscillator', AppData.ASSETS.sprite.textures['comp-4-fill.png'], AppData.COLORS[AppData.COMPONENTS.OSC]);
    this.osc.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(1);
        return null;
      };
    })(this);
    this.addChild(this.osc);
    this.elements.push(this.osc);
    this.env = new SubmenuButtonAdd('Envelope', AppData.ASSETS.sprite.textures['comp-5-fill.png'], AppData.COLORS[AppData.COMPONENTS.ENV]);
    this.env.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(2);
        return null;
      };
    })(this);
    this.addChild(this.env);
    this.elements.push(this.env);
    this.flt = new SubmenuButtonAdd('Filter', AppData.ASSETS.sprite.textures['comp-6-fill.png'], AppData.COLORS[AppData.COMPONENTS.FLT]);
    this.flt.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(3);
        return null;
      };
    })(this);
    this.addChild(this.flt);
    this.elements.push(this.flt);
    this.ptg = new SubmenuButtonAdd('Pattern Gate', AppData.ASSETS.sprite.textures['comp-7-fill.png'], AppData.COLORS[AppData.COMPONENTS.PTG]);
    this.ptg.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(4);
        return null;
      };
    })(this);
    this.addChild(this.ptg);
    this.elements.push(this.ptg);
    this.lfo = new SubmenuButtonAdd('Low Frequency Oscillator', AppData.ASSETS.sprite.textures['comp-10-fill.png'], AppData.COLORS[AppData.COMPONENTS.LFO]);
    this.lfo.buttonClick = (function(_this) {
      return function() {
        _this.addComponent(5);
        return null;
      };
    })(this);
    this.addChild(this.lfo);
    this.elements.push(this.lfo);
    this.align();
  }

  AddPannel.prototype.align = function() {
    var c, i, k, ref;
    c = 0;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i % 2 === 0) {
        this.elements[i].x = 0;
      } else {
        this.elements[i].x = AppData.SUBMENU_PANNEL / 2;
      }
      if (i % 2 === 0) {
        c++;
      }
      this.elements[i].y = AppData.MENU_PANNEL + (AppData.SUBMENU_PANNEL / 2 * c) - (AppData.SUBMENU_PANNEL / 2);
    }
    return null;
  };

  AddPannel.prototype.addComponent = function(type_uid) {
    var component, data;
    component = {
      'type_uid': type_uid
    };
    data = Session.ADD(component);
    App.ADD.dispatch(data);
    App.SETTINGS_CHANGE.dispatch({
      component: data.component_session_uid
    });
    return null;
  };

  return AddPannel;

})(Pannel);

LoginPannel = (function(superClass) {
  extend(LoginPannel, superClass);

  function LoginPannel(initial_label) {
    this.initial_label = initial_label;
    this.handleLogin = bind(this.handleLogin, this);
    this.handleLogout = bind(this.handleLogout, this);
    this.handleGithub = bind(this.handleGithub, this);
    this.handleFacebook = bind(this.handleFacebook, this);
    this.handleTwitter = bind(this.handleTwitter, this);
    this.build = bind(this.build, this);
    LoginPannel.__super__.constructor.call(this, this.initial_label);
    App.AUTH.add(this.build);
    this.build();
  }

  LoginPannel.prototype.clear = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.children.length - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.removeChild(this.children[1]);
    }
    this.elements = [];
    return null;
  };

  LoginPannel.prototype.build = function() {
    var data, facebook, github, img, logout, twitter;
    this.clear();
    if (Services.REFERENCE.getAuth()) {
      data = Services.REFERENCE.getAuth();
      img = new PIXI.Sprite.fromImage(data[data.provider].profileImageURL);
      img.anchor.x = 0.5;
      img.anchor.y = 0.5;
      img.width = AppData.ICON_SIZE_2;
      img.height = AppData.ICON_SIZE_2;
      img.x = AppData.PADDING + AppData.ICON_SIZE_2 / 2;
      img.y = AppData.MENU_PANNEL / 2;
      this.addChild(img);
      switch (data.provider) {
        case 'twitter':
          this.label.text = '@' + data.twitter.username.toUpperCase();
          break;
        default:
          this.label.text = data[data.provider].displayName.toUpperCase();
      }
      this.label.position.x = img.x + AppData.ICON_SIZE_2;
      this.title = new PIXI.Text('LOGGED VIA ' + data.provider.toUpperCase(), AppData.TEXTFORMAT.MENU_SUBTITLE);
      this.title.tint = 0x646464;
      this.title.scale.x = this.title.scale.y = 0.5;
      this.title.position.x = AppData.PADDING;
      this.title.position.y = AppData.MENU_PANNEL;
      this.addChild(this.title);
      logout = new SubmenuButton('Logout');
      logout.buttonClick = this.handleLogout;
      this.addChild(logout);
      this.elements.push(logout);
    } else {
      this.label.text = this.initial_label.toUpperCase();
      this.label.position.x = AppData.PADDING;
      twitter = new SubmenuButton('twitter', AppData.ASSETS.sprite.textures['ic-twitter.png']);
      twitter.buttonClick = this.handleTwitter;
      this.addChild(twitter);
      this.elements.push(twitter);
      facebook = new SubmenuButton('facebook', AppData.ASSETS.sprite.textures['ic-facebook.png']);
      facebook.buttonClick = this.handleFacebook;
      this.addChild(facebook);
      this.elements.push(facebook);
      github = new SubmenuButton('github', AppData.ASSETS.sprite.textures['ic-github.png']);
      github.buttonClick = this.handleGithub;
      this.addChild(github);
      this.elements.push(github);
    }
    this.align();
    return null;
  };

  LoginPannel.prototype.align = function() {
    var data, i, k, ref;
    data = Services.REFERENCE.getAuth();
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.elements[i].y = data ? this.title.y + this.title.height + AppData.PADDING / 2 : AppData.MENU_PANNEL;
      } else {
        this.elements[i].y = this.elements[i - 1].y + this.elements[i - 1].height;
      }
    }
    return null;
  };

  LoginPannel.prototype.handleTwitter = function() {
    Services.api.login.twitter(this.handleLogin);
    return null;
  };

  LoginPannel.prototype.handleFacebook = function() {
    Services.api.login.facebook(this.handleLogin);
    return null;
  };

  LoginPannel.prototype.handleGithub = function() {
    Services.api.login.github(this.handleLogin);
    return null;
  };

  LoginPannel.prototype.handleLogout = function() {
    App.PROMPT.dispatch({
      question: 'Are you sure you want to logout?',
      onConfirm: (function(_this) {
        return function() {
          Services.api.login.logout(_this.handleLogin);
          return null;
        };
      })(this)
    });
    return null;
  };

  LoginPannel.prototype.handleLogin = function(data) {
    App.AUTH.dispatch();
    return null;
  };

  return LoginPannel;

})(Pannel);

MidiPannel = (function(superClass) {
  extend(MidiPannel, superClass);

  function MidiPannel(label) {
    this.toggleMidiDevice = bind(this.toggleMidiDevice, this);
    this.onMidiStateChange = bind(this.onMidiStateChange, this);
    MidiPannel.__super__.constructor.call(this, label);
    this.DEFAULT_MESSAGE = 'NO MIDI DEVICES CONNECTED';
    this.controllers = [];
    App.MIDI.add(this.onMidiStateChange);
    this.title = new PIXI.Text(this.DEFAULT_MESSAGE, AppData.TEXTFORMAT.MENU_SUBTITLE);
    this.title.tint = 0x646464;
    this.title.scale.x = this.title.scale.y = 0.5;
    this.title.position.x = AppData.PADDING;
    this.title.position.y = AppData.MENU_PANNEL;
    this.addChild(this.title);
    this.description = new PIXI.Text('You need to connect your MIDI enabled device in order to control the synthesizer', AppData.TEXTFORMAT.MENU_DESCRIPTION);
    this.description.scale.x = this.description.scale.y = 0.5;
    this.description.position.x = AppData.PADDING;
    this.description.position.y = this.title.y + this.title.height + AppData.PADDING;
    this.addChild(this.description);
  }

  MidiPannel.prototype.onMidiStateChange = function(e) {
    var bt, controller, i, k, ref;
    if (e.state === 'disconnected' && e.connection === 'closed') {
      delete this.controllers[e.name];
    } else if (e.state === 'connected') {
      this.controllers[e.name] = e;
    }
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.removeChild(this.elements[i]);
    }
    this.elements = [];
    for (controller in this.controllers) {
      bt = new SubmenuButtonMidi(controller, AppData.ASSETS.sprite.textures['ic-selection-inactive.png']);
      bt.active = false;
      this.addChild(bt);
      this.elements.push(bt);
      this.controllers[controller].button = bt;
      this.assign(bt, controller);
      this.toggleMidiDevice(controller);
    }
    if (Object.keys(this.controllers).length > 0) {
      this.title.text = 'CHOOSE MIDI INPUT';
      this.description.visible = false;
    } else {
      this.title.text = this.DEFAULT_MESSAGE;
      this.description.visible = true;
    }
    this.align();
    return null;
  };

  MidiPannel.prototype.align = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.elements[i].y = this.title.y + this.title.height + AppData.PADDING / 2;
      } else {
        this.elements[i].y = this.elements[i - 1].y + this.elements[i - 1].height;
      }
    }
    return null;
  };

  MidiPannel.prototype.assign = function(bt, controller) {
    bt.buttonClick = (function(_this) {
      return function() {
        return _this.toggleMidiDevice(controller);
      };
    })(this);
    return null;
  };

  MidiPannel.prototype.toggleMidiDevice = function(controller) {
    var button;
    button = this.controllers[controller].button;
    button.active = !button.active;
    if (button.active === false) {
      button.img.texture = AppData.ASSETS.sprite.textures['ic-selection-inactive.png'];
      button.img.alpha = 0.15;
      delete Session.MIDI[controller];
    } else {
      button.img.texture = AppData.ASSETS.sprite.textures['ic-selection-active.png'];
      button.img.alpha = 1;
      Session.MIDI[controller] = controller;
    }
    return null;
  };

  return MidiPannel;

})(Pannel);

PatchesPannel = (function(superClass) {
  extend(PatchesPannel, superClass);

  function PatchesPannel(label) {
    this.onPatchLoaded = bind(this.onPatchLoaded, this);
    this.attachButtonClick = bind(this.attachButtonClick, this);
    this.rebuildUserPatches = bind(this.rebuildUserPatches, this);
    this.checkUserPatches = bind(this.checkUserPatches, this);
    this.checkUserAuth = bind(this.checkUserAuth, this);
    this.resetToDefault = bind(this.resetToDefault, this);
    this.createPatch = bind(this.createPatch, this);
    this.build = bind(this.build, this);
    PatchesPannel.__super__.constructor.call(this, label);
    this.DEFAULT_MESSAGE = 'NOT LOGGED IN';
    this.elements = [];
    App.AUTH.add(this.checkUserAuth);
    App.PATCH_CHANGED.add(this.onPatchLoaded);
    this.checkUserAuth();
  }

  PatchesPannel.prototype.clear = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.children.length - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.removeChild(this.children[1]);
    }
    this.elements = [];
    return null;
  };

  PatchesPannel.prototype.build = function(data) {
    var bt, component;
    this.clear();
    if (Services.REFERENCE.getAuth()) {
      this.button_NEW = new SubmenuButton('create new patch', AppData.ASSETS.sprite.textures['ic-add-32.png']);
      this.button_NEW.buttonClick = this.createPatch;
      this.button_NEW.y = AppData.MENU_PANNEL;
      this.addChild(this.button_NEW);
      this.saved = new PIXI.Text('YOUR PATCHES', AppData.TEXTFORMAT.MENU_SUBTITLE);
      this.saved.tint = 0x646464;
      this.saved.scale.x = this.saved.scale.y = 0.5;
      this.saved.position.x = AppData.PADDING;
      this.saved.position.y = this.button_NEW.y + this.button_NEW.height + AppData.PADDING;
      this.addChild(this.saved);
      bt = new SubmenuButtonPatch(Session["default"].uid, new Date(parseInt(Session["default"].date)).toLocaleDateString(), false);
      bt.setCurrent(Session["default"].uid === Session.patch.uid);
      this.attachButtonClick(bt, Session["default"].uid);
      this.addChild(bt);
      this.elements.push(bt);
      if (data === null) {
        if (Session["default"].uid !== Session.patch.uid) {
          this.resetToDefault();
          this.align();
          return;
        }
      }
      this.onPatchLoaded();
      if (data) {
        for (component in data) {
          bt = new SubmenuButtonPatch(data[component].name, new Date(parseInt(data[component].date)).toLocaleDateString(), true);
          bt.setCurrent(Session.patch.uid === data[component].uid);
          this.attachButtonClick(bt, component);
          this.addChild(bt);
          this.elements.push(bt);
        }
      }
      this.align();
    } else {
      this.title = new PIXI.Text(this.DEFAULT_MESSAGE, AppData.TEXTFORMAT.MENU_SUBTITLE);
      this.title.tint = 0x646464;
      this.title.scale.x = this.title.scale.y = 0.5;
      this.title.position.x = AppData.PADDING;
      this.title.position.y = AppData.MENU_PANNEL;
      this.addChild(this.title);
      this.description = new PIXI.Text('You need to login in order to save or load patches.', AppData.TEXTFORMAT.MENU_DESCRIPTION);
      this.description.scale.x = this.description.scale.y = 0.5;
      this.description.position.x = AppData.PADDING;
      this.description.position.y = this.title.y + this.title.height + AppData.PADDING;
      this.addChild(this.description);
    }
    return null;
  };

  PatchesPannel.prototype.align = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (i === 0) {
        this.elements[i].y = this.saved.y + this.saved.height + AppData.PADDING / 2;
      } else {
        this.elements[i].y = this.elements[i - 1].y + this.elements[i - 1].height;
      }
    }
    return null;
  };

  PatchesPannel.prototype.createPatch = function() {
    App.PROMPT.dispatch({
      question: 'Choose a patch name:',
      input: true,
      onConfirm: (function(_this) {
        return function(data) {
          var component;
          for (component in Session.SETTINGS) {
            App.REMOVE.dispatch(Session.SETTINGS[component]);
          }
          setTimeout(function() {
            Services.api.patches.set_patch(data, function(d) {
              Cookies.setCookie('patch', d.val().uid);
              return null;
            });
            return _this.checkUserPatches();
          }, 1000);
          return null;
        };
      })(this)
    });
    return null;
  };

  PatchesPannel.prototype.resetToDefault = function() {
    App.LOAD_PATCH.dispatch({
      label: Session["default"].uid,
      uid: Session["default"].uid,
      confirm: false
    });
    return null;
  };

  PatchesPannel.prototype.checkUserAuth = function() {
    if (Services.REFERENCE.getAuth()) {
      this.checkUserPatches();
    } else {
      this.build();
    }
    return null;
  };

  PatchesPannel.prototype.checkUserPatches = function() {
    Services.api.patches.getAll(this.rebuildUserPatches);
    return null;
  };

  PatchesPannel.prototype.rebuildUserPatches = function(snapshot) {
    this.build(snapshot.val());
    return null;
  };

  PatchesPannel.prototype.attachButtonClick = function(bt, uid) {
    bt.buttonClick = (function(_this) {
      return function() {
        App.LOAD_PATCH.dispatch({
          uid: uid,
          label: bt.label.text
        });
        return null;
      };
    })(this);
    if (bt.extraButton) {
      bt.remove.buttonClick = (function(_this) {
        return function() {
          App.PROMPT.dispatch({
            question: 'Are you sure you want to delete "' + bt.label.text + '"?',
            onConfirm: function() {
              Services.api.patches.delete_patch(uid, _this.checkUserPatches);
              return null;
            }
          });
          return null;
        };
      })(this);
    }
    return null;
  };

  PatchesPannel.prototype.onPatchLoaded = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.elements.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.elements[i].setCurrent(Session.patch.name.toUpperCase() === this.elements[i].label.text);
    }
    return null;
  };

  return PatchesPannel;

})(Pannel);

Menu = (function(superClass) {
  extend(Menu, superClass);

  function Menu() {
    this.openSubmenu = bind(this.openSubmenu, this);
    this.highlightMenu = bind(this.highlightMenu, this);
    Menu.__super__.constructor.call(this);
    this.buttons = [];
    this.tabs = [];
    this.selectIndex = null;
    this.sidepannel = new PIXI.Container();
    this.addChild(this.sidepannel);
    this.graphics = new PIXI.Graphics();
    this.addChild(this.graphics);
    this.graphics2 = new PIXI.Graphics();
    this.sidepannel.addChild(this.graphics2);
    this.select = new PIXI.Graphics();
    this.select.beginFill(0x4E4E4E);
    this.select.lineStyle(0, 0);
    this.select.moveTo(0, 0);
    this.select.lineTo(4 * AppData.RATIO, 0);
    this.select.lineTo(4 * AppData.RATIO, AppData.SETTINGS_PANNEL_HEIGHT);
    this.select.lineTo(0, AppData.SETTINGS_PANNEL_HEIGHT);
    this.select.lineTo(0, 0);
    this.select.endFill();
    this.select.y = AppData.SETTINGS_PANNEL_HEIGHT * -1;
    this.select.alpha = 0;
    this.addChild(this.select);
    this.build();
  }

  Menu.prototype.build = function() {
    var i, k, ref;
    this.login = new MenuButton(AppData.ASSETS.sprite.textures['ic-login-48.png'], 'login');
    this.login.buttonClick = (function(_this) {
      return function() {
        _this.openSubmenu(0);
        return null;
      };
    })(this);
    this.buttons.push(this.login);
    this.addChild(this.login);
    this.add = new MenuButton(AppData.ASSETS.sprite.textures['ic-add-48.png'], 'add');
    this.add.buttonClick = (function(_this) {
      return function() {
        _this.openSubmenu(1);
        return null;
      };
    })(this);
    this.buttons.push(this.add);
    this.addChild(this.add);
    this.presets = new MenuButton(AppData.ASSETS.sprite.textures['ic-presets-48.png'], 'patches');
    this.presets.buttonClick = (function(_this) {
      return function() {
        _this.openSubmenu(2);
        return null;
      };
    })(this);
    this.buttons.push(this.presets);
    this.addChild(this.presets);
    this.midi = new MenuButton(AppData.ASSETS.sprite.textures['ic-midi.png'], 'midi');
    this.midi.buttonClick = (function(_this) {
      return function() {
        _this.openSubmenu(3);
        return null;
      };
    })(this);
    this.buttons.push(this.midi);
    this.addChild(this.midi);
    this.help = new LabelsToggle();
    this.help.buttonClick = (function(_this) {
      return function() {
        AppData.SHOW_LABELS = !AppData.SHOW_LABELS;
        App.HELP.dispatch(AppData.SHOW_LABELS);
        return null;
      };
    })(this);
    this.addChild(this.help);
    this.tabs.push(new LoginPannel('login'));
    this.tabs.push(new AddPannel('add component'));
    this.tabs.push(new PatchesPannel('patches'));
    this.tabs.push(new MidiPannel('midi devices'));
    for (i = k = 0, ref = this.tabs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.tabs[i].visible = false;
      this.sidepannel.addChild(this.tabs[i]);
    }
    this.adjustPosition();
    return null;
  };

  Menu.prototype.resize = function() {
    this.graphics.clear();
    this.graphics2.clear();
    this.graphics.beginFill(AppData.BG);
    this.graphics.lineStyle(0, 0);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(AppData.SUBMENU_PANNEL, 0);
    this.graphics.lineTo(AppData.SUBMENU_PANNEL, AppData.HEIGHT);
    this.graphics.lineTo(0, AppData.HEIGHT);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
    this.graphics.beginFill(0x0D0D0D);
    this.graphics.lineStyle(0, 0);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(AppData.MENU_PANNEL_BORDER, 0);
    this.graphics.lineTo(AppData.MENU_PANNEL_BORDER, AppData.HEIGHT);
    this.graphics.lineTo(0, AppData.HEIGHT);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
    this.graphics2.beginFill(0x0D0D0D);
    this.graphics2.lineStyle(0, 0);
    this.graphics2.moveTo(0, 0);
    this.graphics2.lineTo(AppData.MENU_PANNEL_BORDER, 0);
    this.graphics2.lineTo(AppData.MENU_PANNEL_BORDER, AppData.HEIGHT);
    this.graphics2.lineTo(0, AppData.HEIGHT);
    this.graphics2.lineTo(0, 0);
    this.graphics2.endFill();
    this.help.x = 4 * AppData.RATIO;
    this.help.y = AppData.HEIGHT - this.help.height - AppData.PADDING;
    this.adjustPosition();
    return null;
  };

  Menu.prototype.adjustPosition = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.buttons.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.buttons[i].x = 4 * AppData.RATIO;
      if (i === 0) {
        this.buttons[i].y = 0;
      } else {
        this.buttons[i].y = this.buttons[i - 1].y + this.buttons[i - 1].height;
      }
    }
    return null;
  };

  Menu.prototype.open = function(width, duration) {
    var xx;
    if (width <= AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER) {
      this.selectIndex = null;
      TweenMax.to(this.select, duration, {
        y: AppData.MENU_PANNEL * -1,
        alpha: 0,
        ease: Quad.easeInOut
      });
    } else {
      TweenMax.to(this.select, duration, {
        alpha: 1,
        ease: Quad.easeInOut
      });
    }
    xx = width === AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER ? 0 : -AppData.SUBMENU_PANNEL;
    TweenMax.to(this.sidepannel, duration, {
      x: xx,
      ease: Quad.easeInOut
    });
    if (this.selectIndex === null) {
      this.highlightMenu();
    }
    return null;
  };

  Menu.prototype.close = function(duration) {
    this.selectIndex = null;
    TweenMax.to(this.sidepannel, duration, {
      x: 0,
      ease: Quad.easeInOut,
      onComplete: this.highlightMenu
    });
    TweenMax.to(this.select, duration, {
      y: AppData.MENU_PANNEL * -1,
      alpha: 0,
      ease: Quad.easeInOut
    });
    return null;
  };

  Menu.prototype.highlightMenu = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.buttons.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.buttons[i].select(false);
    }
    if (this.selectIndex !== null) {
      this.buttons[this.selectIndex].select(true);
    }
    return null;
  };

  Menu.prototype.openSubmenu = function(index) {
    var i, k, ref;
    this.selectIndex = index;
    this.highlightMenu();
    for (i = k = 0, ref = this.tabs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.tabs[i].visible = false;
    }
    this.tabs[this.selectIndex].visible = true;
    TweenMax.to(this.select, 0.3, {
      y: this.buttons[index].y,
      height: this.buttons[index].height,
      ease: Quad.easeInOut
    });
    App.TOGGLE_MENU.dispatch({
      width: AppData.SUBMENU_PANNEL + AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER
    });
    return null;
  };

  return Menu;

})(PIXI.Container);

Soon = (function(superClass) {
  extend(Soon, superClass);

  function Soon() {
    Soon.__super__.constructor.call(this);
    this.anchor.x = 0.5;
    this.anchor.y = 0.5;
    this.hint = new PIXI.Text('We\'re working on the mobile version. Please come back later.', AppData.TEXTFORMAT.SOON);
    this.hint.anchor.x = 0.5;
    this.hint.anchor.y = 1;
    this.hint.scale.x = this.hint.scale.y = 0.5;
    this.hint.tint = 0xffffff;
    this.hint.y = 50 * AppData.RATIO;
    this.hint.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
    this.addChild(this.hint);
  }

  return Soon;

})(PIXI.Sprite);

LoadingScreen = (function(superClass) {
  extend(LoadingScreen, superClass);

  function LoadingScreen(callback1) {
    this.callback = callback1;
    this.onResize = bind(this.onResize, this);
    this.preloadAssetsComplete = bind(this.preloadAssetsComplete, this);
    this.preloadAssets = bind(this.preloadAssets, this);
    this.preloadLoadingAssetsComplete = bind(this.preloadLoadingAssetsComplete, this);
    LoadingScreen.__super__.constructor.call(this);
    this.holder = new PIXI.Sprite();
    this.holder.alpha = 0;
    this.holder.scale.x = this.holder.scale.y = 0.5;
    this.holder.anchor.x = 0.5;
    this.holder.anchor.y = 0.5;
    this.addChild(this.holder);
    this.icon1 = new PIXI.Sprite();
    this.icon1.anchor.x = 0.5;
    this.icon1.anchor.y = 0.5;
    this.icon1.alpha = 0;
    this.holder.addChild(this.icon1);
    this.icon2 = new PIXI.Sprite();
    this.icon2.x = 6;
    this.icon2.anchor.x = 0.5;
    this.icon2.anchor.y = 0.5;
    this.holder.addChild(this.icon2);
    this.icon3 = new PIXI.Sprite();
    this.icon3.anchor.x = 0.5;
    this.icon3.anchor.y = 0.5;
    this.icon3.alpha = 0;
    this.holder.addChild(this.icon3);
    App.RESIZE.add(this.onResize);
    App.RESIZE.dispatch();
    this.pos1 = -81 * AppData.RATIO;
    this.pos2 = 86 * AppData.RATIO;
    this.preloadLoadingAssets();
    null;
  }

  LoadingScreen.prototype.preloadLoadingAssets = function() {
    this.isLoading = true;
    if (AppData.RATIO === 1) {
      PIXI.loader.add('preloader', '/sprites/preload1x.json');
    } else {
      PIXI.loader.add('preloader', '/sprites/preload2x.json');
    }
    PIXI.loader.once('complete', this.preloadLoadingAssetsComplete);
    PIXI.loader.load();
    return null;
  };

  LoadingScreen.prototype.preloadLoadingAssetsComplete = function(loader, resources) {
    this.icon1.texture = resources.preloader.textures['preload1.png'];
    this.icon2.texture = resources.preloader.textures['preload2.png'];
    this.icon3.texture = resources.preloader.textures['preload3.png'];
    this.mask1 = new PIXI.Graphics();
    this.mask1.beginFill(0x00ffff, 0.5);
    this.mask1.drawRect(this.icon1.texture.width / -2, this.icon1.texture.height / -2, this.icon1.texture.width, this.icon1.texture.height);
    this.mask1.x = this.pos1;
    this.holder.addChild(this.mask1);
    this.mask2 = new PIXI.Graphics();
    this.mask2.beginFill(0x00ffff, 0.5);
    this.mask2.drawRect(this.icon3.texture.width / -2, this.icon3.texture.height / -2, this.icon3.texture.width, this.icon3.texture.height);
    this.mask2.x = this.pos2;
    this.holder.addChild(this.mask2);
    this.icon1.mask = this.mask1;
    this.icon3.mask = this.mask2;
    loader.reset();
    this.start();
    return null;
  };

  LoadingScreen.prototype.preloadAssets = function() {
    if (AppData.RATIO === 1) {
      PIXI.loader.add('sprite', '/sprites/sprite1x.json');
    } else {
      PIXI.loader.add('sprite', '/sprites/sprite2x.json');
    }
    PIXI.loader.once('complete', this.preloadAssetsComplete);
    PIXI.loader.load();
    return null;
  };

  LoadingScreen.prototype.preloadAssetsComplete = function(loader, resources) {
    var keyboard, labels, menu, tour;
    AppData.ASSETS = resources;
    loader.reset();
    tour = Cookies.getCookie('tour') || 'show';
    menu = Cookies.getCookie('menu') || 'hide';
    keyboard = Cookies.getCookie('keyboard') || 'show';
    labels = Cookies.getCookie('labels') || 'hide';
    AppData.SHOW_TOUR = tour === 'show' ? true : false;
    if (AppData.SHOW_TOUR === true) {
      AppData.SHOW_MENU_PANNEL = false;
      AppData.SHOW_KEYBOARD_PANNEL = true;
      AppData.SHOW_LABELS = false;
    } else {
      AppData.SHOW_MENU_PANNEL = menu === 'show' ? true : false;
      AppData.SHOW_KEYBOARD_PANNEL = keyboard === 'show' ? true : true;
      AppData.SHOW_LABELS = labels === 'show' ? true : false;
    }
    Services.api.patches.load_patch('default', (function(_this) {
      return function(snapshot) {
        var data;
        data = snapshot.val();
        Session["default"].uid = 'default';
        Session["default"].author = data.author;
        Session["default"].name = data.name;
        Session["default"].date = data.date;
        Session["default"].components = data.components;
        Session.patch.uid = 'default';
        Session.patch.author = data.author;
        Session.patch.name = data.name;
        Session.patch.date = data.date;
        Session.patch.components = data.components;
        _this.end();
        return null;
      };
    })(this));
    return null;
  };

  LoadingScreen.prototype.start = function() {
    TweenMax.to(this.holder, 1.0, {
      alpha: 1,
      ease: Power2.easeInOut,
      onComplete: this.preloadAssets
    });
    TweenMax.to(this.icon1, 1, {
      x: this.pos1,
      alpha: 1,
      ease: Power4.easeInOut
    });
    TweenMax.to(this.icon3, 1, {
      x: this.pos2,
      alpha: 1,
      ease: Power4.easeInOut,
      delay: 0.1
    });
    return null;
  };

  LoadingScreen.prototype.end = function() {
    var iOS;
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    if (iOS) {
      this.soon = new Soon();
      this.soon.x = AppData.WIDTH / 2;
      this.soon.y = AppData.HEIGHT / 2;
      this.addChild(this.soon);
      return;
    }
    TweenMax.to(this.holder, 1.0, {
      alpha: 0,
      delay: 0.5,
      ease: Power2.easeInOut,
      onComplete: this.callback
    });
    return null;
  };

  LoadingScreen.prototype.onResize = function() {
    this.holder.x = AppData.WIDTH / 2;
    this.holder.y = AppData.HEIGHT / 2;
    if (!this.soon) {
      return;
    }
    this.soon.x = AppData.WIDTH / 2;
    this.soon.y = AppData.HEIGHT / 2;
    return null;
  };

  return LoadingScreen;

})(PIXI.Sprite);

MidiController = (function() {
  function MidiController() {
    this.onMIDIMessage = bind(this.onMIDIMessage, this);
    this.onStateChange = bind(this.onStateChange, this);
    this.onError = bind(this.onError, this);
    this.onSuccess = bind(this.onSuccess, this);
    this.midi = null;
    if (!!window.navigator.requestMIDIAccess) {
      navigator.requestMIDIAccess().then(this.onSuccess)["catch"](this.onError);
    }
  }

  MidiController.prototype.onSuccess = function(midi) {
    var input, inputs;
    this.midi = midi;
    this.midi.onstatechange = this.onStateChange;
    inputs = this.midi.inputs.values();
    input = inputs.next();
    while (input && !input.done) {
      input.value.onmidimessage = this.onMIDIMessage;
      input = inputs.next();
    }
    return null;
  };

  MidiController.prototype.onError = function(error) {
    console.error(error);
    return null;
  };

  MidiController.prototype.onStateChange = function(device) {
    App.MIDI.dispatch({
      originalEvent: device,
      name: device.port.name,
      connection: device.port.connection,
      state: device.port.state
    });
    return null;
  };

  MidiController.prototype.onMIDIMessage = function(e) {
    var channel, cmd, controller, note, velocity;
    cmd = e.data[0] >> 4;
    channel = e.data[0] & 0xf;
    note = e.data[1];
    velocity = e.data[2];
    controller = Session.MIDI[e.target.name];
    if (channel === 9) {
      return;
    }
    if (cmd === 8 || cmd === 9 && velocity === 0) {
      this.noteOff(note);
    } else if (cmd === 9) {
      if (controller === void 0) {
        return;
      }
      this.noteOn(note, velocity / 127.0);
    } else if (cmd === 11) {
      if (controller === void 0) {
        return;
      }
    } else if (cmd === 14) {
      if (controller === void 0) {
        return;
      }
    } else if (cmd === 10) {
      if (controller === void 0) {
        return;
      }
    } else {
      if (controller === void 0) {
        return;
      }
    }
    return null;
  };

  MidiController.prototype.noteOn = function(value, velocity) {
    App.NOTE_ON.dispatch({
      note: value,
      velocity: velocity
    });
    return null;
  };

  MidiController.prototype.noteOff = function(value) {
    App.NOTE_OFF.dispatch({
      note: value
    });
    return null;
  };

  return MidiController;

})();

KeyboardController = (function() {
  KeyboardController.map = [];

  KeyboardController.map[0] = {
    label: 'A',
    keyCode: 65,
    note: 'C2',
    midi: 48
  };

  KeyboardController.map[1] = {
    label: 'W',
    keyCode: 87,
    note: 'C2#',
    midi: 49
  };

  KeyboardController.map[2] = {
    label: 'S',
    keyCode: 83,
    note: 'D2',
    midi: 50
  };

  KeyboardController.map[3] = {
    label: 'E',
    keyCode: 69,
    note: 'D2#',
    midi: 51
  };

  KeyboardController.map[4] = {
    label: 'D',
    keyCode: 68,
    note: 'E2',
    midi: 52
  };

  KeyboardController.map[5] = {
    label: 'F',
    keyCode: 70,
    note: 'F2',
    midi: 53
  };

  KeyboardController.map[6] = {
    label: 'T',
    keyCode: 84,
    note: 'F2#',
    midi: 54
  };

  KeyboardController.map[7] = {
    label: 'G',
    keyCode: 71,
    note: 'G2',
    midi: 55
  };

  KeyboardController.map[8] = {
    label: 'Y',
    keyCode: 89,
    note: 'G2#',
    midi: 56
  };

  KeyboardController.map[9] = {
    label: 'H',
    keyCode: 72,
    note: 'A2',
    midi: 57
  };

  KeyboardController.map[10] = {
    label: 'U',
    keyCode: 85,
    note: 'A2#',
    midi: 58
  };

  KeyboardController.map[11] = {
    label: 'J',
    keyCode: 74,
    note: 'B2',
    midi: 59
  };

  KeyboardController.map[12] = {
    label: 'K',
    keyCode: 75,
    note: 'C3',
    midi: 60
  };

  KeyboardController.map[13] = {
    label: 'O',
    keyCode: 79,
    note: 'D3#',
    midi: 61
  };

  KeyboardController.map[14] = {
    label: 'L',
    keyCode: 76,
    note: 'D3',
    midi: 62
  };

  KeyboardController.map[15] = {
    label: 'P',
    keyCode: 80,
    note: 'D3#',
    midi: 63
  };

  function KeyboardController() {
    this.onKeyUp = bind(this.onKeyUp, this);
    this.onKeyDown = bind(this.onKeyDown, this);
    this.currentKeys = [];
    if ('onkeyup' in document.documentElement) {
      window.addEventListener('keydown', this.onKeyDown, false);
      window.addEventListener('keyup', this.onKeyUp, false);
    }
  }

  KeyboardController.prototype.onKeyDown = function(e) {
    var i, k, ref, value;
    if (!AppData.KEYPRESS_ALLOWED) {
      return;
    }
    value = false;
    for (i = k = 0, ref = KeyboardController.map.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (e.keyCode === KeyboardController.map[i].keyCode) {
        value = KeyboardController.map[i].midi;
        break;
      }
    }
    if (value) {
      if (this.currentKeys[value] === void 0) {
        this.currentKeys[value] = 1;
        App.NOTE_ON.dispatch({
          note: value,
          velocity: 127.0
        });
      }
    }
    return null;
  };

  KeyboardController.prototype.onKeyUp = function(e) {
    var i, k, ref, value;
    if (!AppData.KEYPRESS_ALLOWED) {
      return;
    }
    value = false;
    for (i = k = 0, ref = KeyboardController.map.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (e.keyCode === KeyboardController.map[i].keyCode) {
        value = KeyboardController.map[i].midi;
        break;
      }
    }
    if (value) {
      if (this.currentKeys[value]) {
        delete this.currentKeys[value];
        App.NOTE_OFF.dispatch({
          note: value
        });
      }
    }
    return null;
  };

  return KeyboardController;

})();

Controllers = (function() {
  function Controllers() {
    this.midi = new MidiController();
    this.keyboard = new KeyboardController();
  }

  return Controllers;

})();

Audio = (function() {
  function Audio() {}

  Audio.STATS = {
    ChannelStrip: 0,
    Oscillator: 0,
    NoiseGenerator: 0
  };

  Audio.CONTEXT = new (window.AudioContext || window.webkitAudioContext)();

  Audio.WAVE_TYPE = [];

  Audio.WAVE_TYPE[AppData.WAVE_TYPE.SINE] = 'sine';

  Audio.WAVE_TYPE[AppData.WAVE_TYPE.TRIANGLE] = 'triangle';

  Audio.WAVE_TYPE[AppData.WAVE_TYPE.SQUARE] = 'square';

  Audio.WAVE_TYPE[AppData.WAVE_TYPE.SAWTOOTH] = 'sawtooth';

  Audio.OCTAVE = [];

  Audio.OCTAVE[AppData.OCTAVE_TYPE.THIRTY_TWO] = 0.5;

  Audio.OCTAVE[AppData.OCTAVE_TYPE.SIXTEEN] = 1;

  Audio.OCTAVE[AppData.OCTAVE_TYPE.EIGHT] = 2;

  Audio.OCTAVE[AppData.OCTAVE_TYPE.FOUR] = 3;

  Audio.NOISE_TYPE = [];

  Audio.NOISE_TYPE[AppData.NOISE_TYPE.WHITE] = 0;

  Audio.NOISE_TYPE[AppData.NOISE_TYPE.PINK] = 1;

  Audio.NOISE_TYPE[AppData.NOISE_TYPE.BROWN] = 2;

  Audio.FILTER_TYPE = [];

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.LOWPASS] = 'lowpass';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.HIGHPASS] = 'highpass';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.BANDPASS] = 'bandpass';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.LOWSHELF] = 'lowshelf';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.HIGHSHELF] = 'highshelf';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.PEAKING] = 'peaking';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.NOTCH] = 'notch';

  Audio.FILTER_TYPE[AppData.FILTER_TYPE.ALLPASS] = 'allpass';

  Audio.OCTAVE_STEP = 3;

  Audio.CUR_OCTAVE = [0.125, 0.25, 0.5, 1, 2, 4, 8];

  Audio.noteToFrequency = function(note) {
    var frequency;
    frequency = 440.0 * Math.pow(2, (note - 69) / 12);
    return frequency;
  };

  return Audio;

})();

ChannelStrip = (function() {
  function ChannelStrip() {
    this.output = Audio.CONTEXT.createGain();
    this.input = Audio.CONTEXT.createGain();
    this.input.connect(this.output);
  }

  ChannelStrip.prototype.setVolume = function(value, linear) {
    var volume;
    if (linear == null) {
      linear = false;
    }
    volume = value;
    if (!linear) {
      volume = Math.pow(volume / 1, 2);
    }
    if (this.input) {
      this.input.gain.value = volume;
    }
    return null;
  };

  ChannelStrip.prototype.connect = function(otherDeviceInput) {
    this.output.connect(otherDeviceInput);
    return null;
  };

  ChannelStrip.prototype.disconnect = function() {
    this.output.disconnect();
    return null;
  };

  return ChannelStrip;

})();

Component = (function() {
  function Component(data) {
    this.component_session_uid = data.component_session_uid;
    this.type_uid = data.type_uid;
    this.output = Audio.CONTEXT.createGain();
    this.aux = Audio.CONTEXT.createGain();
    this.aux.gain.value = 1.0;
    this.aux.connect(this.output);
    this.pre = Audio.CONTEXT.createGain();
    this.pre.gain.value = 1.0;
    this.pre.connect(this.aux);
    if (data.audioCapable) {
      this.attack = 0.0;
      this.decay = 0.0;
      this.sustain = 100.0;
      this.release = 0.0;
      this.ENV = null;
      this.PTG = null;
      this.LFO = null;
      this.FLT = null;
    }
    this.parameters = {};
    this.active = [];
  }

  Component.prototype.connect = function(input) {
    if (input instanceof GainNode || input instanceof AudioDestinationNode) {
      this.output.connect(input);
    } else {
      throw new Error('You can only connect to GainNode or AudioDestinationNode.');
      this.disconnect();
    }
    return null;
  };

  Component.prototype.disconnect = function() {
    this.output.disconnect();
    return null;
  };

  Component.prototype.destroy = function() {
    this.disconnect();
    return null;
  };

  Component.prototype.setVolume = function(value, linear) {
    var volume;
    if (linear == null) {
      linear = false;
    }
    volume = value;
    if (!linear) {
      volume = Math.pow(value / 1, 2);
    }
    if (this.output) {
      this.output.gain.value = volume;
    }
    return null;
  };

  Component.prototype.getRampValue = function(start, end, fromTime, toTime, at) {
    var difference, phase, time, truncateTime, v;
    difference = end - start;
    time = toTime - fromTime;
    truncateTime = at - fromTime;
    phase = truncateTime / time;
    v = start + phase * difference;
    if (v <= start) {
      v = start;
    }
    if (v >= end) {
      v = end;
    }
    return v;
  };

  Component.prototype.checkAUX = function() {
    if (this.ENV !== null && Session.SETTINGS[this.ENV.component_session_uid].settings.bypass !== true) {
      this.attack = this.ENV.parameters.attack;
      this.decay = this.ENV.parameters.decay;
      this.sustain = this.ENV.parameters.sustain;
      this.release = this.ENV.parameters.release;
    } else {
      this.attack = 0;
      this.decay = 0;
      this.sustain = 100;
      this.release = 0;
    }
    if (this.LFO !== null && Session.SETTINGS[this.LFO.component_session_uid].settings.bypass !== true) {
      this.LFO.aux.connect(this.aux.gain);
    } else {
      if (this.LFO) {
        this.LFO.aux.disconnect();
      }
    }
    if (this.FLT !== null && Session.SETTINGS[this.FLT.component_session_uid].settings.bypass !== true) {
      this.pre.disconnect();
      this.FLT.component.connect(this.aux);
      this.pre.connect(this.FLT.component);
    } else {
      if (this.FLT) {
        this.FLT.disconnect();
      }
      this.pre.disconnect();
      this.pre.connect(this.aux);
    }
    if (this.PTG !== null && Session.SETTINGS[this.PTG.component_session_uid].settings.bypass !== true) {
      this.PTG.aux = this.aux;
    } else {
      if (this.PTG) {
        this.PTG.disconnect();
      }
    }
    return null;
  };

  return Component;

})();

Envelope = (function(superClass) {
  extend(Envelope, superClass);

  function Envelope(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    Envelope.__super__.constructor.call(this, data);
    this.parameters.attack = data.settings.attack;
    this.parameters.decay = data.settings.decay;
    this.parameters.sustain = data.settings.sustain;
    this.parameters.release = data.settings.release;
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
  }

  Envelope.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.attack = Session.SETTINGS[this.component_session_uid].settings.attack;
      this.decay = Session.SETTINGS[this.component_session_uid].settings.decay;
      this.sustain = Session.SETTINGS[this.component_session_uid].settings.sustain;
      this.release = Session.SETTINGS[this.component_session_uid].settings.release;
    }
    return null;
  };

  Envelope.property('attack', {
    get: function() {
      return this.parameters.attack;
    },
    set: function(value) {
      if (this.parameters.attack === value) {
        return this.parameters.attack;
      }
      this.parameters.attack = value;
      return this.parameters.attack;
    }
  });

  Envelope.property('decay', {
    get: function() {
      return this.parameters.decay;
    },
    set: function(value) {
      if (this.parameters.decay === value) {
        return this.parameters.decay;
      }
      this.parameters.decay = value;
      return this.parameters.decay;
    }
  });

  Envelope.property('sustain', {
    get: function() {
      return this.parameters.sustain;
    },
    set: function(value) {
      if (this.parameters.sustain === value) {
        return this.parameters.sustain;
      }
      this.parameters.sustain = value;
      return this.parameters.sustain;
    }
  });

  Envelope.property('release', {
    get: function() {
      return this.parameters.release;
    },
    set: function(value) {
      if (this.parameters.release === value) {
        return this.parameters.release;
      }
      this.parameters.release = value;
      return this.parameters.release;
    }
  });

  return Envelope;

})(Component);

Flt = (function(superClass) {
  extend(Flt, superClass);

  function Flt(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    Flt.__super__.constructor.call(this, data);
    this.parameters.bypass = data.settings.bypass;
    this.parameters.type = Audio.FILTER_TYPE[data.settings.filter_type];
    this.parameters.frequency = data.settings.frequency;
    this.parameters.detune = data.settings.detune;
    this.parameters.q = data.settings.q;
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.component = Audio.CONTEXT.createBiquadFilter();
    this.component.type = this.type;
    this.component.frequency.value = this.frequency;
    this.component.detune.value = this.detune;
    this.component.Q.value = this.q;
  }

  Flt.prototype.destroy = function() {
    this.component.disconnect();
    return null;
  };

  Flt.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.type = Audio.FILTER_TYPE[Session.SETTINGS[this.component_session_uid].settings.filter_type];
      this.frequency = Session.SETTINGS[this.component_session_uid].settings.frequency;
      this.detune = Session.SETTINGS[this.component_session_uid].settings.detune;
      this.q = Session.SETTINGS[this.component_session_uid].settings.q;
    }
    return null;
  };

  Flt.property('type', {
    get: function() {
      return this.parameters.type;
    },
    set: function(value) {
      if (this.parameters.type === value) {
        return this.parameters.type;
      }
      this.parameters.type = value;
      this.component.type.value = this.parameters.type;
      return this.parameters.type;
    }
  });

  Flt.property('frequency', {
    get: function() {
      return this.parameters.frequency;
    },
    set: function(value) {
      if (this.parameters.frequency === value) {
        return this.parameters.frequency;
      }
      this.parameters.frequency = value;
      this.component.frequency.value = this.parameters.frequency;
      return this.parameters.frequency;
    }
  });

  Flt.property('detune', {
    get: function() {
      return this.parameters.detune;
    },
    set: function(value) {
      if (this.parameters.detune === value) {
        return this.parameters.detune;
      }
      this.parameters.detune = value;
      this.component.detune.value = this.parameters.detune;
      return this.parameters.detune;
    }
  });

  Flt.property('q', {
    get: function() {
      return this.parameters.q;
    },
    set: function(value) {
      if (this.parameters.q === value) {
        return this.parameters.q;
      }
      this.parameters.q = value;
      this.component.Q.value = this.parameters.q;
      return this.parameters.q;
    }
  });

  return Flt;

})(Component);

Lfo = (function(superClass) {
  extend(Lfo, superClass);

  function Lfo(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    Lfo.__super__.constructor.call(this, data);
    this.parameters.bypass = data.settings.bypass;
    this.parameters.type = Audio.WAVE_TYPE[data.settings.wave_type];
    this.parameters.frequency = data.settings.frequency;
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.component = Audio.CONTEXT.createOscillator();
    this.component.type = this.type;
    this.component.frequency.value = this.frequency;
    this.component.connect(this.aux);
    this.component.start();
  }

  Lfo.prototype.destroy = function() {
    this.component.stop();
    return null;
  };

  Lfo.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.type = Audio.WAVE_TYPE[Session.SETTINGS[this.component_session_uid].settings.wave_type];
      this.frequency = Session.SETTINGS[this.component_session_uid].settings.frequency;
      this.depth = MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.depth, 0, 100, 0, 1);
    }
    return null;
  };

  Lfo.property('type', {
    get: function() {
      return this.parameters.type;
    },
    set: function(value) {
      if (this.parameters.type === value) {
        return this.parameters.type;
      }
      this.parameters.type = value;
      this.component.type = this.parameters.type;
      return this.parameters.type;
    }
  });

  Lfo.property('frequency', {
    get: function() {
      return this.parameters.frequency;
    },
    set: function(value) {
      if (this.parameters.frequency === value) {
        return this.parameters.frequency;
      }
      this.parameters.frequency = value;
      this.component.frequency.value = this.parameters.frequency;
      return this.parameters.frequency;
    }
  });

  Lfo.property('depth', {
    get: function() {
      return this.parameters.depth;
    },
    set: function(value) {
      if (this.parameters.depth === value) {
        return this.parameters.depth;
      }
      this.parameters.depth = value;
      this.aux.gain.value = this.parameters.depth;
      return this.parameters.depth;
    }
  });

  return Lfo;

})(Component);

NoiseGenerator = (function(superClass) {
  extend(NoiseGenerator, superClass);

  function NoiseGenerator(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    NoiseGenerator.__super__.constructor.call(this, data);
    this.parameters.type = Audio.NOISE_TYPE[data.settings.noise_type];
    this.envelope = Audio.CONTEXT.createGain();
    this.envelope.gain.value = 0.0;
    this.envelope.connect(this.pre);
    this.buffer = this.getWhite();
    this.create();
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
  }

  NoiseGenerator.prototype.destroy = function() {
    this.generator.stop(0);
    this.output.gain.value = 0.0;
    this.generator = null;
    return null;
  };

  NoiseGenerator.prototype.create = function() {
    this.generator = Audio.CONTEXT.createBufferSource();
    this.generator.buffer = this.buffer;
    this.generator.loop = true;
    this.generator.start(0);
    this.generator.connect(this.envelope);
    return null;
  };

  NoiseGenerator.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.type = Audio.NOISE_TYPE[Session.SETTINGS[this.component_session_uid].settings.noise_type];
      this.setVolume(MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.volume, -60, 0, 0, 1));
    }
    return null;
  };

  NoiseGenerator.prototype.start = function(frequency) {
    var envAttackEnd, now;
    this.checkAUX();
    now = Audio.CONTEXT.currentTime;
    envAttackEnd = now + this.attack / 1000.0;
    this.active.push(frequency);
    this.envelope.attackStart = now;
    this.envelope.attackEnd = envAttackEnd;
    this.envelope.gain.cancelScheduledValues(now);
    this.envelope.gain.setValueAtTime(0.0, now);
    if (Session.SETTINGS[this.component_session_uid].settings.mute === false) {
      this.envelope.gain.linearRampToValueAtTime(1.0, envAttackEnd);
      this.envelope.gain.setTargetAtTime((this.sustain * 1.0) / 100.0, envAttackEnd, (this.decay / 1000.0) + 0.001);
    }
    return null;
  };

  NoiseGenerator.prototype.stop = function(frequency) {
    var index, now, rampValue, release;
    index = this.active.indexOf(frequency);
    if (index !== -1) {
      this.checkAUX();
      this.active.splice(index, 1);
      now = Audio.CONTEXT.currentTime;
      release = now + (this.release / 1000.0);
      if (this.active.length === 0) {
        rampValue = this.getRampValue(0, 1, this.envelope.attackStart, this.envelope.attackEnd, now);
        if (Session.SETTINGS[this.component_session_uid].settings.mute === true) {
          rampValue = 0;
        }
        this.envelope.gain.cancelScheduledValues(now);
        this.envelope.gain.setValueAtTime(rampValue, now);
        this.envelope.gain.linearRampToValueAtTime(0, release);
      }
    }
    return null;
  };

  NoiseGenerator.prototype.getWhite = function() {
    var buffer, bufferSize, i, k, output, ref, white;
    bufferSize = 2 * Audio.CONTEXT.sampleRate;
    buffer = Audio.CONTEXT.createBuffer(1, bufferSize, Audio.CONTEXT.sampleRate);
    output = buffer.getChannelData(0);
    for (i = k = 0, ref = bufferSize; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      white = Math.random() * 2 - 1;
      output[i] = white;
    }
    return buffer;
  };

  NoiseGenerator.prototype.getPink = function() {
    var b0, b1, b2, b3, b4, b5, b6, buffer, bufferSize, i, k, output, ref, white;
    b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
    bufferSize = 2 * Audio.CONTEXT.sampleRate;
    buffer = Audio.CONTEXT.createBuffer(1, bufferSize, Audio.CONTEXT.sampleRate);
    output = buffer.getChannelData(0);
    for (i = k = 0, ref = bufferSize; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      white = Math.random() * 1 - 0.5;
      b0 = 0.99886 * b0 + white * 0.0555179;
      b1 = 0.99332 * b1 + white * 0.0750759;
      b2 = 0.96900 * b2 + white * 0.1538520;
      b3 = 0.86650 * b3 + white * 0.3104856;
      b4 = 0.55000 * b4 + white * 0.5329522;
      b5 = -0.7616 * b5 - white * 0.0168980;
      output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
      output[i] *= 0.11;
      b6 = white * 0.115926;
    }
    return buffer;
  };

  NoiseGenerator.prototype.getBrown = function() {
    var buffer, bufferSize, i, k, lastOut, output, ref, white;
    lastOut = 0.0;
    bufferSize = 2 * Audio.CONTEXT.sampleRate;
    buffer = Audio.CONTEXT.createBuffer(1, bufferSize, Audio.CONTEXT.sampleRate);
    output = buffer.getChannelData(0);
    for (i = k = 0, ref = bufferSize; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      white = Math.random() * 1 - 0.5;
      output[i] = (lastOut + (0.02 * white)) / 1.02;
      lastOut = output[i];
      output[i] *= 3.5;
    }
    return buffer;
  };

  NoiseGenerator.property('type', {
    get: function() {
      return this.parameters.type;
    },
    set: function(value) {
      if (this.parameters.type === value) {
        return this.parameters.type;
      }
      this.parameters.type = value;
      switch (this.parameters.type) {
        case Audio.NOISE_TYPE[AppData.NOISE_TYPE.PINK]:
          this.buffer = this.getPink();
          break;
        case Audio.NOISE_TYPE[AppData.NOISE_TYPE.BROWN]:
          this.buffer = this.getBrown();
          break;
        default:
          this.buffer = this.getWhite();
      }
      this.destroy();
      this.create();
      return this.parameters.type;
    }
  });

  return NoiseGenerator;

})(Component);

Oscillator = (function(superClass) {
  extend(Oscillator, superClass);

  function Oscillator(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    Oscillator.__super__.constructor.call(this, data);
    this.parameters.type = Audio.WAVE_TYPE[data.settings.wave_type];
    this.parameters.detune = 0.0;
    this.parameters.octave = 1.0;
    this.parameters.portamento = 0.0;
    this.parameters.poly = false;
    this.activeOscillators = [];
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
  }

  Oscillator.prototype.destroy = function() {
    var i, k, ref;
    for (i = k = 0, ref = this.activeOscillators.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      this.activeOscillators[0].stop(0);
      this.activeOscillators.splice(0, 1);
    }
    this.active = [];
    return null;
  };

  Oscillator.prototype.create = function(frequency) {
    var envAttackEnd, nofg, now, oscillator;
    now = Audio.CONTEXT.currentTime;
    envAttackEnd = now + this.attack / 1000.0;
    nofg = Audio.CONTEXT.createGain();
    nofg.connect(this.pre);
    nofg.gain.value = 0.0;
    oscillator = Audio.CONTEXT.createOscillator();
    oscillator.type = this.parameters.type;
    oscillator.originalFrequency = frequency;
    oscillator.nofg = nofg;
    oscillator.frequency.cancelScheduledValues(now);
    oscillator.frequency.setTargetAtTime(frequency * this.parameters.octave * Audio.CUR_OCTAVE[Audio.OCTAVE_STEP], 0, this.parameters.portamento / 1000.0);
    oscillator.detune.setValueAtTime(this.parameters.detune, 0);
    oscillator.connect(nofg);
    oscillator.start(now);
    nofg.attackStart = now;
    nofg.attackEnd = envAttackEnd;
    nofg.gain.cancelScheduledValues(now);
    nofg.gain.setValueAtTime(0.0, now);
    if (Session.SETTINGS[this.component_session_uid].settings.mute === false) {
      nofg.gain.linearRampToValueAtTime(1.0, envAttackEnd);
      nofg.gain.setTargetAtTime((this.sustain * 1.0) / 100.0, envAttackEnd, (this.decay / 1000.0) + 0.001);
    }
    return oscillator;
  };

  Oscillator.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.poly = Session.SETTINGS[this.component_session_uid].settings.poly;
      this.type = Audio.WAVE_TYPE[Session.SETTINGS[this.component_session_uid].settings.wave_type];
      this.detune = Session.SETTINGS[this.component_session_uid].settings.detune;
      this.octave = Audio.OCTAVE[Session.SETTINGS[this.component_session_uid].settings.octave];
      this.portamento = Session.SETTINGS[this.component_session_uid].settings.portamento;
      this.setVolume(MathUtils.map(Session.SETTINGS[this.component_session_uid].settings.volume, -60, 0, 0, 1));
    }
    if (this.ENV || this.FLT || this.PTG || this.LFO) {
      if (this.LFO && event.component === this.LFO.component_session_uid) {
        this.checkAUX();
      }
    }
    return null;
  };

  Oscillator.prototype.start = function(frequency) {
    var now;
    this.checkAUX();
    now = Audio.CONTEXT.currentTime;
    this.active.push(frequency);
    if (this.parameters.poly || this.activeOscillators.length === 0) {
      this.activeOscillators.push(this.create(frequency));
    } else {
      this.activeOscillators[0].frequency.cancelScheduledValues(now);
      this.activeOscillators[0].frequency.setTargetAtTime(frequency * this.parameters.octave * Audio.CUR_OCTAVE[Audio.OCTAVE_STEP], 0, this.parameters.portamento / 1000.0);
    }
    return null;
  };

  Oscillator.prototype.stop = function(frequency) {
    var index, now, rampValue, release;
    index = this.active.indexOf(frequency);
    if (index !== -1) {
      this.checkAUX();
      now = Audio.CONTEXT.currentTime;
      release = now + (this.release / 1000.0);
      this.active.splice(index, 1);
      if (this.parameters.poly === true || this.active.length === 0) {
        rampValue = this.getRampValue(0, 1, this.activeOscillators[index].nofg.attackStart, this.activeOscillators[index].nofg.attackEnd, now);
        if (Session.SETTINGS[this.component_session_uid].settings.mute === true) {
          rampValue = 0;
        }
        this.activeOscillators[index].nofg.gain.cancelScheduledValues(now);
        this.activeOscillators[index].nofg.gain.setValueAtTime(rampValue, now);
        this.activeOscillators[index].nofg.gain.linearRampToValueAtTime(0, release);
        this.activeOscillators[index].stop(release);
        this.activeOscillators.splice(index, 1);
        null;
      } else {
        this.activeOscillators[0].frequency.cancelScheduledValues(now);
        this.activeOscillators[0].frequency.setTargetAtTime(this.active[this.active.length - 1] * this.parameters.octave, 0, this.parameters.portamento / 1000);
      }
    }
    return null;
  };

  Oscillator.property('type', {
    get: function() {
      return this.parameters.type;
    },
    set: function(value) {
      var i, k, ref;
      if (this.parameters.type === value) {
        return this.parameters.type;
      }
      this.parameters.type = value;
      for (i = k = 0, ref = this.activeOscillators.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.activeOscillators[i].type = this.parameters.type;
      }
      return this.parameters.type;
    }
  });

  Oscillator.property('detune', {
    get: function() {
      return this.parameters.detune;
    },
    set: function(value) {
      var i, k, ref;
      if (this.parameters.detune === value) {
        return this.parameters.detune;
      }
      this.parameters.detune = value;
      for (i = k = 0, ref = this.activeOscillators.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.activeOscillators[i].detune.setValueAtTime(this.parameters.detune, 0);
      }
      return this.parameters.detune;
    }
  });

  Oscillator.property('octave', {
    get: function() {
      return this.parameters.octave;
    },
    set: function(value) {
      var i, k, osc, ref;
      if (this.parameters.octave === value) {
        return this.parameters.octave;
      }
      this.parameters.octave = value;
      for (i = k = 0, ref = this.activeOscillators.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        osc = this.activeOscillators[i];
        osc.frequency.setValueAtTime(osc.originalFrequency * this.parameters.octave, 0);
      }
      return this.parameters.octave;
    }
  });

  Oscillator.property('portamento', {
    get: function() {
      return this.parameters.portamento;
    },
    set: function(value) {
      if (this.parameters.portamento === value) {
        return this.parameters.portamento;
      }
      this.parameters.portamento = value;
      return this.parameters.portamento;
    }
  });

  Oscillator.property('poly', {
    get: function() {
      return this.parameters.poly;
    },
    set: function(value) {
      if (this.parameters.poly === value) {
        return this.parameters.poly;
      }
      this.parameters.poly = value;
      this.destroy();
      return this.parameters.poly;
    }
  });

  return Oscillator;

})(Component);

PatternGate = (function(superClass) {
  extend(PatternGate, superClass);

  function PatternGate(data) {
    this.onSettingsChange = bind(this.onSettingsChange, this);
    this.update = bind(this.update, this);
    PatternGate.__super__.constructor.call(this, data);
    this.parameters.bypass = data.settings.bypass;
    this.parameters.pattern = data.settings.pattern;
    App.SETTINGS_CHANGE.add(this.onSettingsChange);
    this.current16thNote;
    this.lookahead = 25.0;
    this.scheduleAheadTime = 0.1;
    this.nextNoteTime = 0.0;
    this.last16thNoteDrawn = -1;
    this.notesInQueue = [];
    this.timerWorker = new Worker('workers/timeworker.js');
    this.timerWorker.onmessage = (function(_this) {
      return function(e) {
        if (e.data === 'tick') {
          _this.scheduler();
        }
        return null;
      };
    })(this);
    this.timerWorker.postMessage({
      'interval': this.lookahead
    });
    this.aux.gain.value = 0.0;
    this.play();
  }

  PatternGate.prototype.destroy = function() {
    this.stop();
    return null;
  };

  PatternGate.prototype.nextNote = function() {
    var secondsPerBeat;
    secondsPerBeat = 60.0 / Session.BPM;
    this.nextNoteTime += 0.25 * secondsPerBeat;
    this.current16thNote++;
    if (this.current16thNote === 16) {
      this.current16thNote = 0;
    }
    return null;
  };

  PatternGate.prototype.scheduleNote = function(beatNumber, time) {
    this.notesInQueue.push({
      note: beatNumber,
      time: time
    });
    if (this.parameters.pattern[beatNumber] === true && Session.SETTINGS[this.component_session_uid].settings.bypass === false) {
      this.aux.gain.setValueAtTime(1.0, time);
      this.aux.gain.linearRampToValueAtTime(0.001, time + 0.1);
      this.aux.gain.linearRampToValueAtTime(1.0, time + 0.11);
    }
    App.PATTERN_GATE.dispatch(beatNumber);
    return null;
  };

  PatternGate.prototype.scheduler = function() {
    while (this.nextNoteTime < Audio.CONTEXT.currentTime + this.scheduleAheadTime) {
      this.scheduleNote(this.current16thNote, this.nextNoteTime);
      this.nextNote();
    }
    return null;
  };

  PatternGate.prototype.play = function() {
    this.current16thNote = 0;
    this.nextNoteTime = Audio.CONTEXT.currentTime;
    this.timerWorker.postMessage('start');
    this.doUpdate = true;
    this.update();
    return null;
  };

  PatternGate.prototype.stop = function() {
    this.timerWorker.postMessage('stop');
    this.doUpdate = false;
    return null;
  };

  PatternGate.prototype.update = function() {
    var currentNote, currentTime;
    if (this.doUpdate) {
      requestAnimationFrame(this.update);
    }
    currentNote = this.last16thNoteDrawn;
    currentTime = Audio.CONTEXT.currentTime;
    while (this.notesInQueue.length && this.notesInQueue[0].time < currentTime) {
      currentNote = this.notesInQueue[0].note;
      this.notesInQueue.splice(0, 1);
      if (this.last16thNoteDrawn !== currentNote) {
        this.last16thNoteDrawn = currentNote;
      }
    }
    return null;
  };

  PatternGate.prototype.onSettingsChange = function(event) {
    if (event.component === this.component_session_uid) {
      this.pattern = Session.SETTINGS[this.component_session_uid].settings.pattern;
    }
    return null;
  };

  PatternGate.property('pattern', {
    get: function() {
      return this.parameters.pattern;
    },
    set: function(value) {
      if (this.parameters.pattern === value) {
        return this.parameters.pattern;
      }
      this.parameters.pattern = value;
      return this.parameters.pattern;
    }
  });

  return PatternGate;

})(Component);

Instrument = (function() {
  function Instrument() {
    this.onNoteOff = bind(this.onNoteOff, this);
    this.onNoteOn = bind(this.onNoteOn, this);
    this.onRemove = bind(this.onRemove, this);
    this.onAdd = bind(this.onAdd, this);
    this.master = new ChannelStrip();
    this.master.connect(Audio.CONTEXT.destination);
    this.channels = [];
    this.components = [];
    App.ADD.add(this.onAdd);
    App.REMOVE.add(this.onRemove);
    App.NOTE_ON.add(this.onNoteOn);
    App.NOTE_OFF.add(this.onNoteOff);
  }

  Instrument.prototype.onAdd = function(data) {
    Analytics.event('component', 'add', data.type_uid);
    this.add(data);
    return null;
  };

  Instrument.prototype.onRemove = function(data) {
    Analytics.event('component', 'remove', Session.SETTINGS[data.component_session_uid].type_uid);
    this.remove(data);
    return null;
  };

  Instrument.prototype.createChannelStrip = function() {
    var fader;
    fader = new ChannelStrip();
    fader.connect(this.master.input);
    return fader;
  };

  Instrument.prototype.getNextAvailableChannelStrip = function() {
    var available, channel, i, k, ref;
    if (this.channels.length === 0) {
      available = this.channels[0] = this.createChannelStrip();
    } else {
      for (i = k = 0, ref = this.channels.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        channel = this.channels[i];
        if (!channel) {
          available = this.channels[i] = this.createChannelStrip();
          break;
        }
      }
      if (!available) {
        available = this.channels[this.channels.length] = this.createChannelStrip();
      }
    }
    return available;
  };

  Instrument.prototype.onNoteOn = function(data) {
    var component, frequency, i, k, ref;
    frequency = Audio.noteToFrequency(data.note);
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      component = this.components[i];
      switch (component.type_uid) {
        case AppData.COMPONENTS.OSC:
        case AppData.COMPONENTS.NSG:
          component.start(frequency);
      }
    }
    return null;
  };

  Instrument.prototype.onNoteOff = function(data) {
    var component, frequency, i, k, ref;
    frequency = Audio.noteToFrequency(data.note);
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      component = this.components[i];
      switch (component.type_uid) {
        case AppData.COMPONENTS.OSC:
        case AppData.COMPONENTS.NSG:
          component.stop(frequency);
      }
    }
    return null;
  };

  Instrument.prototype.add = function(data) {
    var component;
    switch (data.type_uid) {
      case AppData.COMPONENTS.NSG:
        component = new NoiseGenerator(data);
        break;
      case AppData.COMPONENTS.OSC:
        component = new Oscillator(data);
        break;
      case AppData.COMPONENTS.ENV:
        component = new Envelope(data);
        break;
      case AppData.COMPONENTS.FLT:
        component = new Flt(data);
        break;
      case AppData.COMPONENTS.PTG:
        component = new PatternGate(data);
        break;
      case AppData.COMPONENTS.LFO:
        component = new Lfo(data);
        break;
      default:
        return;
    }
    if (component) {
      if (data.audioCapable) {
        component.connect(this.getNextAvailableChannelStrip().input);
      }
      this.attachToAUX(component);
      this.components.push(component);
    }
    return null;
  };

  Instrument.prototype.remove = function(data) {
    var component, i, k, ref;
    App.TOGGLE_SETTINGS_PANNEL_HEIGHT.dispatch({
      type: false
    });
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      component = this.components[i];
      if (component.component_session_uid === data.component_session_uid) {
        component.destroy();
        delete Session.SETTINGS[data.component_session_uid];
        this.detachFromAUX(component);
        this.components.splice(i, 1);
        this.channels.splice(i, 1);
        break;
      }
    }
    return null;
  };

  Instrument.prototype.detachFromAUX = function(component) {
    var cur_type, i, k, ref, type, uid;
    type = component.type_uid;
    uid = component.component_session_uid;
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      cur_type = this.components[i].type_uid;
      if (type === AppData.COMPONENTS.ENV) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          this.components[i].ENV = null;
          Session.SETTINGS[this.components[i].component_session_uid].connections.ENV = null;
        }
      }
      if (type === AppData.COMPONENTS.PTG) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          this.components[i].PTG = null;
          Session.SETTINGS[this.components[i].component_session_uid].connections.PTG = null;
        }
      }
      if (type === AppData.COMPONENTS.LFO) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          this.components[i].LFO = null;
          Session.SETTINGS[this.components[i].component_session_uid].connections.LFO = null;
        }
      }
      if (type === AppData.COMPONENTS.FLT) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          this.components[i].FLT = null;
          Session.SETTINGS[this.components[i].component_session_uid].connections.FLT = null;
        }
      }
    }
    return null;
  };

  Instrument.prototype.attachToAUX = function(component) {
    var cur_type, i, k, ref, type, uid;
    type = component.type_uid;
    uid = component.component_session_uid;
    for (i = k = 0, ref = this.components.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      cur_type = this.components[i].type_uid;
      if (type === AppData.COMPONENTS.ENV) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          if (this.components[i].ENV) {
            this.components[i].ENV.disconnect();
          }
          this.components[i].ENV = component;
          Session.SETTINGS[this.components[i].component_session_uid].connections.ENV = component.component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.PTG) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          if (this.components[i].PTG) {
            this.components[i].PTG.disconnect();
          }
          this.components[i].PTG = component;
          Session.SETTINGS[this.components[i].component_session_uid].connections.PTG = component.component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.LFO) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          if (this.components[i].LFO) {
            this.components[i].LFO.disconnect();
          }
          this.components[i].LFO = component;
          Session.SETTINGS[this.components[i].component_session_uid].connections.LFO = component.component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.FLT) {
        if (cur_type === AppData.COMPONENTS.OSC || cur_type === AppData.COMPONENTS.NSG) {
          if (this.components[i].FLT) {
            this.components[i].FLT.disconnect();
          }
          this.components[i].FLT = component;
          Session.SETTINGS[this.components[i].component_session_uid].connections.FLT = component.component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.OSC || type === AppData.COMPONENTS.NSG) {
        if (cur_type === AppData.COMPONENTS.ENV) {
          if (component.ENV) {
            component.ENV.disconnect();
          }
          component.ENV = this.components[i];
          Session.SETTINGS[component.component_session_uid].connections.ENV = this.components[i].component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.OSC || type === AppData.COMPONENTS.NSG) {
        if (cur_type === AppData.COMPONENTS.PTG) {
          if (component.PTG) {
            component.PTG.disconnect();
          }
          component.PTG = this.components[i];
          Session.SETTINGS[component.component_session_uid].connections.PTG = this.components[i].component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.OSC || type === AppData.COMPONENTS.NSG) {
        if (cur_type === AppData.COMPONENTS.LFO) {
          if (component.LFO) {
            component.LFO.disconnect();
          }
          component.LFO = this.components[i];
          Session.SETTINGS[component.component_session_uid].connections.LFO = this.components[i].component_session_uid;
        }
      }
      if (type === AppData.COMPONENTS.OSC || type === AppData.COMPONENTS.NSG) {
        if (cur_type === AppData.COMPONENTS.FLT) {
          if (component.FLT) {
            component.FLT.disconnect();
          }
          component.FLT = this.components[i];
          Session.SETTINGS[component.component_session_uid].connections.FLT = this.components[i].component_session_uid;
        }
      }
    }
    return null;
  };

  return Instrument;

})();

App = (function(superClass) {
  extend(App, superClass);

  App.HELP = new signals.Signal();

  App.PROMPT = new signals.Signal();

  App.LOAD_PATCH = new signals.Signal();

  App.PATCH_CHANGED = new signals.Signal();

  App.ADD = new signals.Signal();

  App.REMOVE = new signals.Signal();

  App.TOGGLE_KEYBOARD = new signals.Signal();

  App.TOGGLE_SETTINGS_PANNEL_HEIGHT = new signals.Signal();

  App.TOGGLE_MENU = new signals.Signal();

  App.NOTE_ON = new signals.Signal();

  App.NOTE_OFF = new signals.Signal();

  App.PATTERN_GATE = new signals.Signal();

  App.SETTINGS_CHANGE = new signals.Signal();

  App.PICKER_SHOW = new signals.Signal();

  App.PICKER_HIDE = new signals.Signal();

  App.PICKER_VALUE = new signals.Signal();

  App.AUTH = new signals.Signal();

  App.MIDI = new signals.Signal();

  App.AUTO_SAVE = new signals.Signal();

  function App() {
    this.onHelp = bind(this.onHelp, this);
    this.onToggle = bind(this.onToggle, this);
    this.onAutoSave = bind(this.onAutoSave, this);
    this.loadPatch = bind(this.loadPatch, this);
    this.clearPatch = bind(this.clearPatch, this);
    this.onLoadPatch = bind(this.onLoadPatch, this);
    this.onPrompt = bind(this.onPrompt, this);
    this.onToggleMenu = bind(this.onToggleMenu, this);
    this.onResize = bind(this.onResize, this);
    this.loadComplete = bind(this.loadComplete, this);
    App.__super__.constructor.call(this);
    this.loading = new LoadingScreen(this.loadComplete);
    AppData.PIXI.stage.addChild(this.loading);
    App.RESIZE.add(this.onResize);
    App.TOGGLE_MENU.add(this.onToggleMenu);
    App.PROMPT.add(this.onPrompt);
    App.LOAD_PATCH.add(this.onLoadPatch);
    App.AUTO_SAVE.add(this.onAutoSave);
    App.TOGGLE_KEYBOARD.add(this.onToggle);
    App.HELP.add(this.onHelp);
  }

  App.prototype.loadComplete = function() {
    var t1, t2, uid;
    AppData.PIXI.stage.removeChild(this.loading);
    t1 = new PIXI.Text("mod-synth", AppData.TEXTFORMAT.TEST_FONT_1);
    t1.position.x = 0;
    t1.position.y = -100;
    AppData.PIXI.stage.addChild(t1);
    t2 = new PIXI.Text("mod-synth", AppData.TEXTFORMAT.TEST_FONT_2);
    t2.position.x = 400;
    t2.position.y = -100;
    AppData.PIXI.stage.addChild(t2);
    this.prompt = new Prompt();
    this.tour = new Tour();
    this.instrument = new Instrument();
    this.controllers = new Controllers();
    this.dashboard = new Dashboard();
    this.dashboard.alpha = 0;
    AppData.PIXI.stage.addChild(this.dashboard);
    this.menuBg = new PIXI.Graphics();
    AppData.PIXI.stage.addChild(this.menuBg);
    this.menu = new Menu();
    AppData.PIXI.stage.addChild(this.menu);
    this.bottom = new Bottom();
    this.bottom.alpha = 0;
    AppData.PIXI.stage.addChild(this.bottom);
    this.controls = new Controls();
    this.controls.alpha = 0;
    AppData.PIXI.stage.addChild(this.controls);
    if (AppData.SHOW_TOUR) {
      this.loadPatch('default', true);
      this.tour.start();
    } else {
      uid = Cookies.getCookie('patch') || 'default';
      this.loadPatch(uid);
    }
    if (AppData.SHOW_MENU_PANNEL) {
      this.onToggleMenu({
        width: AppData.MENU_PANNEL + AppData.MENU_PANNEL_BORDER
      }, 0);
    }
    App.RESIZE.dispatch();
    TweenMax.to([this.controls, this.bottom, this.dashboard], 0.5, {
      alpha: 1
    });
    return null;
  };

  App.prototype.initialAdd = function(delay, componentData) {
    setTimeout((function(_this) {
      return function() {
        var data;
        data = Session.ADD(componentData);
        App.ADD.dispatch(data);
        return App.SETTINGS_CHANGE.dispatch({
          component: data.component_session_uid
        });
      };
    })(this), delay * 1000.0);
    return null;
  };

  App.prototype.onResize = function() {
    if (!this.menu) {
      return;
    }
    this.menu.x = AppData.SHOW_MENU_PANNEL === true ? AppData.WIDTH - AppData.MENU_PANNEL - AppData.MENU_PANNEL_BORDER : AppData.WIDTH;
    this.menu.resize();
    this.menuBg.x = AppData.SHOW_MENU_PANNEL === true ? AppData.WIDTH + this.dashboard.x : AppData.WIDTH;
    this.menuBg.beginFill(AppData.BG);
    this.menuBg.lineStyle(0, 0);
    this.menuBg.moveTo(0, 0);
    this.menuBg.lineTo(AppData.SUBMENU_PANNEL, 0);
    this.menuBg.lineTo(AppData.SUBMENU_PANNEL, AppData.HEIGHT);
    this.menuBg.lineTo(0, AppData.HEIGHT);
    this.menuBg.lineTo(0, 0);
    this.menuBg.endFill();
    return null;
  };

  App.prototype.onToggleMenu = function(data, duration) {
    if (duration == null) {
      duration = 0.3;
    }
    TweenMax.to([this.dashboard, this.bottom, this.controls, this.addLayer], duration, {
      x: (AppData.SHOW_MENU_PANNEL === true ? -data.width : 0),
      ease: Quad.easeInOut
    });
    TweenMax.to(this.menu, duration, {
      x: (AppData.SHOW_MENU_PANNEL === true ? AppData.WIDTH - AppData.MENU_PANNEL - AppData.MENU_PANNEL_BORDER : AppData.WIDTH),
      ease: Quad.easeInOut
    });
    TweenMax.to(this.menuBg, duration, {
      x: AppData.WIDTH - data.width,
      ease: Quad.easeInOut
    });
    if (AppData.SHOW_MENU_PANNEL === true) {
      this.menu.open(data.width, duration);
      Analytics.event('menu', 'open');
    } else {
      this.menu.close(duration);
      Analytics.event('menu', 'close');
    }
    Cookies.setCookie('menu', AppData.SHOW_MENU_PANNEL === true ? 'show' : 'hide');
    return null;
  };

  App.prototype.onPrompt = function(data) {
    if (data) {
      this.prompt.show(data);
      Analytics.event('prompt', 'open');
    } else {
      this.prompt.hide();
      Analytics.event('prompt', 'open');
    }
    return null;
  };

  App.prototype.onLoadPatch = function(data) {
    if (data.confirm === void 0) {
      data.confirm = true;
    }
    if (data.confirm) {
      App.PROMPT.dispatch({
        question: 'Load "' + data.label + '" patch?',
        onConfirm: (function(_this) {
          return function() {
            _this.clearPatch(function() {
              _this.loadPatch(data.uid);
              return null;
            });
            return null;
          };
        })(this)
      });
    } else {
      this.clearPatch((function(_this) {
        return function() {
          _this.loadPatch(data.uid);
          return null;
        };
      })(this));
    }
    return null;
  };

  App.prototype.clearPatch = function(callback) {
    var component;
    for (component in Session.SETTINGS) {
      App.REMOVE.dispatch(Session.SETTINGS[component]);
    }
    setTimeout(function() {
      callback();
      return null;
    }, 1000);
    return null;
  };

  App.prototype.loadPatch = function(uid, skip) {
    if (skip == null) {
      skip = false;
    }
    Services.api.patches.load_patch(uid, (function(_this) {
      return function(snapshot) {
        var component, data, i;
        data = snapshot.val();
        if (data === null) {
          uid = Session["default"].uid;
          data = Session["default"];
        }
        Session.patch.uid = uid;
        Session.patch.author = data.author;
        Session.patch.name = data.name;
        Session.patch.date = data.date;
        Session.patch.components = data.components;
        if (skip === true) {
          return;
        }
        App.PATCH_CHANGED.dispatch();
        i = 0;
        for (component in Session.patch.components) {
          _this.initialAdd(0.123 * (i++), Session.patch.components[component]);
        }
        Cookies.setCookie('patch', uid);
        return null;
      };
    })(this));
    return null;
  };

  App.prototype.onAutoSave = function(data) {
    if (AppData.TOUR_MODE) {
      return;
    }
    if (data.x) {
      Session.SETTINGS[data.component_session_uid].settings.x = data.x;
    }
    if (data.y) {
      Session.SETTINGS[data.component_session_uid].settings.y = data.y;
    }
    Services.api.patches.update_patch(data.component_session_uid);
    return null;
  };

  App.prototype.onToggle = function(value) {
    Cookies.setCookie('keyboard', value === true ? 'show' : 'hide');
    return null;
  };

  App.prototype.onHelp = function(value) {
    Cookies.setCookie('labels', value === true ? 'show' : 'hide');
    return null;
  };

  return App;

})(PixiBase);

(me = function() {
  var args;
  args = ['\n %cMOD%cSYNTH\n\n', 'background: #000000; color: #3a3a3a; font-size: x-large;', 'background: #3a3a3a; color: #000000; font-size: x-large;'];
  console.log.apply(console, args);
  window.app = new App();
  return null;
})();
